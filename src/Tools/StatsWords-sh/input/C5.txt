cours
php
accélérer
version
0.9.1
table
matière
1
cours
format
epub
2
cours
format
pdf
3
table
matière
:
3.1
caractéristique
principales
3.2
fonctionnement
3.3
historique
3.4
installation
php
3.5
configuration
php
3.6
exemple
simples
3.7
imbrication
de
code
html
php
3.8
formulaire
html
réponse
en
php
3.9
variables
en
php
3.10
chaîne
en
php
3.11
typage
en
php
3.12
particularité
de
php
3.13
tableau
en
php
3.14
tableau
prédéfinis
de
php
3.15
l’inclusion
de
fichier
externes
3.16
objet
en
php
3.17
collection
en
php
3.18
connexion
base
de
donnée
depuis
php
3.19
requête
préparer
en
php
3.20
complément
sur
pdo
-
sécurité
3.21
filtrage
en
php
3.22
gestion
transaction
avec
pdo
3.23
connexion
persistante
avec
pdo
3.24
validation
contrôle
d’entrées
avec
gump
3.25
http
conservation
d’informations
sur
client
3.26
manipuler
xml
avec
php
3.27
architecture
de
type
mvc
avec
php
3.28
templates
twig
en
php
3.29
composer,
symfony
4
flex
3.30
tester
application
php
-
tdd
3.31
mettre
en
place
web
service
rest
3.32
exemple
de
service
rest
avec
php
3.33
tester
api
rest
avec
navigateur
avec
curl
3.34
tester
api
3.35
feuille
de
td
lic
pro
web
mobile
3.36
feuille
de
td
2ème
année
iut
informatique
3.37
feuille
de
td
lic
pro
web
mobile
3.38
feuille
de
td
cvrh
tours
3.39
alice
démarrer
avec
git
3.40
bob
travailler
avec
alice
grâce
à
git
3.41
alice
mettre
à
jour
3.42
alice
travailler
sur
branche
git
3.43
bob
branche
d’alice
3.44
alice
récupérer
dernière
version
master
4
git
5
référence
6
index
recherche
index
chapitre
1
cours
format
epub
php
en
accéléré
format
epub
cours
php
accéléré,
version
0.9.1
chapitre
1.
cours
format
epub
chapitre
2
cours
format
pdf
php
en
accéléré
en
pdf
cours
php
accéléré,
version
0.9.1
chapitre
2.
cours
format
pdf
chapitrer
3
table
matière
:
3.1
caractéristique
principales
3.1.1
langage
interpréter
—
de
compilation
—
exécuter
instruction
par
instruction
—
multi-plateformes
—
compilateur
aot/bytecode
en
php7
zend
—
compilateur
jit
pour
hhvm
facebook
—
langage
hack
proposer
par
facebook
3.1.2
spécialiser
dans
génération
de
texte
de
document
—
html
—
pdf
—
image
3.1.3
fichier
d’extension
.php
—
coder
insérer
dans
page
html
—
entre
balise
<
?php
?>
cours
php
accéléré,
version
0.9.1
3.2
fonctionnement
3.2.1
l’interpréteur
lire
fichier
source
.php
générer
flux
de
sortie
avec
règles
suivantes
:
—
ligne
situer
à
l’extérieur
d’un
bloc
php
(
entre
<
?php
?>)
être
recopier
inchangée
dans
flux
de
sortie
—
code
php
être
interpréter
générer
résultat
intégrés
flux
de
sortie
—
erreur
éventuelles
donner
lieu
à
message
d’erreurs
qu’on
retrouver
dans
flux
de
sortie
(selon
configuration
serveur)
—
page
html
pure
sauvegarder
avec
l’extension
.php
être
modifier
renvoyer
.
.
.
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
3.3
historique
3.3.1
créateur
rasmus
lerdorf,
un
programmeur
grnlandais
avec
nationalité
canadienne,
créer
php
en
1994
pour
analyser
connexion
sur
site
web.
réaliser
2
premier
mouture
langage
(v1
v2).
en
1997,
deux
étudiants,
andi
gutmans
zeev
suraski,
reprendre
moteur,
sortir
php
3.0
outil
zend.
note
:
langage
php
avoir
subir
de
profonds
remaniement
avoir
bénéficier
de
d’enrichissements
depuis
premier
versions.
premier
version
objet
de
php
(la
version
4)
avoir
être
remanier
passage
de
php4.0
à
php5.0
s’inspire
modèle
de
java.
version
actuelle
de
php
être
7.2,
sortie
en
version
7
être
sortir
en
décembre
2015
n’y
avoir
avoir
de
version
6!
!php
7
(https
://wiki.php.net/rfc/php7timeline)
avertissement
:
début
développement
de
version
6
de
php
dater
de
2005
avoir
être
abandonner
en
raison
de
difficulté
d’intégration
support
unicode.
autres
fonctionnalité
envisager
avoir
depuis
été
intégrer
à
php
5.3
5.4.
ca
n’a
empêcher
nombre
de
livre
intituler
php
6
de
sortir
version
n’existera
.
.
.
3.3.2
saga
php
7
:
—
facebook
avoir
publier
en
2011
hiphop
virtual
machiner
dire
hhvm,
machine
virtuelle
permettre
de
pré-compiler
code
php
en
bytecode
à
manière
de
java
(jit
compiler).
—
en
2014,
facebook
sortir
langage
hack,
s’exécutant
grace
à
hhvm
apporter
fonctionnalité
typage
fort,
classe
paramétrables,
api
de
collection
riche
cohérente,
traitement
asynchrones
de
sécurité
avec
l’extension
xhp.
—
framework
php
phalcon
(extension
pecl
de
php),
proposer
zephir
(zend
engine
php
intermediate)
(https
://github.com/phalcon/zephir)
permettre
création
d’extensions
rapides
en
php
(codées
en
c)
de
manière
simplifier
(sans
écrire
c
directe-
ment).
—
société
zend
avoir
réagir
face
à
hhvm
en
accélérer
développement
de
nouvelle
mouture
de
php
7
améliorer
performance
avec
mécanisme
de
compilation
aot
(ahead
of
time)
3.3.3
php
signifier
d’abord
personal
home
pager
hypertextpreprocessor
3.3.
historique
cours
php
accéléré,
version
0.9.1
3.3.4
syntaxe
structure
—
proche
c
perl
—
structurer
début
—
possibilité
de
définir
fonction
classe
—
bonnes
performance
pour
php
7
(améliorations
de
l’ordre
de
50%
de
vitesse
d’exécution)
3.3.5
utilisation
—
grand
succès
—
utilisation
par
de
grands
site
—
de
code
libre
disponible.
—
dizaine
de
million
de
site
web
l’utilisent
à
travers
monde.
.
.
—
monde
(http
://lemonde.fr/)
,
facebook
(http
://facebook.fr/)
yahoo
(http
://yahoo.fr/)
3.3.6
cms
grands
cms
content
management
systems
système
de
gestion
de
contenu
utiliser
php,
:
—
wordpress
—
joomla
—
drupal
cms
de
ecommerce
:
—
prestashop
—
magento
3.3.7
frameworks
de
grands
frameworks
de
développement
web
être
disponibles
en
php
:
—
symfony
—
zend
—
laravel
—
phalcon
—
cakephp
—
yii
—
slim
noter
:
de
300
million
de
site
être
réaliser
en
php
à
travers
monde!
!
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
3.4
installation
php
indication
:
informaticien
devoir
savoir
lamp
vouloir
dire
.
.
.
3.4.1
lamp
:
—
linux
—
apache
—
mysql
—
php
par
exension,
logiciel
équivalent
pour
windows,
s’est
retrouver
nommer
:
3.4.2
wamp
:
pour
windows
mamp
pour
macs.
.
.
3.4.3
mamp
:
pour
mac.
indispensable
apache
php
être
installer
sur
mac
os
10.xx
simple
à
configurer.
falloir
installer
mysql
dans
paquet
utiliser
homebrew
macports
pour
plate-formes,
pouvoir
installer
xampp
(https
://www.apachefriends.org/fr/index.html)
revenir
à
l’os
de
référence
à
présent.
3.4.4
sous
linux
:
—
installer
apache2
—
installer
php7
—
télécharger
documentation
(paquet
php-doc)
—
vérifier
fichier
php.ini
—
installer
mysql
(client
serveur)
—
installer
phpmyadmin
—
installer
paquet
complémentaires
(dont
nom
commencer
par
php5-)
3.4.
installation
php
cours
php
accéléré,
version
0.9.1
3.5
configuration
php
3.5.1
fichier
php.ini
fichier
php.ini
contenir
directive
essentielles
de
réglage.
—
taille
fichier
téléchargeables
—
safe-mode
—
affichage
traitement
erreur
—
communication
avec
mysql
danger
:
attention,
directive
de
fichier
être
importantes
pour
sécurité
d’un
serveur
en
production.
falloir
veiller
vérifier
dans
cas.
sous
distribution
de
linux,
exister
2
version
de
fichier
un
de
developpement
autre
pour
serveur
de
production.
n’oubliez
d’activer
bonne
version
selon
contexte
de
vérifier
en
cas.
3.5.2
directives
principales
php.ini
:
directive
être
nombreuses.
j’ai
retenir
importantes
dans
fichier
suivre
en
commenter
rôle.
[php]
;;;;;;;;;;;;;;;;;;;
;
about
php.ini
;
;;;;;;;;;;;;;;;;;;;
;
fichier
de
configuration
principal
de
php
;
permettre
de
préciser
principales
option
;
sous
distribution
linux,
exister
2
versions:
;
un
de
developpement
autre
pour
serveur
de
production
;;;;;;;;;;;;;;;;;;;;
;
language
option
;
;;;;;;;;;;;;;;;;;;;;
;
pour
activer
php
engine
=
;
pouvoir
mettre
à
faux
:
tags
<?
....
?>
être
reconnus.
short_open_tag
=
off
;
allow
asp-style
<%
%>
tags.
;
http://php.net/asp-tags
asp_tags
=
off
;
the
number
of
significant
digit
displayed
in
floating
˓→numbers.
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
http://php.net/precision
precision
=
14
;
compatibilité
an
2000
y2k_compliance
=
;
taille
buffers
output_buffering
=
4096
;
pour
servir
page
compresser
zlib.output_compression
=
off
;
mettre
à
pour
forcer
flush
en
phase
de
debuggage
implicit_flush
=
off
;
safe
mode
;
http://php.net/safe-mode
;
pouvoir
laisser
désactiver
;
avoir
être
déclarer
obsolete
depuis
php
5.3
safe_mode
=
;pour
désactiver
fonction
php
;
indépendant
safe_mode
;
http://php.net/disable-functions
disable_functions
=
;
meme
chose
avec
classe
disable_classes
=
;
colors
for
syntax
highlighting
mode.
;
a
utiliser
avec
fonction
highlight_file()
=
show_source()
highlight.string
=
#dd0000
highlight.comment
=
#ff9900
highlight.keyword
=
#007700
highlight.bg
=
#ffffff
highlight.default
=
#0000bb
highlight.html
=
#000000
;;;;;;;;;;;;;;;;;
;
miscellaneous
;
;;;;;;;;;;;;;;;;;
;
pouvoir
l'enlever
sur
serveur
de
production
;
n'est
menace
de
sécurité
expose_php
=
;;;;;;;;;;;;;;;;;;;
(suite
sur
page
suivante)
3.5.
configuration
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
resource
limits
;
;;;;;;;;;;;;;;;;;;;
;temps
d'éxécution
max
d'un
script
;attention
avoir
code
long
à
s'éxécuter!
!
max_execution_time
=
30
;
traitement
donnée
reçues
;
laisser
valeur
par
défaut
max_input_time
=
60
;
taille
mémoire
donner
à
script
php
memory_limit
=
128m
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
error
handling
and
logging
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
pour
serveur
de
production:
e_all
&
~e_deprecated
;
pour
serveur
de
développement
error_reporting
=
e_all
|
e_strict
;
affichage
erreur
sur
sortie
standard
;
cad
sur
navigateur
;
a
désactiver
sur
serveur
de
production
;
utile
pour
développeur
display_errors
=
;
affichage
erreur
démarrage
de
php
;
pour
débugger
erreur
sur
plugins
;
module
complémentaires
de
php
display_startup_errors
=
off
;
logger
erreur
;
a
activer
log_errors
=
;
set
maximum
length
of
log_errors.
in
error_log
information
about
˓→the
source
is
;
added.
the
default
is
1024
and
0
allows
to
not
apply
any
maximum
˓→length
at
all.
;
http://php.net/log-errors-max-len
log_errors_max_len
=
1024
;ne
répéter
erreur
identiques
ignore_repeated_errors
=
;
...
sauf
provenir
de
fichier
différents
ignore_repeated_source
=
off
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
rapporter
fuite
de
mémoire
;
a
activer
en
phase
de
dévelopement
report_memleaks
=
;
variable
$php_errormsg
;
contenir
texte
dernier
message
;
d'erreur
;
a
désactiver
sur
serveur
de
production
track_errors
=
;
http://php.net/html-errors
html_errors
=
;
a
faire
pointer
sur
copie
locale
de
documentation
;
de
php
;
a
désactiver
sur
serveur
de
production
docref_root
=
"/docs/php/"
;
extension
fichier
de
documentation
docref_ext
=
.html
;
chaine
à
afficher
avant
message
d'erreur
;
pour
qu'il
s'affiche
en
rouge
;
réserver
serveur
de
dévelopement
error_prepend_string
=
"<font
color=#ff0000>"
;
fermeture
tag
précédent
error_append_string
=
"</font>"
;
pour
changer
fichier
être
logguées
;
erreurs.
laisser
inchangé
sauf
;
cas
particulier
;error_log
=
syslog
;;;;;;;;;;;;;;;;;
;
dater
handling
;
;;;;;;;;;;;;;;;;;
;
the
separator
used
in
php
generated
urls
to
separate
arguments.
;
php's
default
setting
is
"&".
;
http://php.net/arg-separator.output
;
example:
;arg_separator.output
=
"&amp;"
;
list
of
separator(s)
used
by
php
to
parse
input
urls
into
˓→variables.
;
php's
default
setting
is
"&".
;
note:
every
character
in
this
directive
is
considered
avoir
˓→separator!
!
(suite
sur
page
suivante)
3.5.
configuration
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
http://php.net/arg-separator.input
;
example:
;arg_separator.input
=
";&"
;
this
directive
determines
which
super
global
arrays
are
˓→registered
when
php
;
start
up.
if
the
register_globals
directive
is
enabled,
it
also
˓→determines
;
what
order
variables
are
populated
into
the
global
space.
g,p,c,e
˓→&
s
are
;
abbreviations
for
the
following
respective
super
globals:
get,
˓→post,
cookie,
;
env
and
server.
there
is
avoir
performance
penalty
paid
for
the
˓→registration
of
;
these
arrays
and
because
env
is
not
avoir
commonly
used
avoir
the
˓→others,
env
is
;
is
not
recommended
production
servers.
you
can
still
get
˓→access
to
;
the
environment
variables
through
getenv()
should
you
need
to.
;
default
value:
"egpcs"
;
development
value:
"gpcs"
;
production
value:
"gpcs";
;
http://php.net/variables-order
variables_order
=
"gpcs"
;
laisser
valeur
par
défaut
request_order
=
"gp"
;
ca
faire
qu'il
falloir
garder
directive
à
off
register_globals
=
off
;
determines
whether
the
deprecated
long
$http_*_vars
type
˓→predefined
variables
;
are
registered
by
php
not.
avoir
they
are
deprecated,
we
˓→obviously
don't
;
recommend
you
user
them.
they
are
by
default
for
compatibility
˓→reasons
but
;
they
are
not
recommended
production
servers.
;
default
value:
;
development
value:
;
production
value:
;
http://php.net/register-long-arrays
register_long_arrays
=
off
;
a
activer
vouloir
utiliser
php
;
en
ligne
de
commande
passer
argument
register_argc_argv
=
off
;
meilleure
performance
:
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
auto_globals_jit
=
;
taille
maximale
donnée
accepter
en
post
;
http://php.net/post-max-size
post_max_size
=
8m
;
a
éviter
magic_quotes_gpc
=
off
;
magic_quotes_runtime
=
off
;
mimetype
par
défaut
:
text/html
default_mimetype
=
"text/html"
;
jeu
de
caractère
par
défaut
;
laisser
à
vide
choisir
jeu
de
caractère
;default_charset
=
"iso-8859-1"
default_charset
=
"utf-8"
;;;;;;;;;;;;;;;;
;
file
uploads
;
;;;;;;;;;;;;;;;;
;
;
autoriser
"uploads"
de
fichier
file_uploads
=
;
spécifier
répertoire
temporaire
por
fichier
;
uploadés
:
;upload_tmp_dir
=
/tmp/upload-dir
;
taille
maxi
pour
fichies
uploadés
upload_max_filesize
=
4m
;
nbre
de
fichier
pouvoir
être
uploadés
en
seule
requête
max_file_uploads
=
20
;;;;;;;;;;;;;;;;;;
;
fopen
wrappers
;
;;;;;;;;;;;;;;;;;;
;
whether
to
allow
the
treatment
of
urls
(like
http://
or
ftp://)
˓→as
files.
;
http://php.net/allow-url-fopen
allow_url_fopen
=
;
whether
to
allow
include/require
to
open
urls
(like
http://
or
˓→ftp://)
avoir
files.
(suite
sur
page
suivante)
3.5.
configuration
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
http://php.net/allow-url-include
allow_url_include
=
off
;
define
the
anonymous
ftp
password
(your
email
address).
php's
˓→default
setting
;
for
this
is
empty.
;
http://php.net/from
;from="john@doe.com"
;
define
the
user-agent
string.
php's
default
setting
for
this
is
˓→empty.
;
http://php.net/user-agent
;user_agent="php"
;
timeout
pour
flux
baser
sur
socket
default_socket_timeout
=
60
;;;;;;;;;;;;;;;;;;;;;;
;
dynamic
extension
;
;;;;;;;;;;;;;;;;;;;;;;
;
;
sous
windows:
;
extension=msql.dll
;
...
sous
unix:
;
;
extension=msql.so
;
;
...
avec
chemin:
;
;
extension=/path/to/extension/msql.so
;
;;;;;;;;;;;;;;;;;;;
;
module
settings
;
;;;;;;;;;;;;;;;;;;;
[date]
;
fuseau
horaire
utiliser
date.timezone
="europe/paris"
[iconv]
;
conversion
d'un
système
d'encodage
à
autre
;iconv.input_encoding
=
iso-8859-1
;iconv.internal_encoding
=
iso-8859-1
;iconv.output_encoding
=
iso-8859-1
[pdo_mysql]
;
en
cas
d'utilisation
nouveau
moteur
mysqlnd
pdo_mysql.cache_size
=
2000
(suite
sur
page
suivante)
16
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
socket
par
défaut
pour
connexion
à
mysql
;
valeur
par
défaut
fonctionner
pdo_mysql.default_socket=/var/mysql/mysql.sock
[mail
function]
;
for
win32
only.
;
http://php.net/smtp
smtp
=
localhost
;
http://php.net/smtp-port
smtp_port
=
25
;
emplacement
pour
logger
appel
à
fonction
mail()
;mail.log
=
[mysql]
;
autoriser
connexion
persistantes
;
n'apporte
fonctionnalité
supplémentaire
;
pouvoir
améliorer
performance
mysql.allow_persistent
=
;
if
mysqlnd
is
used:
number
of
cache
slots
for
the
internal
result
˓→set
cache
;
http://php.net/mysql.cache_size
mysql.cache_size
=
2000
;
nbre
maxi
de
lien
persistants
mysql.max_persistent
=
-1
;
nombre
maxi
de
lien
permanents
:
;
-1
vouloir
dire
sans
limitation
mysql.max_links
=
-1
;
port
par
défaut
de
mysql
mysql.default_port
=
3306
;
laisser
valeur
par
défaut
mysql.default_socket
=
;
hôte
par
défaut
pour
mysql_connect()
mysql.default_host
=
;
utilisateur
par
défaut
pour
mysql_connect()
mysql.default_user
=
;
passwd
par
défaut
pour
mysql_connect()
;
n'est
bonne
chose
de
garder
;
passwd
ici!!
!!obsolete
mysql.default_password
=
(suite
sur
page
suivante)
3.5.
configuration
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
timeout
de
connexion
à
mysql
mysql.connect_timeout
=
60
;
mode
de
débuggage
mysql
mysql.trace_mode
=
[mysqli]
;
nbre
de
lien
persistants
mysqli.max_persistent
=
-1
;
autoriser
connexion
persistantes
;
n'apporte
fonctionnalité
supplémentaire
;
pouvoir
améliorer
performance
mysqli.allow_persistent
=
;
maximum
number
of
links.
-1
means
no
limit.
;
http://php.net/mysqli.max-links
mysqli.max_links
=
-1
;
if
mysqlnd
is
used:
number
of
cache
slots
for
the
internal
result
˓→set
cache
;
http://php.net/mysqli.cache_size
mysqli.cache_size
=
2000
;
por
pour
mysqli
mysqli.default_port
=
3306
;
socket
par
défaut
pour
mysqli
mysqli.default_socket
=
/tmp/mysql.sock
;
autoriser
interdire
reconnexion
mysqli.reconnect
=
[mysqlnd]
;
activation
statistique
de
mysqlnd
;
avoir
fin
de
réglage
serveur
de
bd
mysqlnd.collect_statistics
=
;
même
chose
avec
opération
sur
mémoire
mysqlnd.collect_memory_statistics
=
off
;
size
of
avoir
pre-allocated
buffer
used
when
sending
command
to
˓→mysql
in
bytes.
;
http://php.net/mysqlnd.net_cmd_buffer_size
;mysqlnd.net_cmd_buffer_size
=
2048
;
size
of
avoir
pre-allocated
buffer
used
for
reading
dater
sentir
by
the
˓→server
in
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
bytes.
;
http://php.net/mysqlnd.net_read_buffer_size
;mysqlnd.net_read_buffer_size
=
32768
[bcmath]
;
number
of
decimal
digit
for
all
bcmath
functions.
;
http://php.net/bcmath.scale
bcmath.scale
=
0
[session]
;
.../...
;
session
doivent-elles
utiliser
cookies
?
session.use_cookies
=
1
;
envoyer
cookies
à
travers
;
connexion
sécuriser
;
défaut
être
off
;session.cookie_secure
=
;
php
maintenir
cookie
avec
l'identifiant
de
session
;
c'est
précaution
viser
à
éviter
;
vol
de
session
;
n'est
parade
absolue
session.use_only_cookies
=
1
;
nom
de
session
session.name
=
phpsessid
;
démarrage
automatique
de
session
;
désactiver
par
défaut
session.auto_start
=
0
;
durée
de
vie
cookie
;
placer
à
0,
temps
navigateur
;
être
redémarrer
session.cookie_lifetime
=
0
;
domaine
de
validité
cookie
session.cookie_domain
=
;
pour
interdire
à
javascript
d'accéder
à
cookie
session.cookie_httponly
=
;
;
http_referer
devoir
contenir
sous-chaine
;
pour
être
considérer
valide
session.referer_check
=
(suite
sur
page
suivante)
3.5.
configuration
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
;
durer
d'expiration
document
en
minute
session.cache_expire
=
180
;
choix
d'une
fonction
de
hachage
pour
session
;
:
;
0
(md5
128
bits)
;
1
(sha-1
160
bits)
session.hash_function
=
0
[assertion]
;
assertion
actives
(défaut)
assert.active
=
;
emettre
warning
en
cas
d'assertion
vérifier
assert.warning
=
;
s'arrêter
en
cas
d'assertion
satisfaire
;
désactiver
par
défaut
;assert.bail
=
off
;
fonction
utilisateur
à
appeller
en
cas
d'assertion
satisfaite
;assert.callback
=
0
3.6
exemple
simples
3.6.1
bonjour
<!
!doctype
html>
<html>
<head>
<meta
charset="utf-8"
/>
<title>
bonjour
depuis
php
</title>
</head>
<body>
<?php
echo
'bonjour
générer
en
php!
!';
?>
</body>
</html>
3.6.2
résultat
brut
html
<!
!doctype
html>
<html>
<head>
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<meta
charset="utf-8"
/>
<title>
bonjour
depuis
php
</title>
</head>
<body>
bonjour
générer
en
php!
!</body>
</html>
3.6.3
exécution
bonjour
3.6.4
infos
php
<?php
phpinfo();
?>
3.6.5
exécution
infos
php
3.6.6
user
agent
<!
!doctype
html>
<html>
<head>
<title>
navigateur
</title>
<body>
information
sur
navigateur
être
:
<?php
echo
$_server['http_user_agent'];
?>
</body>
</html>
3.6.7
exemple
de
résultat
3.6.
exemple
simples
cours
php
accéléré,
version
0.9.1
information
sur
navigateur
être
:
mozilla/5.0
(macintosh;
u;
intel
mac
os
x
10_6_4;
fr-fr)
applewebkit/
˓→533.18.1
(khtml,
like
gecko)
version/5.0.2
safari/533.18.5
3.6.8
exécution
user-agent
pouvoir
consulter
documentation
de
php
sur
:
doc
php
(http
://php.net/manual/fr/)
3.7
imbrication
de
code
html
php
pouvoir
par
exemple
:
—
commencer
page
html
—
écrire
de
php
—
reprendre
en
html
—
etc.
3.7.1
exemple
:
<!
!doctype
html>
<html>
<head>
<title>
navigateur
</title>
<body>
information
sur
navigateur
être
:
<?php
$agent=$_server['http_user_agent'];
echo
$agent;
echo("
\n<p>");
if
(stristr($agent,"msie"))
{
?>
<b>vous
sembler
utiliser
internet
explorer!
!</b>
<?php
}
elseif
(preg_match("/firefox/i",$agent))
{
?>
<b>vous
sembler
utiliser
firefox!
!</b>
<?php
}
elseif
(preg_match("/chrome/i",$agent))
{
?>
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<b>vous
sembler
utiliser
chrome!
!</b>
<?php
}
elseif
(preg_match("/safari/",$agent))
{
?>
<b>vous
sembler
utiliser
safari!
!</b>
<?php
}
else
echo
"navigateur
inconnu!
!";
?>
</body>
</html>
attention
:
pouvoir
devenir
illisible
3.7.2
exécution
user-agent
php
3.7.3
remède
:
écrire
genre
de
code,
solution
courantes
:
—
utiliser
fonction
php
—
utiliser
classe
objet
php
—
séparer
modèle
vue
—
séparer
modèles,
vue
contrôleurs
(modèle
mvc)
—
utiliser
système
de
templates
twig
3.8
formulaire
html
réponse
en
php
coder
:
—
petit
formulaire
html
—
réponse
en
php
3.8.1
formulaire
html
:
<!
!doctype
html>
<
html>
<
head>
<
meta
charset="utf-8"
/>
<
title>
formulaire
html
</title>
</head>
<
body>
<
form
action="reponse.php"
method="get">
(suite
sur
page
suivante)
3.8.
formulaire
html
réponse
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
nom
:<
input
type="text"
name="nom">
âge
:<
input
type="text"
name="age">
<
p>
<
input
type=submit
value="envoyer">
</form>
</body>
</html>
3.8.2
réponse
:
<!
!doctype
html>
<html>
<head>
<meta
charset="utf-8"
/>
<title>
test
formulaire
php
</title>
</head>
<body>
<h1>bonjour,
<?php
echo
$_get['nom']
?></h1>
<h2>vous
sembler
avoir
<?php
echo
$_get['age']
?></h2>
<?php
$n
=
$_get['nom'];
$a
=
$_get['age'];
?>
nom
être
stocker
dans
variable
$n
type
être
<?php
echo
gettype($n)
?>
âge
être
stocker
dans
variable
<b>$a</b>
<br/>
type
être
<i><?php
echo
gettype($a);
?></i>
<br/>
pouvoir
transformer
en
<i>integer</i>
en
faire
:
<?php
settype($a,"integer");
?>
<br/>
type
de
$a
:<?php
echo
gettype($a);
?>
</body>
</html>
3.8.3
exécution
:
formulaire
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
3.9
variables
en
php
3.9.1
déclaration
simple
:
<?php
$variable
=
"une
variable
en
php";
//
autre
variable
:
$variable
=
1000;
?>
3.9.2
existence
de
variables,
fonction
isset()
:
<?php
$a
=
"une
variable
en
php";
if(isset($a))
echo
"la
variable
avoir
existe";
unset($a);
echo
"la
variable
avoir
avoir
être
supprimer
...";
?>
3.9.3
test
de
variables,
fonction
empty()
:
<?php
$a
=
"une
variable
en
php";
if
(!
!empty($a))
echo
"
variable
exister
n\'est
˓→pas
vide!
!";
?>
avertissement
:
fonction
empty()
répondre
vrai
variable
n’existe
sans
faire
warning!
!en
outre,
avant
php
5.5,
pouvoir
l’utiliser
sur
autre
chose
variables
(impossible
d’appeller
fonction
dans
l’argument
qu’on
passe)
3.9.4
test
de
variables
en
php
7
avec
l’opérateur
coalescent
:
l’opérateur
null
coalescent
?
?
permettre
de
simplifier
test
d’existence
de
variables
d’alternatives,
par
exemple
:
<?php
//
$a
initialiser
$b
=
143;
(suite
sur
page
suivante)
3.9.
variables
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
echo
$a
??
3;
//
affiche
3
echo
php_eol;
echo
$a
??
$b
??
7;
//
affiche
143
echo
php_eol;
permettre
de
limiter
recours
à
isset
dans
de
nombreuses
situation
:
<?php
//
récupérer
valeur
de
$_get['email']
retourne
'nobody
˓→'
//
n'existe
pas.
$mail
=
$_get['email']
??
'nobody@null';
//
equivalent
à:
$mail
=
isset($_get['email'])
?
$_get['email']
:
˓→'nobody@null';
//
coalescing
??
pouvoir
être
chainer
:
//
renvoyer
premier
valeur
définir
parmi
//
$_get['email'],
$_post['email'],
'nobody@null.com'.
$mail
=
$_get['email']
??
$_post['email']
??
'nobody@null';
echo
"
$mail\n";
3.9.5
portée
variables
:
—
par
défaut,
variables
être
locales
—
portée
réduire
à
fonction
bloc
de
déclaration
—
pour
déclarer
variable
globale,
pouvoir
utiliser
tableau
$_globals[
]
<?php
$_globals['mavar']="bonjour";
?>
3.9.6
constante
:
<?php
define("user","toto");
echo
user;
//
noter
l'absence
de
$
?>
3.10
chaîne
en
php
3.10.1
base
:
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
guillemet
cote
:
<?php
$var="hello
php";
$machaine="le
contenir
de
\$var
être
$var<br>";
echo
$machaine;
//ou
avec
'
':
$mystring='le
contenir
de
$var
être
'.$var;
echo
$mystring;
?>
résultat
être
:
contenu
de
$var
être
hello
php
concaténation
:
a
l’aide
de
.
longueur
d’une
chaine
:
<?php
int
lg=strlen($chaine);
?>
accéder
caractère
i
d’une
chaine
:
<?php
echo
$chaine[i];
?>
chaine
être
traiter
tableau
indéxé
par
*entier*
plupart
tableau
de
php
être
indéxés
par
chaines...
mettre
en
majuscules/minuscules
:
—
avec
strtoupper()
pour
obtenir
majuscules
—
avec
strtolower()
pour
mettre
en
minuscules
—
avec
ucfirst()
pour
mettre
en
majuscule
premier
lettre
d’une
chainer
—
avec
ucwords()
pour
mettre
en
majuscule
premier
lettre
de
mot
dans
chaine
3.10.2
recherche
de
sous-chaines
de
motif
dans
chaine
:
—
avec
strstr()
—
avec
stristr()
—
avec
ereg()
eregi()
3.10.
chaîne
en
php
cours
php
accéléré,
version
0.9.1
par
exemple
:
<?php
$agent=$_server['http_user_agent'];
echo
$agent;
echo("
\n<p>");
if
(stristr($agent,"msie"))
echo
"vous
sembler
utiliser
internet
explorer!
!</b>";
elseif
(ereg("firefox",$agent))
echo
"vous
sembler
utiliser
firefox!
!</b>";
elseif
(eregi("chrome",$agent))
echo
"vous
sembler
utiliser
chrome!
!</b>";
?>
indication
:
variante
de
fonction
comporter
i
indiquer
insensibilité
à
casse
c’est
à
dire
majuscules
minuscules
être
considérer
identiques.
exemple
:
test
complet
useragent
:
<?php
function
getbrowser($useragent){
if
(preg_match("/msie(.{5})/i",$useragent,$num))
return
$num[0];
elseif
(preg_match("/firefox(.*)/i",$useragent,$num))
return
$num[0];
elseif
(preg_match("/chrome(.{4})/i",$useragent,$num))
return
$num[0];
elseif
(preg_match("/safari/i",$useragent,$num)){
preg_match("/version(.{4})/",$useragent,$num);
return
"safari
".$num[0];
}
else
return
"navigateur
inconnu";
}
if
(!
!empty($_server['http_user_agent'])){
echo
"votre
navigateur
sembler
etre:\n";
echo
getbrowser($_server['http_user_agent']);
}
//
test
avec
useragent
connus:
$ff="mozilla/5.0
(macintosh;
intel
mac
os
x
10.9;
rv:32.0)
gecko/
˓→20100101
firefox/32.0";
$msie="mozilla/5.0
(compatible;
msie
10.6;
windows
nt
6.1;
trident/
˓→5.0;
infopath.2;
slcc1;
.net
clr
3.0.4506.2152;
.net
clr
3.5.
˓→30729;
.net
clr
2.0.50727)
3gpp-gba
untrusted/1.0";
$chrome="mozilla/5.0
(windows
nt
6.3;
win64;
x64)
applewebkit/537.
˓→36
(khtml,
like
gecko)
chrome/37.0.2049.0
safari/537.36";
$safari="mozilla/5.0
(ipad;
cpu
os
6_0
like
mac
os
x)
applewebkit/
˓→536.26
(khtml,
like
gecko)
version/6.0
mobile/10a5355d
safari/
(suite
sur
page
suivante)
˓→8536.25";
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
echo
"<br/>
test
firefox:<br/>
\n";
echo
getbrowser($ff)."<br/>
\n";
echo
"<br/>
test
msie:
\n";
echo
getbrowser($msie)."<br/>
\n";
echo
"<br/>
test
chrome:
\n";
echo
getbrowser($chrome)."<br/>
\n";
echo
"<br/>
test
safari:
\n";
echo
getbrowser($safari);
?>
résultat
:
<br/>
test
firefox:<br/>
firefox/32.0<br/>
<br/>
test
msie:
msie
10.6<br/>
<br/>
test
chrome:
chrome/37.<br/>
<br/>
test
safari:
safari
version/6.0
3.11
typage
en
php
3.11.1
fonction
gettype(
)
settype(
)
:
gettype(
)
renvoyer
l’un
résultat
suivants
:
—
integer
—
doubler
—
string
—
array
—
object
—
—
«
unknown
type
»
settype(
)
changer
type
d’un
élément
:
<?php
$a=3.5;
settype($a,"integer");
(suite
sur
page
suivante)
3.11.
typage
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
echo
"le
contenir
de
variable
avoir
être
".$a;
?>
résultat
être
:
contenu
de
variable
avoir
être
3
3.11.2
fonction
de
test
:
—
is_int()
—
is_long()
—
is_double()
—
is_array()
—
is_object()
—
is_string()
attention
:
n’oubliez
javascript
différence
entre
l’opérateur
==
===
premier
vérifier
l’égalité
contenu
en
tenir
compte
d’une
éventuelle
différence
de
typage
(int
string
par
exemple)
second
vérifier
égalité
stricte.
en
d’autres
terme
:
5
==
«
5
»
être
vrai
5
===
«
5
»
être
faux
3.12
particularité
de
php
3.12.1
valeur
variables
:
<?php
$toto
=
"bonjour<br/>
\n";
$var
=
"toto";
echo
$$var;
?>
résultat
être
:
3.12.2
résultat
brut
bonjour<br/>
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
3.12.3
fonction
eval()
:
permettre
l’évaluation
d’expressions
arithmetiques
en
php.
exister
en
javascript.
délicat
à
manipuler,
problématique
en
terme
de
sécurité.
3.13
tableau
en
php
3.13.1
tableau
associatifs
-
parcours
avec
boucle
foreach
:
<?php
$jours=array("lu"=>"lundi","ma"=>"mardi",
"me"=>"mercredi","je"=>"jeudi","ve"=>"vendredi",
"sa"=>"samedi","di"=>"dimanche"
);
foreach($jours
avoir
$key=>$val)
echo
$key."
".$val."<br>
\n";
?>
donner
:
lu
lundi
mardi
me
mercredi
jeudi
ve
vendredi
samedi
di
dimanche
3.13.2
affichage
avec
print_r()
:
<?php
print_r($jours);
?>
3.13.3
résultat
brut
html
:
array
(
[lu]
=>
lundi
[ma]
=>
mardi
[me]
=>
mercredi
[je]
=>
jeudi
[ve]
=>
vendredi
(suite
sur
page
suivante)
3.13.
tableau
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
[sa]
=>
samedi
[di]
=>
dimanche
)
3.13.4
essayer
vous-même
tab
3.13.5
utilisation
de
fonction
array_walk
:
<?php
array_walk($jours,'aff_tab');
?>
avoir
définir
préalable
:
<?php
function
aff_tab($val,
$key){
echo
"
$key-$val<br/>
\n";
}
?>
obtenir
même
résultat
qu’avec
boucle
foreach
3.13.6
tri
simple
d’un
tableau
:
<?php
sort($jours);
array_walk($jours,'aff_tab');
?>
3.13.7
obtenir
:
0-dimanche
1-jeudi
2-lundi
3-mardi
4-mercredi
5-samedi
6-vendredi
c’est
à
dire
:
—
tableau
être
trier
selon
l’ordre
de
valeur
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
—
clef
être
effacer
réaffecter
avec
entiers.
vouloir
préserver
clef
tableau
associatif,
falloir
utiliser
méthode
suivante
:
3.13.8
tri
selon
l’ordre
naturel
avec
natsort
<?php
$jours=array("lu"=>"lundi","ma"=>"mardi",
"me"=>"mercredi","je"=>"jeudi","ve"=>"vendredi",
"sa"=>"samedi","di"=>"dimanche"
);
var_dump($jours);
natsort($jours);
var_dump($jours);
?>
3.13.9
résultat
brut
html
array(7)
{
["lu"]=>
string(5)
"lundi"
["ma"]=>
string(5)
"mardi"
["me"]=>
string(8)
"mercredi"
["je"]=>
string(5)
"jeudi"
["ve"]=>
string(8)
"vendredi"
["sa"]=>
string(6)
"samedi"
["di"]=>
string(8)
"dimanche"
}
array(7)
{
["di"]=>
string(8)
"dimanche"
["je"]=>
string(5)
"jeudi"
["lu"]=>
string(5)
"lundi"
["ma"]=>
string(5)
"mardi"
["me"]=>
string(8)
"mercredi"
["sa"]=>
string(6)
"samedi"
(suite
sur
page
suivante)
3.13.
tableau
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
["ve"]=>
string(8)
"vendredi"
}
3.13.10
exécution
tritabnat
pouvoir
utiliser
fonction
natcasesort()
vouloir
préoccuper
de
casse
chaine
présentes
dans
tableau,
à
l’ordre
dictionnaire
.
.
.
3.14
tableau
prédéfinis
de
php
3.14.1
tableau
concerner
protocole
http
:
—
$_get[
],
$_post[
]
$_request[
]
englober
2
—
$_server[
]
:
variables
décrire
client
page
courante
—
$_globals[
]
variables
globales
—
$_cookie[
]
pour
cookies
—
$_session[
]
pour
session
3.14.2
exemple
récupération
de
$_server[
]
grâce
à
fonction
getenv()
:
<?php
function
infos(){
$env
=
array('remote_addr','http_accept_language','http_
˓→host',
'http_user_agent','script_filename','server_addr',
'server_name','server_signature','server_software',
'request_method','query_string','request_uri','script_name
˓→');
//
construction
d'un
tableau
associatif
//
avec
valeur
lire
dans
l'environnement
$retour
=array();
foreach
($env
avoir
$clef)
$retour[$clef]
=
getenv($clef);
return
$retour;
}
echo("voici
infos
disponibles:<br>");
$tab
=
infos();
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
foreach
($tab
avoir
$clef=>$val)
echo
$clef."
:".$val."<br>
\n";
?>
3.14.3
résultat
infos
disponibles:
remote_addr
:::1
http_accept_language
:fr-fr
http_host
:localhost
http_user_agent
:mozilla/5.0
(macintosh;
u;
intel
mac
os
x
˓→10_6_4;
fr-fr)
applewebkit/533.18.1
(khtml,
like
gecko)
version/5.0.2
˓→safari/533.18.5
script_filename
:/users/roza/sites/php/exemples/infospy.php
server_addr
:::1
server_name
:localhost
server_signature
:
server_software
:apache/2.2.14
(unix)
mod_ssl/2.2.14
openssl/0.9.8l
dav/2
php/5.3.2
request_method
:get
query_string
:
request_uri
:/~roza/php/exemples/infospy.php
script_name
:/~roza/php/exemples/infospy.php
ùser-agent
<http://localhost/~roza/php/exemples/infospy.
˓→php>`_
3.14.4
exécution
infospy
3.15
l’inclusion
de
fichier
externes
3.15.1
include
:
—
semblable
include
c/c++
—
réaliser
inclusion
physique
fichier
demander
3.15.2
include_once
:
—
identique
include
—
protéger
contre
d’éventuelles
inclusion
multiples
3.15.
l’inclusion
de
fichier
externes
cours
php
accéléré,
version
0.9.1
—
pouvoir
mener
à
erreur
(redéclarations,
etc.)
<?php
include_once("connect.php");
?>
3.15.3
require
require_once
:
—
fonctionner
include
include_once
—
programme
s’arrête
fichier
inclure
n’existe
<?php
require("malib.php");
require_once("connect.php");
?>
3.15.4
dirname()
pour
savoir
dans
répertoire
trouver
pouvoir
utiliser
fonction
php
dirname()
<?php
include_once(dirname(__file__)
.
'/config/config.inc.php');
?>
indication
:
lorsqu’on
inclure
désigner
fichiers,
valoir
utiliser
chemin
relatifs
pour
repérer
fichier
(comme
dessus)
de
donner
chemin
absoudre
par
rapport
à
racine
serveur
style
/home/user/www/config/config.inc.php
être
portable
d’un
serveur
à
l’autre
éviter
déboires!
!
avertissement
:
l’utilisation
systématique
de
version
avec
once
(include_once
re-
quire_once)n’est
recommander
pouvoir
causer
ralentissement
à
l’exécution
programme.
3.16
objet
en
php
3.16.1
evolutions
grands
principe
:
—
objet
exister
en
php
à
partir
de
version
4
—
changement
importants
en
php
5
:
convergence
vers
modèle
objet
de
java
—
introduction
en
java
d’interfaces
de
classe
abstraire
—
emploi
modifieurs
private
public
en
java
—
retrouver
__tostring(),
__clone()
mécanisme
de
traitement
exception
semblable
à
de
java.
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
—
constructeur
s’appellent
:
__construct()
—
destructeurs
__destruct()
—
méthode
porter
mot
clef
function
signaler
type
de
retour
—
commentaire
de
documentation
faire
à
manière
de
java
indication
:
objet
s’instancient
avec
mot
clef
new
en
java
c++
utiliser
->
pour
signifier
l’appel
d’une
méthode.
.
être
prendre
pour
concaténation
chaînes.
.
.
3.16.2
objet
simple
etudiant
en
php
fabriquer
objet
simple
en
php.
ecrivons
objet
représenter
étudiant
avec
donnée
:
—
identifier
—
nom
—
date
de
naissance
méthode
pour
opérer
sur
donnée
:
—
constructeur
—
getter
setter
—
equals()
—
tostring()
pour
affichage
donner
code
suivre
:
<?php
/**
classe
etudiant
en
php
*/
class
etudiant{
/**
identification
unique
d'un
etudiant
*/
protected
$etudiant_id;
/**
nom
de
l'etudiant
*/
protected
$nom;
/**
date
de
naissance
de
l'etudiant
*/
protected
$naissance;
public
function
__construct($id,
$nom,$naissance){
$this->etudiant_id
=
(int)$id;
//
cast
vers
integer
$this->nom
=
(string)$nom;
//
cast
vers
string
$this->naissance=
(int)$naissance;
//
cast
vers
date(timestamp)
}
/**
*
fonction
de
comparaison
simplifiee
entre
etudiants
*
==
comparer
id,
nom
naissance
*/
(suite
sur
page
suivante)
3.16.
objet
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
public
function
equals(etudiant
$etudiant){
return
($this->getid()
==
$etudiant->getid());
}
public
function
getid(){
return
$this->etudiant_id;
}
public
function
getnom(){
return
$this->nom;
}
public
function
getnaissance(){
return
$this->naissance;
}
public
function
__tostring(){
setlocale(lc_time,
"fr_fr");
$ne=strftime('%a
%d
%b
%y',$this->naissance);
return
'etudiant:
id='
.
$this->getid().',
nom='.$this->
˓→getnom()."
$ne";
}
}
/*
test
:
*/
date_default_timezone_set('europe/paris');
$etu=new
etudiant(234,"talon",time());
var_dump($etu);
echo
"<br/>";
echo
$etu;
?>
resultat
:
object(etudiant)#1
(3)
{
["etudiant_id":protected]=>
int(234)
["nom":protected]=>
string(5)
"talon"
["naissance":protected]=>
int(1537386847)
}
<br/>etudiant:
id=234,
nom=talon
mercredi
19
septembre
2018
execution
etudiant
php
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
indication
:
lorsqu’on
utiliser
l’opérateur
de
comparaison
==
sur
objets,
ceux-ci
être
comparer
en
utiliser
règles
suivantes
:
deux
objet
être
égaux
s’ils
être
instance
de
même
classe
avoir
mêmes
attribut
valeurs,
valeur
être
comparer
avec
l’opérateur
==.
de
l’utilisation
de
l’opérateur
d’identité
===,
objet
être
identiques
s’ils
faire
référence
à
même
instance
de
classe.
avertissement
:
de
programmeur
débutants
contenter
d’utiliser
php
langage
procédural
sans
utiliser
côté
objet.
bloquer
dans
l’apprentissage
langage
grands
frameworks
php.
être
à
l’aise
avec
objets,
suivre
d’abord
cours
d’introduction
à
programmation
objet,
en
java,
python
c++
par
exemple.
3.17
collection
en
php
3.17.1
en
php
standard,
collecter
=
arrays
:
—
contenter
de
qu’offre
php
en
standard,
collection
résumer
à
l’utilisation
tableau
associatifs
en
php
—
framework
collection
en
java
être
riche
3.17.2
datastructures
ds
:
falloir
installer
librairie
supplémentaire
ds
(datastructures)
pour
avoir
accès
à
framework
similaire
en
php.
voir
documentation
collecter
php
(http
://php.net/manual/fr/book.ds.php)
aller
pour
utiliser
commande
pecl
pour
installer
ds
extension
:
pecl
install
ds
charger
l’extension
en
ajouter
fichier
.ini
de
php
:
extension=ds.so
extension
donner
accès
à
classe
similaires
à
framework
collection
en
java.
classe
proposer
être
par
exemple
:
—
sequence
—
vector
—
deque
—
vector
3.17.
collection
en
php
cours
php
accéléré,
version
0.9.1
—
pair
—
set
—
stack
—
queue
—
priorityqueue
3.17.3
utilisation
de
ds
:
classe
interface
de
ds
s’utilisent
dans
espace
de
nommage
ds
:
<?php
$vector
=
new
\ds\vector();
$vector->push("un");
$vector->push("deux");
$vector->push("trois",
"quatre");
//
...[
,
]
=
unpacking
$vector->push(...["cinq",
"six"]);
print_r($vector);
?>
3.17.4
exemple
d’utilisation
de
classe
set
utiliser
classe
set.
question
html
dans
select
multiple
:
prendre
petit
formulaire
en
html
proposer
choix
de
couleur
dans
select
:
<
p>quelles
être
couleur
maillot
panthère
fleury
˓→loiret
handball
?
<
select
name="coul[]"
multiple
size=5>
<
option
value="jaune">jaune
<
option
value="rose">rose
<
option
value="bleu">bleu
<
option
value="noir">noir
<
option
value="blanc">blanc
<
option
value="vert">vert
</select>
</p>
réponse
php
avec
collection
<?php
if
(!
!empty($_get['coul'])){
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
$couleursreponse
=
new
\ds\set($_get['coul']);
$couleurscorrectes
=
new
\ds\set(['rose','noir','blanc
˓→']);
//
calculer
différence
2
ensemble
voir
˓→elle
être
vide
if
(($couleursreponse->diff($couleurscorrectes))->isempty())
echo
"bravo
couleur
de
fleury
hand
ball
être
˓→bien
rose
noir
blanc!
!";
else
echo
"mauvaise
réponse
:
couleur
de
fleury
˓→hand
ball
sont:
rose
noir
blanc!
!";
}
sans
collections,
utiliser
tableau
.
.
.
sans
ds,
avoir
être
obliger
de
contenter
de
tableau
php
d’utiliser
par
exemple
méthode
array_diff
:
voir
:
array_diff
php
(http
://php.net/manual/fr/function.array-diff.php)
avec
arrays
:
pouvoir
s’en
sortir
avec
de
simples
tableau
php
en
vérifier
taille
tableau
réponse
donner
être
même
tableau
bonnes
réponses,
contenu
de
tableau
être
identiques.
<?php
if
(!
!empty($_get['coul'])){
$couleursreponse
=
$_get['coul'];
$couleurscorrectes
=
array(['rose','noir','blanc']);
if
(count($couleursreponse)
==
count($couleurscorrectes)
&&!
!
˓→array_diff($couleursreponse,
$couleurscorrectes))
echo
"bravo
couleur
de
fleury
hand
ball
être
rose
˓→noir
blanc!
!";
else
echo
"mauvaise
réponse
:
couleur
de
fleury
hand
ball
˓→sont:
rose
noir
blanc!
!";
}
3.18
connexion
base
de
donnée
depuis
php
3.18.1
table
simple
en
sql
:
3.18.
connexion
base
de
donnée
depuis
php
cours
php
accéléré,
version
0.9.1
create
tabler
`carnet`
(
ìdìnt(11)
not
null
auto_increment,
`nom`
varchar(30)
default
null,
`prenom`
varchar(30)
default
null,
`naissancè
date
default
null,
`villè
varchar(30)
default
null,
primary
key
(ìd`)
)
engine=innodb
auto_increment=13
default
charset=utf8;
insert
into
`carnet`
valoir
(1,'smith','john','1980-12-17','orleans'),
(2,'durand','jean','1983-01-13','orleans'),
(3,'gudule','jeanne','1967-11-06','tours'),
(4,'zapata','emilio','1956-12-01','orleans'),
(5,'jourdain','nicolas','2000-09-10','tours'),
(6,'dupuy','marie','1986-01-11','blois'),
(7,'andreas','lou','1861-02-12','st
petersbourg'),
(9,'kafka','franz','1883-07-03','prague'),
(11,'dalton','joe','2003-12-06','dallas');
insérer
table
dans
mysql
en
ligne
de
commande
à
l’aide
de
phpmyadmin.
puis,
pour
consulter
table
depuis
php,
utiliser
connecteur
pdo
offrir
interface
de
connexion
utilisable
pour
sgbd
(systemes
de
gestion
de
base
de
donnees)
habituels
mysql,
postgresql,
oracle
microsoft
sql
server.
3.18.2
connexion
simple
en
php
avec
pdo
<!
!doctype
html>
<html>
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
</head>
<body>
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
<?php
require("connect.php");
//
pour
oracle:
$dsn="oci:dbname=//serveur:1521/base
//
pour
sqlite:
$dsn="sqlite:/tmp/base.sqlite"
$dsn="mysql:dbname=".base.";host=".server;
try{
$connexion=new
pdo($dsn,user,passwd);
}
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
catch(pdoexception
$e){
printf("échec
de
connexion
:
%s\n",
$e->getmessage());
exit();
}
$sql="select
*
from
carnet";
if(!
!$connexion->query($sql))
echo
"pb
d'accès
carnet";
else{
foreach
($connexion->query($sql)
avoir
$row)
echo
$row['prenom']."
".
$row['nom']."né(e)
".
$row['naissance']."<br/>
\n";
}
?>
</body>
</html>
avec
fichier
connect.php
contenir
information
de
connexion
serveur
mysql
:
<?php
define('user',"scott");
define('passwd',"tiger");
define('server',"localhost");
define('base',"dbscott");
?>
resultat
brut
html
:
<!
!doctype
html>
<html>
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
</head>
<body>
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
john
smithné(e)
1980-12-17<br/>
jean
durandné(e)
1983-01-13<br/>
jeanne
gudulené(e)
1967-11-06<br/>
emilio
zapatané(e)
1956-12-01<br/>
nicolas
jourdainné(e)
2000-09-10<br/>
marier
dupuyné(e)
1986-01-11<br/>
(suite
sur
page
suivante)
3.18.
connexion
base
de
donnée
depuis
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
lou
andreasné(e)
1861-02-12<br/>
franz
kafkané(e)
1883-07-03<br/>
joe
daltonné(e)
2003-12-06<br/>
</body>
</html>
execution
carnet
php
fabrication
d’une
table
html
avec
résultat
:
<html>
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
<body>
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
<?php
require("connect.php");
$dsn="mysql:dbname=".base.";host=".server;
try{
$connexion=new
pdo($dsn,user,passwd);
}
catch(pdoexception
$e){
printf("échec
de
connexion
:
%s\n",
$e->getmessage());
exit();
}
$sql="select
*
from
carnet";
if(!
!$connexion->query($sql))
echo
"pb
d'accès
carnet";
else{
?>
<table>
<tr>
<td>
nom
</td>
<td>
prénom
</td></tr>
<?php
foreach
($connexion->query($sql)
avoir
$row)
echo
"<tr><td>".$row['nom']."</td><td>".
$row['prenom']."</td></tr>
\n";
?>
</table>
<?php
}
?>
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
</body>
</html>
résultat
bruts
:
<html>
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
<body>
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
<table>
<tr>
<td>
nom
</td>
<td>
prénom
</td></tr>
<tr><td>smith</td><td>john</td></tr>
<tr><td>durand</td><td>jean</td></tr>
<tr><td>gudule</td><td>jeanne</td></tr>
<tr><td>zapata</td><td>emilio</td></tr>
<tr><td>jourdain</td><td>nicolas</td></tr>
<tr><td>dupuy</td><td>marie</td></tr>
<tr><td>andreas</td><td>lou</td></tr>
<tr><td>kafka</td><td>franz</td></tr>
<tr><td>dalton</td><td>joe</td></tr>
</table>
</body>
</html>
execution
carnet
table
pouvoir
faire
petit
refactoring
avec
fonction
établir
connexion
à
base
:
<?php
require("connect.php");
function
connect_bd(){
$dsn="mysql:dbname=".base.";host=".server;
try{
$connexion=new
pdo($dsn,user,passwd);
}
(suite
sur
page
suivante)
3.18.
connexion
base
de
donnée
depuis
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
catch(pdoexception
$e){
printf("échec
de
connexion
:
%s\n",
$e->
˓→getmessage());
exit();
}
return
$connexion;
}
?>
améliorer
l’affichage
résultat
:
<html>
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
<link
rel="stylesheet"
href="tabstyle.css"
/>
</head>
<body>
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
<?php
require_once('connexion.php');
$connexion=connect_bd();
$sql="select
*
from
carnet";
if(!
!$connexion->query($sql))
echo
"pb
d'accès
carnet";
else{
?>
<table
class="centre"
id="jolie">
<tr>
<td>
id
</td>
<td>
prénom
</td>
<td>
nom
</td><td>
naissance
</
˓→td>
</tr>
<?php
foreach
($connexion->query($sql)
avoir
$row)
echo
"<tr><td>".$row['id']."</td>
<td>".$row['prenom']."</td>
<td>".$row['nom']."</td>
<td>".$row['naissance']."</td></tr><br/>
\n";
?>
</table>
<?php
}
?>
</body>
</html>
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
avec
fichier
css
:
/*
bordure
simple
tableau
*/
table,
th,
td
{
border:
1px
solid
grey;}
table{border-collapse:collapse;}
/*
centrage
tableau
*/
table.centre{
margin:auto;}
/*
centrage
texte
dans
cellule
tableau
*/
table.centre
td{text-align:center;}
table#jolie
tr:first-child{
background:lightpink;
}
table#jolie
tr:nth-child(2n){
background:#efd3c9;
}
table#jolie
tr:nth-child(2n+3){
background:#bcbcd0;
}
/*
tableau
avoir
seule
ligne
l'affiche
en
rouge
*/
tabler
tr:only-child{
background:red;
}
résultat
bruts
:
<html>
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
<link
rel="stylesheet"
href="tabstyle.css"
/>
</head>
<body>
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
<table
class="centre"
id="jolie">
<tr>
<td>
id
</td>
<td>
prénom
</td>
<td>
nom
</td><td>
naissance
</
˓→td>
</tr>
<tr><td>1</td>
<td>john</td>
<td>smith</td>
<td>1980-12-17</td></tr><br/>
<tr><td>2</td>
(suite
sur
page
suivante)
3.18.
connexion
base
de
donnée
depuis
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<td>jean</td>
<td>durand</td>
<td>1983-01-13</td></tr><br/>
<tr><td>3</td>
<td>jeanne</td>
<td>gudule</td>
<td>1967-11-06</td></tr><br/>
<tr><td>4</td>
<td>emilio</td>
<td>zapata</td>
<td>1956-12-01</td></tr><br/>
<tr><td>5</td>
<td>nicolas</td>
<td>jourdain</td>
<td>2000-09-10</td></tr><br/>
<tr><td>6</td>
<td>marie</td>
<td>dupuy</td>
<td>1986-01-11</td></tr><br/>
<tr><td>7</td>
<td>lou</td>
<td>andreas</td>
<td>1861-02-12</td></tr><br/>
<tr><td>9</td>
<td>franz</td>
<td>kafka</td>
<td>1883-07-03</td></tr><br/>
<tr><td>11</td>
<td>joe</td>
<td>dalton</td>
<td>2003-12-06</td></tr><br/>
</table>
</body>
</html>
execution
carnet
table
version2
pouvoir
générer
page
différentes
avec
liste
déroulantes
liste
de
liens,
liste
à
puce
etc.
création
d’une
liste
déroulante
:
<!
!doctype
html>
<html>
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
</head>
<body>
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
<?php
require_once('connexion.php');
$connexion=connect_bd();
$sql="select
*
from
carnet";
if(!
!$connexion->query($sql))
echo
"pb
d'accès
carnet";
else
{
?>
<form
action="recherche.php"
method="get">
<select
name="id">
<?php
foreach
($connexion->query($sql)
avoir
$row)
if(!
!empty($row['nom']))
echo
"<option
value='".$row['id']."'>"
.$row['prenom']."
".$row['nom']."</option>
\n";
?>
</select>
<input
type="submit"
value="rechercher">
</form>
<?php
}
?>
</body>
</html>
remarquer
l’usage
de
clef
primaire
de
table
valoir
options,
assavoir
l’unicité
valeur
éviter
amiguité.
résultat
bruts
:
<!
!doctype
html>
<html>
<head>
<title>
connexion
à
mysql
avec
pdo
</title>
<meta
charset="utf-8">
</head>
<body>
(suite
sur
page
suivante)
3.18.
connexion
base
de
donnée
depuis
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<h1>
interrogation
de
table
carnet
avec
pdo
</h1>
<form
action="recherche.php"
method="get">
<select
name="id">
<option
value='1'>john
smith</option>
<option
value='2'>jean
durand</option>
<option
value='3'>jeanne
gudule</option>
<option
value='4'>emilio
zapata</option>
<option
value='5'>nicolas
jourdain</option>
<option
value='6'>marie
dupuy</option>
<option
value='7'>lou
andreas</option>
<option
value='9'>franz
kafka</option>
<option
value='11'>joe
dalton</option>
</select>
<input
type="submit"
value="rechercher">
</form>
</body>
</html>
execution
carnet
select
3.19
requête
préparer
en
php
3.19.1
recherche
simple
en
php
avec
pdo
<!
!doctype
html>
<html>
<head>
<title>
rechercher
d'une
personne
par
id
</title>
<meta
charset="utf-8">
</head>
<body>
<?php
$wanted=$_get['id'];
if
(!
!empty($wanted)){
echo
"<h1>recherche
de
$wanted
</h1>";
require_once('connexion.php');
$connexion=connect_bd();
$sql="select
*
from
carnet
where
id='".$wanted."'";
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
if(!
!$connexion->query($sql))
echo
"pb
de
requete";
else{
foreach
($connexion->query($sql)
avoir
$row)
echo
$row['nom']."
".$row['prenom']."</br>
\n";
}
}
?>
</body>
</html>
appel
avec
paramètre
id
passer
sur
l’url
:
php
exemples/pdo/recherche.php
?id=3
execution
rechercher
php
lorsqu’il
avoir
de
nombreux
paramètres,
retrouver
avec
de
nombreuses
concaténation
de
chaine
entourer
de
“cotes”
être
grande
source
d’erreurs
de
lenteur
d’écriture.
pour
remédier
à
cela,
pouvoir
utiliser
requête
préparées
permettre
de
dissocier
requête
paramètre
aller
être
fournir
avant
exécution.
preparedstatement
être
préférables
en
terme
de
sécurité
à
utiliser
systématiquement.
3.19.2
recherche
avec
preparedstatement
<!
!doctype
html>
<html>
<head>
<title>
recherche
d'une
par
id
</title>
<meta
charset="utf-8">
</head>
<body>
<?php
$wanted=$_get['id'];
if
(!
!empty($wanted)){
echo
"<h1>recherche
de
$wanted
</h1>";
require_once('connexion.php');
$connexion=connect_bd();
$sql="select
*
from
carnet
where
id=:id";
$stmt=$connexion->prepare($sql);
$stmt->bindparam(':id',
$_get['id']);
$stmt->execute();
if
(!
!$stmt)
echo
"pb
d'accès
carnet";
else{
(suite
sur
page
suivante)
3.19.
requête
préparer
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
if
($stmt->rowcount()==0)
echo
"inconnu!
!<br/>";
else
foreach
($stmt
avoir
$row)
echo
$row['prenom']."
".$row['nom'].
"né(e)
".$row['naissance']."<br/>";
}
}
?>
</body>
</html>
requête
préparées
limiter
possibilité
d”injections
sql
voir
tard.
3.20
complément
sur
pdo
-
sécurité
3.20.1
filtrage
d’entrées
pouvoir
vouloir
nourrir
requête
avec
donnée
provenir
d’un
formulaire
:
<?php
$sql
=
sprintf(
'select
id
from
carnet
where
email
=
"%s"',$_get['email'])
);
?>
voir
valeur
de
l’entrée
email
dans
tableau
_get
n’est
vérfifiée
avant
utilisation!
!
pouvoir
essayer
dans
cas
d’utiliser
filtre
php
contrôler
chose
:
<?php
$sql
=
sprintf(
'select
id
from
carnet
where
email
=
"%s"',
filter_input(input_get,
'email')
);
?>
constituer
manière
sûre
de
procéder
malgré
l’utilisation
filtre
php.
laisser
en
effet
possiblilité
d’insertion
de
code
malveillant
contrôlé.
l’exemple
classique
être
requête
sql
construire
dans
chaine
suivante
:
<?php
$sql
=
"select
nom
from
user
where
login='".
$_request['login']."'
and
passwd='".
$_request['pass']."'";
?>
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
donner
de
exécution
avec
$_request[“login”]
=
»
toto”
–
»
:
select
nom
from
user
where
login='toto'
--
'
and
passwd=
'".$_
˓→request['pass']."'
";
avertissement
:
-
-
constituer
début
de
commentaire
sql,
constituer
injection
sql
être
l’une
principales
faille
de
sécurité
exploiter
par
hackers.
pour
s’en
prémunir,
falloir
utiliser
à
fois
filtrage
entrée
requête
préparées.
<?php
$sql
=
'select
id
from
carnet
where
email
=
:email';
$statement
=
$pdo->prepare($sql);
$email
=
filter_input(input_get,
'email');
$statement->bindvalue(':email',
$email);
?>
falloir
préciser
dans
troisième
argument
type
paramètre
attendre
:
<?php
$sql
=
'select
email
from
carnet
where
id
=
:id';
$statement
=
$pdo->prepare($sql);
$userid
=
filter_input(input_get,
'id');
$statement->bindvalue(':id',
$userid,
pdo::param_int);
?>
3.21
filtrage
en
php
vérification
dans
formulaire
html5
en
javascript
être
valables
côté
client.
pour
raison
de
sécurité,
falloir
réeffectuer
vérification
côté
serveur.
php
mettre
pour
à
disposition
programmeur
ensemble
de
filtres.
premier
vérification
consister
à
prendre
en
compte
caractère
spéciaux.
3.21.1
gestion
caractère
spéciaux
:
«
magic
quotes
»
:
avant
php
5.4,
directive
concerner
magic
quotes
existait.
dans
fichier
de
configuration
de
php,
directive
magic_quotes_gpc
etait
activée,
php
modifier
entrée
de
formulaire
en
procéder
à
protection
de
caractère
spéciaux
par
insertion
de
«
backslashes
».
par
exemple
—
caractère
accentués
—
apostrophe
—
backslashes
3.21.
filtrage
en
php
cours
php
accéléré,
version
0.9.1
à
manière
de
fonction
addslashes().
protection
être
destiner
à
préparer
donnée
avant
requête
sql
pour
empêcher
éventuelle
injection
sql.
comportement
automatique
être
gênant
vouloir
réafficher
chaine
saisir
utiliser
dans
requête
sql.
en
outre,
vouloir
protéger
chaine
de
même
façon
selon
l’usage
qu’on
vouloir
en
faire
par
suite.
pouvoir
vouloir
dans
cas,
protéger
chaine
par
exemple
:
—
htmlspecialchars()
pour
éviter
injection
de
code
html
—
pdo
:
:quote()
pour
protéger
d’injections
sql
<?php
$pdo
=
new
pdo('sqlite:./tmp/mydb.sqlite');
$string
=
'orléans';
print
"chaîne
sans
quotes:
$string\n";
print
"chaîne
avec
quotes:
"
.
$pdo->quote($string)
.
"
\n";
dispenser
d’utiliser
preparedstatement
voir
précédemment.
filtre
php
:
directs
à
utiliser
sur
formulaire
être
baser
sur
fonction
filter_input()
avec
en
paramètre
input_get
input_post
exemple
typiques
:
<?php
$entier
=
filter_input(input_post,
'var1',
filter_sanitize_
˓→number_int);
$url
=
filter_input(input_post,
'var2',
filter_validate_url);
if
(!
!filter_input(input_get,
"email",
filter_validate_email))
echo("email
valide");
else
echo("email
valide");
?>
pouvoir
filtrer
carctères
spéciaux
:
<?php
$search_html
=
filter_input(input_get,
'search',
filter_sanitize_
˓→special_chars);
$search_url
=
filter_input(input_get,
'search',
filter_sanitize_
˓→encoded);
echo
"vous
avoir
rechercher
$search_html.
\n";
echo
"<a
href='?search=$search_url'>nouvelle
recherche.</a>";
?>
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
3.22
gestion
transaction
avec
pdo
3.22.1
problème
série
de
requête
sql
être
lier
entre
vouloir
qu’elles
être
exécuter
aucune.
en
effet
dans
cas,
prise
en
compte
d’une
partir
requête
pouvoir
conduire
à
incohérence
dans
système
d’information.
base
de
donnée
pouvoir
être
corrompre
difficile
à
rectifier
par
suite.
par
exemple,
avoir
2
requête
suivre
être
lier
:
<?php
require
'connexion.php';
$connexion=connect_bd();
$stmt1
=
$pdo->prepare('
update
compter
set
solder
=
solde
-
:montant
where
nom
=
:nom
');
$stmt2
=
$pdo->prepare('
update
compter
set
solder
=
solder
+
:montant
where
nom
=
:nom
');
//
retraire
compte1
$cpte1
=
'compte1';
$montant
=
50;
$stmt1->bindparam(':nom',
$cpte1);
$stmt1->bindparam(':solde',
$montant,
pdo::param_int);
$stmt1->execute();
//
credit
compte2
$cpte2
=
'compte2';
$depot
=
50;
$stmt2->bindparam(':nom',
$cpte2);
$stmt->bindparam(':montant',
$depot,
pdo::param_int);
$stmt->execute();
?>
pouvoir
conduire
à
problème
en
cas
d’interruption
de
séquence.
en
particulier
compte1
pouvoir
avoir
être
débiter
sans
compte2
crédité.
pouvoir
résoudre
fragilité
en
utiliser
transaction
:
<?php
require
'connexion.php';
$connexion=connect_bd();
(suite
sur
page
suivante)
3.22.
gestion
transaction
avec
pdo
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
$stmt1
=
$connexion->prepare('
update
compter
set
solder
=
solde
-
:solde
where
nom
=
:nom
');
$stmt2
=
$connexion->prepare('
update
compter
set
solder
=
solder
+
:montant
where
nom
=
:nom
');
//
commencer
transaction
$connexion
->begintransaction()
//
retraire
compte1
$cpte1
=
'compte1';
$montant
=
100;
$stmt1->bindparam(':nom',
$cpte1);
$stmt1->bindparam(':solde',
$montant,
pdo::param_int);
$stmt1->execute();
//
credit
compte2
$cpte2
=
'compte2';
$depot
=
50;
$stmt2->bindparam(':nom',
$cpte2);
$stmt->bindparam(':montant',
$depot,
pdo::param_int);
$stmt->execute();
//on
terminer
transaction
$connexion
->
commit();
?>
séquence
échoue,
pdo
commander
rollback
automatique,
c’est
à
dire
annulation
de
transaction.
3.23
connexion
persistante
avec
pdo
créer
connexion
persistante
avec
pdo,
suffire
d’utiliser
l’attribut
attr
persister
à
l’instanciation
de
l’objet
pdo.
appel
ultérieurs,
paramètre
de
création
être
identiques,
l’objet
créer
être
réutilisé.
<?php
function
connect_db()
{
$dsn="mysql:dbname=".base.";host=".server;
try
{
$connexion=new
pdo($dsn,user,passwd,
array(pdo::attr_persistent
=>
true));
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
}
catch(pdoexception
$e)
{
printf("échec
de
connexion
:
%s\n",
$e->getmessage());
exit();
}
return
$connexion;
}
?>
3.24
validation
contrôle
d’entrées
avec
gump
pouvoir
utiliser
librairie
aider
à
gérer
validation
:
gump
(https
://github.com/wixel/gump)
3.24.1
pour
installer
:
créer
fichier
composer.json
dans
répertoire
de
travail
:
{
"require":
{
"wixel/gump":
"dev-master"
}
}
utiliser
l’outil
php
composer
pour
installer
composant
demander
:
composer
update
3.24.2
pouvoir
utiliser
gump
vérifier
entrée
:
<?php
require
"vendor/wixel/gump/gump.class.php";
$is_valid
=
gump::is_valid($_post,
array(
'username'
=>
'required|alpha_numeric',
'password'
=>
'required|max_len,100|min_len,6'
));
if($is_valid)
{
echo
"valid
username
and
password
";
}
else
{
print_r($is_valid);
(suite
sur
page
suivante)
3.24.
validation
contrôle
d’entrées
avec
gump
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
}
?>
3.24.3
de
manière
détailler
:
<?php
require
"vendor/wixel/gump/gump.class.php";
if
($_server["request_method"]
==
"post"){
$validator
=
new
gump();
$name
=
$_post['name'];
$password
=
$_post['password'];
$_post
=
array(
'name'
=>
$name,
'password'
=>
$password);
//
néttoie
donnée
convertir
chaine
en
utf-8
besoin
$_post
=
$validator->sanitize($_post);
//
définir
règles
filtres:
$rules
=
array(
'name'
=>
'required|alpha_numeric|max_len,100|min_len,6',
'password'
=>
'required|max_len,100|min_len,6');
$filters
=
array(
'name'
=>
'trim|sanitize_string',
'password'
=>
'trim|base64_encode');
//
appliquer
filtre
$_post
=
$validator->filter($_post,
$filters);
//
valider
$is_valid
=
$validator->validate($_post,
$rules);
//
vérifier
résultat
if
($is_valid
===
true
)
{
echo
$name;
echo
$password;
exit;
}
else
{
echo
"erreurs
détecter
dans
entrées:\n";
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
//
afficher
erreur
en
html
echo
$validator->get_readable_errors(true);
}
}
3.25
http
conservation
d’informations
sur
client
3.25.1
problème
protocole
http
être
protocole
sans
mémoire.
requête
d’un
client
information
être
rattacher
être
mémoriser
par
défaut.
techniques
avoir
être
développer
pour
remédier
à
manque
:
—
envoyer
de
l’information
sur
l’url
—
utiliser
champ
cacher
html
—
utiliser
cookies
—
utiliser
session
envoi
d’information
sur
l’url
:
considérer
premier
page,
page1.php
:
<!
!doctype
html>
<html
lang="fr">
<head>
<meta
charset="utf-8"/>
<title>
formulaires</title>
</head>
<body>
<?php
if
(!
!isset($_get['login'])){
?>
<form
method='get'
action=<?php
echo
$_server['php_self']
?>
>
<p>login:
<input
type="text"
name="login"></p>
<input
type="submit"
value="valider">
</form>
<?php
}
else
{
header('location:page2.php?login='.$_get['login']);
}
?>
(suite
sur
page
suivante)
3.25.
http
conservation
d’informations
sur
client
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
</body>
</html>
poursuivre
par
page2
:
<!
!doctype
html>
<html
lang="fr">
<head>
<meta
charset="utf-8"/>
<title>formulaires</title>
</head>
<body>
<?php
if
(isset($_get['login'])){
echo
$_get['login'];
}
else
{
header('location:page1.php');
}
?>
</body>
</html>
exécution
:
passage
d’info
sur
l’url
utiliser
cookies
:
l’information
être
stocker
dans
petit
fichier
texte
sur
navigateur
client.
pouvoir
par
exemple
s’en
servir
pour
stocker
identifier
de
session,
login,
compteur
de
visite
mesurer
temps
de
connexion.
<?php
if
(isset($_cookie['compteur']))
{
$message
=
"vous
etes
deja
venir
".$_cookie['compteur']."
fois
˓→<br/>
\n";
$valeur
=
$_cookie['compteur']
+
1;
}
else
{
$message
=
"je
mettre
petit
cookie<br/>
\n";
$valeur
=
1;
}
setcookie("compteur",
$valeur);
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
echo
$message;
?>
exécution
:
cookies
en
php
avoir
information
en
grand
nombre
à
stocker
revètent
caractère
sensible,
préférer
stocker
côté
serveur
utiliser
mécanisme
complet
sessions.
celui-ci
consister
à
utiliser
tableau
associatif
_session[]
permettre
de
stocker
sorte
d’informations
associer
à
client
(données
de
type
nombre
chaines,
tableau
objet
php).
considérer
premier
page
mettre
en
place
session
:
<?php
//
session1.php
session_start();
if
(!
!isset($_session['cpt']))
$_session['cpt']=0;
else
$_session['cpt']++;
echo
"vous
avoir
voir
page
".$_session['cpt']."
fois
<br/>
\n";
echo
"le
sid
courant
être
"
.
session_id();
echo
"<br/>
<a
href=\"
session2.php\"
>aller
à
page
suivante
˓→session2.php</a>";
?>
aller
relire
information
stocker
en
variables
de
session
dans
autre
page
:
<?php
//
session2.php
session_start();
if
(!
!isset($_session['cpt']))
$_session['cpt']=0;
else
$_session['cpt']++;
echo
"bonjour
{$_session['login']}!
!<br>
\n";
echo
"vous
avoir
voir
page
"
.
$_session['cpt']
.
"
fois<br/>
\n";
echo
"votre
sid
être
"
.
session_id();
echo
"<br/>
<a
href=\"
session1.php\"
>retour
avoir
session1.php</a>";
?>
exécution
:
utilisation
variable
de
session
php
3.25.
http
conservation
d’informations
sur
client
cours
php
accéléré,
version
0.9.1
champs
cacher
quatrième
mécanisme
être
employer
pour
conserver
de
l’information
dans
page
web
l’utilisation
de
champ
cacher
:
input
de
type
hidden.
champ
pouvoir
par
exemple
servir
à
stocker
dans
formulaire
html
champ
spécial
dire
csrf
token
contenir
identifier
unique
temporaire
pour
prémunir
attaque
de
type
csrf
:
cross
site
request
forgery
exemple
être
l’envoi
d’un
mail
contenir
image
avoir
quelqu’un
image
être
en
fait
lien
vers
page
d’administration
sur
destinataire
mail
avoir
droit
particuliers
editer
supprimer
ressource.
page
pouvoir
déclencher
suppression
modification
de
contenu
souhaitée.
principaux
frameworks
web
symfony,
laravel
en
php
django,
flask
en
python
prendre
en
charge
génération
automatique
de
token
mise
en
variable
de
session
falloir
de
l’appeler
dans
formulaire
de
l’utilisation
d’ajax.
3.26
manipuler
xml
avec
php
format
xml
être
utiliser
de
façon
variée.
trouver
dans
service
web,
fichier
de
configuration,
format
svg,
mathml,
docx,
odt,
etc.
manipulation
dans
langage
php
être
importante.
pouvoir
manipuler
xml
de
différentes
manière
—
a
main
—
avec
xmlwriter/xmlreader
—
avec
dom
—
avec
simplexml
combinaison
de
méthodes.
—
dom
document
object
model
être
méthode
recréer
l’arborescence
d’un
document
xml
sous
forme
d’objets
php.
utilisation
être
simple
être
couteuse
en
ressources,
en
temps
d’exécution
verbeuse.
—
xmlwriter
xmlreader
traiter
fichier
xml
avoir
bas
niveau
utilisation
exclusive
rendre
code
délicat
à
implémenter
pour
lecture
de
fichier
complexes.
—
simplexml
représenter
sorte
de
compromis
simplicité/performance.
—
traiter
fichier
xml
«
à
main
»
être
à
éviter
sauf
pour
créer
fichier
simples.
3.26.1
traitement
de
fichier
xml
à
main
:
observer
d’abord
créer
fichier
xml
contenir
liste
de
programme
tv
:
lecture
de
fichier
xml
sans
api
être
recommandée.
<?php
header('content-type:
text/xml');
print
'<?xml
version="1.0"?>'
.
"
\n";
print
"<programmes>
\n";
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
$programmes
=
array(
array('nom'=>
'simpsons',
'chaine'=>
'tf18',
'debut'
=>
'21:00',
'duree'
=>
'30'),
array('nom'=>
'blake
mortimer',
'chaine'
=>
'm54',
'debut'=>'20:00','duree'=>'60'));
foreach
($programmes
avoir
$show)
{
print
"
\t<show>
\n";
foreach($show
avoir
$tag
=>
$data)
{
print
"
\t<
$tag>"
.
htmlspecialchars($data)
.
"
\t</$tag>
\n";
}
print
"</show>
\n";}
print
"</programmes>
\n";
?>
3.26.2
exécution
:
ecriture
xml
à
main
3.26.3
resultat
brut
html
:
<?xml
version="1.0"?>
<programmes>
<show>
<nom>simpsons
</nom>
<chaine>tf18
</chaine>
<debut>21:00
</debut>
<duree>30
</duree>
</show>
<show>
<nom>blake
mortimer
</nom>
<chaine>m54
</chaine>
<debut>20:00
</debut>
<duree>60
</duree>
</show>
</programmes>
3.26.4
ecriture
avec
xmlwriter
:
exemple
simple
pour
démarrer
:
3.26.
manipuler
xml
avec
php
cours
php
accéléré,
version
0.9.1
<?php
$xml
=
new
xmlwriter();
$xml->openuri('test.xml');
$xml->startelement('toto');
$xml->writeelement('url',
'http://totototo.com');
$xml->endelement();
$xml->flush();
?>
3.26.5
resultat
brut
:
<toto><url>
http://toto.com</url></toto>
récupérer
donnée
de
table
carnet
pour
exporter
en
xml
:
<?php
require_once('connexion.php');
$connexion=connect_bd();
$sql="select
*
from
carnet";
$data=$connexion->query($sql);
$xml=
new
xmlwriter();
$xml->openuri("contacts.xml");
$xml->startdocument('1.0',
'utf-8');
$xml->startelement('mescontacts');
while($pers=$data->fetch()){
$xml->startelement('contact');
$xml->writeattribute('id',
$pers['id']);
$xml->writeelement('prenom',$pers['prenom']);
$xml->writeelement('nom',$pers['nom']);
$xml->writeelement('naissance',$pers['naissance']);
$xml->endelement();
}
$xml->endelement();
$xml->endelement();
$xml->flush();
?>
3.26.6
resultat
:
<?xml
version="1.0"
encoding="utf-8"?>
<mescontacts>
<contact
id="1"
>
<prenom>
john</prenom>
<nom>
smith</nom>
<naissance>
1980-12-17</naissance>
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
</contact>
<contact
id="2"
>
<prenom>
jean</prenom>
<nom>
durand</nom>
<naissance>
1983-01-13</naissance>
</contact>
<contact
id="3"
>
<prenom>
jeanne</prenom>
<nom>
gudule</nom>
<naissance>
1967-11-06</naissance>
</contact>
<contact
id="4"
>
<prenom>
emilio</prenom>
<nom>
zapata</nom>
<naissance>
1956-12-01</naissance>
</contact>
<contact
id="5"
>
<prenom>
nicolas</prenom>
<nom>
jourdain</nom>
<naissance>
2000-09-10</naissance>
</contact>
<contact
id="6"
>
<prenom>
marie</prenom>
<nom>
dupuy</nom>
<naissance>
1986-01-11</naissance>
</contact>
<contact
id="7"
>
<prenom>
lou</prenom>
<nom>
andreas</nom>
<naissance>
1861-02-12</naissance>
</contact>
<contact
id="9"
>
<prenom>
franz</prenom>
<nom>
kafka</nom>
<naissance>
1883-07-03</naissance>
</contact>
<contact
id="11"
>
<prenom>
joe</prenom>
<nom>
dalton</nom>
<naissance>
2003-12-06</naissance>
</contact>
</mescontacts>
3.26.7
traitement
avec
dom
:
ecriture
de
fichier
xml
avec
dom
en
utiliser
donnée
provenir
d’une
base
de
données.
parton
de
table
film
suivante
:
3.26.
manipuler
xml
avec
php
cours
php
accéléré,
version
0.9.1
create
tabler
if
not
exists
`films`
(
`code_filmìnt(11)
not
null
auto_increment,
`titre_original`
varchar(50)
default
null,
`titre_francais`
varchar(50)
default
null,
`pays`
varchar(20)
default
null,
`dateìnt(11)
default
null,
`dureeìnt(11)
default
null,
`couleur`
varchar(10)
default
null,
`realisateurìnt(11)
default
null,
ìmagè
varchar(20)
default
null,
primary
key(`code_film`)
)
créer
fichier
xml
avec
donnée
de
table
utiliser
dom
:
<?php
//
avec
fichier
connexion.php
utiliser
auparavant
require("connexion.php");
$connexion=connect_bd();
$sql="select
*
from
film
limit
10";
$data=$connexion->query($sql);
if
($data){
$document
=
new
domdocument();
$document->preservewhitespace
=
false;
$document->formatoutput
=
true;
//
créer
racine
<lesfilms>
l'insère
dans
document
$lesfilms
=
$document->createelement('lesfilms');
$document->appendchild($lesfilms);
//
boucler
pour
film
trouver
dans
bd:
while($unfilm=$data->fetch(pdo::fetch_obj))
{
$film=$document->createelement('film');
$film->setattribute('idreal',
$unfilm->realisateur);
$lesfilms->appendchild($film);
//
créer
l'élément
title
l'ajoute
à
$film
$title
=
$document->createelement('titre');
$film->appendchild($title);
//
définir
texte
pour
$title
$text=$document->createtextnode(utf8_encode($unfilm->titre_
˓→original));
$title->appendchild($text);
//crée
ajouter
realisateur
avoir
$film
$realisateur=$document->createelement('date');
$id=$document->createtextnode($unfilm->date);
$realisateur->appendchild($id);
$film->appendchild($realisateur);
}
$document->save('myfilms.xml');
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
echo
"export
xml
fini!
!";
}
else
{
echo
"aucun
film
dans
base!
!"
;}
?>
3.26.8
exécution
:
creation
xml
avec
dom
3.26.9
resultat
:
<?xml
version="1.0"?>
<lesfilms>
<film
idreal="7"
>
<titre>
pandora
and
the
flying
dutchman
</
˓→titre>
<date>
1951</date>
</film>
<film
idreal="8"
>
<titre>
johnny
guitar
</
˓→titre>
<date>
1954</date>
</film>
<film
idreal="9"
>
<titre>
woman
under
the
influence
(a)
</
˓→titre>
<date>
1974</date>
</film>
<film
idreal="10"
>
<titre>
apartment
(the)
</
˓→titre>
<date>
1960</date>
</film>
<film
idreal="11"
>
<titre>
victor/victoria
</
˓→titre>
<date>
1982</date>
</film>
<film
idreal="12"
>
<titre>
modern
times
</
˓→titre>
<date>
1936</date>
</film>
<film
idreal="13"
>
(suite
sur
page
suivante)
3.26.
manipuler
xml
avec
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<titre>
m&#xc3;&#xa9;
prendre
(le)
˓→
</titre>
<date>
1963</date>
</film>
<film
idreal="14"
>
<titre>
jour
de
f&#xc3;&#xaa;
˓→
</titre>
<date>
1948</date>
</film>
<film
idreal="15"
>
<titre>
olvidados
(los)
</
˓→titre>
<date>
1950</date>
</film>
<film
idreal="16"
>
<titre>
west
side
story
</
˓→titre>
<date>
1961</date>
</film>
</lesfilms>
3.26.10
relecture
avec
simplexml
:
<?php
$lesfilms
=
simplexml_load_file('myfilms.xml');
foreach
($lesfilms->film
avoir
$film)
{
echo
"titre
:".
utf8_decode($film->titre)."<br/>
\n";
foreach($film->attributes()
avoir
$a
=>
$b)
{
echo
$a,
'="',
$b,
"
\"\n";
}
print
"annee
:
{$film->annee}
<br/>
\n";
}
?>
3.26.11
exécution
:
lecture
xml
avec
simplexml
3.26.12
resultat
brut
:
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
titre
:pandora
and
the
flying
dutchman
˓→<br/>
idreal="7"
annee
:
<br/>
titre
:johnny
guitar
˓→<br/>
idreal="8"
annee
:
<br/>
titre
:woman
under
the
influence
(a)
˓→<br/>
idreal="9"
annee
:
<br/>
titre
:apartment
(the)
˓→<br/>
idreal="10"
annee
:
<br/>
titre
:victor/victoria
˓→<br/>
idreal="11"
annee
:
<br/>
titre
:modern
times
˓→<br/>
idreal="12"
annee
:
<br/>
titre
:mépris
(le)
˓→<br/>
idreal="13"
annee
:
<br/>
titre
:jour
de
fête
˓→<br/>
idreal="14"
annee
:
<br/>
titre
:olvidados
(los)
˓→<br/>
idreal="15"
annee
:
<br/>
titre
:west
side
story
˓→<br/>
idreal="16"
annee
:
<br/>
3.27
architecture
de
type
mvc
avec
php
3.27.1
problème
lorsqu’un
projet
augmente,
besoin
de
s’organiser
de
permettre
de
réutilisabilité
de
lisibilité
demander
certaine
méthode.
mvc
=
modèle
vue
controleur
pouvoir
être
solution
3.27.
architecture
de
type
mvc
avec
php
cours
php
accéléré,
version
0.9.1
intéressante.
aller
commencer
à
familiariser
avec
composants
d’un
framework
mvc
à
voir
l’utilité
de
recourir
à
de
outils.
introduction
générale
à
sujet
trouver
(http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html)
3.27.2
php
pur
templates
php
:
considérer
code
suivre
en
interroger
table
carnet
voir
précemment
depuis
php
avec
pdo
:
<?php
require("connect.php");
$dsn="mysql:dbname=".base.";host=".server;
try{
$connexion=new
pdo($dsn,user,passwd);
}
catch(pdoexception
$e){
printf("echec
connexion
:
%s\n",
$e->getmessage());
exit();
}
$sql="select
*
from
carnet";
if(!
!$connexion->query($sql))
echo
"pb
pour
acceder
carnet";
else
{
foreach
($connexion->query($sql)
avoir
$row){
echo
$row['nom']<br/>\n";
}
}
?>
pouvoir
observer
défaut
dans
code
:
—
réutilisabilté
code
réduite
—
fabriquer
formulaire
avec
entrée
carnet,
doit-on
mettre
code
correspondant
?
3.27.3
template
php
:
pouvoir
améliorer
chose
:
<?php
require("connect.php");
$dsn="mysql:dbname=".base.";host=".server;
try
{
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
$connexion=new
pdo($dsn,user,passwd);
}
catch(pdoexception
$e)
{
printf("echec
connexion
:
%s\n",
$e->getmessage());
exit();
}
$sql="select
*
from
carnet";
if(!
!$connexion->query($sql))
echo
"pb
pour
acceder
carnet";
else
{
$amis=array();
foreach
($connexion->query($sql)
avoir
$row){
$amis[]=$row;
}
require
"templates/listeamis.php";
}
?>
avec
template
listeamis.php
à
placer
dans
templates/listeamis.php
:
<!
!doctype
html>
<
html>
<
head>
<
title>liste
de
amis</title>
</head>
<
body>
<
h1>list
of
friends</h1>
<
ul>
<?php
foreach
($amis
avoir
$ami):
?>
<
li>
<
avoir
href="/recherche?nom=<?php
echo
$ami['id']
?>">
</a>
</li>
<?php
endforeach;
?>
</ul>
</body>
</html>
commencer
à
séparer
présentation
codage
«
métier
».
3.27.4
isoler
logique
applicative
:
<?php
//modele.php
require("connect.php");
(suite
sur
page
suivante)
3.27.
architecture
de
type
mvc
avec
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
function
connect_db()
{
$dsn="mysql:dbname=".base.";host=".server;
try
{
$connexion=new
pdo($dsn,user,passwd);
}
catch(pdoexception
$e)
{
printf("echec
connexion
:
%s\n",
$e->getmessage());
exit();
}
return
$connexion;
}
//
function
get_all_friends()
{
$connexion=connect_db();
$amis=array();
$sql="select
*
from
carnet";
foreach
($connexion->query($sql)
avoir
$row)
{
$amis[]=$row;
}
return
$amis;
}
?>
pouvoir
avoir
controleur
simple
interroger
modèle
passer
donnée
template
pour
affichage.
<?php
//c-list.php
require_once
'modele.php';
$amis
=
get_all_friends();
require
'templates/listamis.php';
?>
3.27.5
layout
:
rester
partie
réutilisable
dans
code
à
savoir
layout.
essayer
de
remédier
à
:
<!
!--
templates/baselayout.php
-->
<!
!doctype
html>
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<html>
<head>
<title><?php
echo
$title
?></title>
</head>
<body>
<?php
echo
$content
?>
</body>
</html>
3.27.6
héritage
de
templates
:
<?php
//
templates/t-list.php
$title
=
'liste
amis';
ob_start();
?>
<h1>list
de
amis</h1>
<ul>
<?php
foreach
($amis
avoir
$ami):
?>
<li>
<a
href="/recherche?nom=<?php
echo
$ami['nom']
?>">
<?php
echo
$ami['ville']
?>
</a>
</li>
<?php
endforeach;
?>
</ul>
<?php
$content
=
ob_get_clean();
include
'baselayout.php'
?>
observer
l’utilisation
de
bufferisation
avec
ob_start()
ob_get_clean().
dernière
fonction
récupérer
contenu
bufferisé
nettoyer
buffer.
affichage
détail
d’une
aller
ajouter
à
modèle
fonction
pour
afficher
détail
d’une
:
<?php
function
get_friend_by_id($id)
{
$connexion=connect_bd();
$sql="select
*
from
carnet
where
id=:id";
$stmt=$connexion->prepare($sql);
$stmt->bindparam(':id',
$id,
pdo::param_int);
$stmt->execute();
(suite
sur
page
suivante)
3.27.
architecture
de
type
mvc
avec
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
return
$stmt->fetch();
}
pouvoir
créer
nouveau
controleur
c-details.php
:
<?php
//c-details.php
require_once
'modele.php';
$pers
=
get_friend_by_id($_get['id']);
require
'templates/t-details.php';
?>
utiliser
template
:
<?php
//templates/t-details.php
$title
=
$pers['nom'];
ob_start();
?>
<h1>details
sur
<?php
echo
$pers['prenom'].'
'.$pers['nom']
?>
</h1>
<p>
<?php
echo
'
'.$pers['naissance'];
echo
'<br/>ville:'.$pers['ville'];
$content
=
ob_get_clean();
include
'baselayout.php'
?>
pouvoir
tester
en
entrant
l’url
de
c-details.php
avec
paramètre
id.
code
être
similaire
à
premier
template
pouvoir
réutiliser
template
de
base,
subsister
problème
:
—
paramètre
id
n’est
fourni,
application
aller
provoquer
erreur.
—
n’avons
de
controleur
principal.
regrouper
d’abord
code
2
contrôleur
(c-list.php
c-details.php)
dans
fichier
unique
controllers.php
<?php
//
controllers.php
function
list_action()
{
$amis
=
get_all_friends();
require
'templates/t-list.php';
}
function
detail_action($id)
{
$pers
=
get_friend_by_id($id);
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
require
'templates/t-detail.php';
}
?>
pouvoir
proposer
controleur
principal
(front
controller)
index.php
:
<?php
//
index.php
//
charger
modeles
controleurs
require_once
'modele.php';
require_once
'controllers.php';
//
gestion
route
$uri
=
parse_url($_server['request_uri'],
php_url_path);
if
('/index.php'
==
$uri)
{
list_action();
}
elseif
('/index.php/detail'
==
$uri
&&
isset($_get['id']))
{
detail_action($_get['id']);
}
else
{
header('status:
404
not
found');
echo
'<html><body><h1>page
not
found</h1></body></html>';
}
?>
avoir
structure
de
type
:
connect.php
connexion.php
controlleur.php
modele.php
recherche.php
templates
layout.php
listeamis.php
pouvoir
améliorer
en
intégrer
dans
même
objet
modèle.
voir
sur
github/roza/php-basic-mvc
(https
://github.com/roza/php-basic-mvc/)
pour
code
complet.
système
de
routage
être
incomplet
aller
utliser
pour
continuer
outil
d’un
framework
web
de
référence
:
symfony.
3.28
templates
twig
en
php
l’installation
de
twig
faire
grâce
à
l’outil
composer
3.28.
templates
twig
en
php
cours
php
accéléré,
version
0.9.1
3.28.1
composer
installer
d’abord
l’outil
composer
servir
à
de
tâche
courantes
dans
projet
php.
aller
d’abord
créer
répertoire
bin
à
racine
de
home,
placez-y
l’exécutable
composer.phar
renommer
composer.
cd
mkdir
bin
cd
bin
curl
-s
https://getcomposer.org/installer
|
php
mv
composer.phar
composer
vérifier
définition
de
variables
d’environnement
http_proxy
https_proxy
dans
.bashrc
ajouter
ligne
suivante
à
.bashrc
:
export
path=$path:~/bin
de
manière
à
programme
installer
dans
répertoire
bin
de
home
être
accessibles
de
n’importe
où.
3.28.2
installation
installer
twig
:
..
code-block
:
:
none
composer
require
twig/twig
:~1.0
créer
dans
répertoire
courir
dossier
vendor
contenir
librairie
demandées.
définir
d’abord
template
de
base,
basetemplate.html
:
<!
!doctype
html>
<
html
lang="fr">
<
head>
{%
block
head
%}
<
meta
charset="utf-8">
<
link
rel="stylesheet"
href="style.css"
/>
<
title>{%
block
title
%}{%
endblock
%}</title>
{%
endblock
%}
</head>
<
body>
<
section
id="content">
{%
block
content
%}{%
endblock
%}
</section>
<
footer
id="footer">
{%
block
footer
%}
&copy;
copyright
2018
<
avoir
href="http://monsite.com">
super
site</a>.
{%
endblock
%}
</footer>
</body>
</html>
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
template
spécialiser
en
hérite,
menu.html
:
{%
extends
"basetemplate.html"
%}
{%
block
title
%}menu
de
semaine{%
endblock
%}
{%
block
head
%}
{{
parent()
}}
<
style
type="text/css">
.important
{
color:
#336699;
}
</style>
{%
endblock
%}
{%
block
content
%}
<
h1>menu</h1>
<
p
class="important">
menu
de
semaine:
<
dl>
<
dt>lundi</dt>
<
dd>{{lundi}}</dd>
<
dt>mardi</dt>
<
dd>{{mardi}}</dd>
<
dt>mercredi</dt>
<
dd>{{mercredi}}</dd>
<
dt>jeudi</dt>
<
dd>{{jeudi}}</dd>
</dl>
</p>
{%
endblock
%}
enfin,
utiliser
template
dans
fichier
menu.php
en
charger
d’abord
l”autoloader
:
<?php
//
inclure
l'autoloader
include
'vendor/autoload.php';
try
{
//
définir
dossier
trouver
templates
$loader
=
new
twig_loader_filesystem('templates');
//
initialiser
l'environement
twig
$twig
=
new
twig_environment($loader);
//
charger
template
$template
=
$twig->loadtemplate('menu.html');
//
affecter
variables
template
appeller
rendre
echo
$template->render(array(
'lundi'
=>
'steak
frites',
'mardi'
=>
'raviolis',
'mercredi'
=>
'pot
feu',
'jeudi'
=>
'couscous',
'vendredi'
=>
'poisson'
));
}
catch
(exception
$e)
{
die
('error:
'
.
$e->getmessage());
(suite
sur
page
suivante)
3.28.
templates
twig
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
}
3.28.3
affichage
personne
carnet
afficher
à
présent
personne
carnet
à
l’aide
d’un
template
twig.
réutiliser
fichier
modele.php
voir
:
<?php
//
modele.php
carnet
{
private
static
$connexion;
function
__construct(){
$dsn="mysql:dbname=".base.";host=".server;
try{
self::$connexion=new
pdo($dsn,user,passwd);
}
catch(pdoexception
$e){
printf("échec
de
connexion
:
%s\n",
$e->
˓→getmessage());
$this->connexion
=
null;
}
}
/**
récupére
liste
contact
sous
forme
d'un
tableau
*/
function
get_all_friends(){
$sql="select
*
from
carnet";
$data=self::$connexion->query($sql);
return
$data;
}
/**
ajouter
contact
à
table
carnet
*/
function
add_friend($data){
$sql
=
"insert
into
carnet(nom,prenom,naissance,ville)
˓→values
(?,?,?,?)";
$stmt
=
self::$connexion->prepare($sql);
return
$stmt->execute(array($data['nom'],
$data['prenom'],
$data['naissance'],$data['ville']));
}
/**
récupére
contact
à
partir
de
id
*/
function
get_friend_by_id($id)
{
$sql="select
*
from
carnet
where
id=:id";
$stmt=self::$connexion->prepare($sql);
$stmt->bindparam(':id',
$id,
pdo::param_int);
$stmt->execute();
return
$stmt->fetch(pdo::fetch_obj);
}
<?php
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
//
fichier
carnet.php
include
'vendor/autoload.php';
//
inclure
modele
include
'modele.php';
//
instancie
carnet
$car
=
new
carnet();
try
{
//
indiquer
dossier
trouver
templates
$loader
=
new
twig_loader_filesystem('templates');
//
initialiser
l'environement
twig
$twig
=
new
twig_environment($loader);
//
récupérer
donnée
depuis
base
$amis
=
$car->get_all_friends();
//
charger
template
$template
=
$twig->loadtemplate('carnet.html');
$titre="liste
membre
carnet
trier
par
ville";
echo
$template->render(array(
'titre'
=>
$titre,
'amis'
=>
$amis,
));
}
catch
(exception
$e)
{
die
('error:
'
.
$e->getmessage());
}
?>
template
carnet.html
:
{%
extends
"basetemplate.html"
%}
{%
block
title
%}personnes
carnet
{%
endblock
%}
{%
block
head
%}
{{
parent()
}}
<
style
type="text/css">
.important
{
color:
#336699;
}
</style>
{%
endblock
%}
{%
block
content
%}
<
p
align="center"
class="style1">{{titre}}</p>
<
tabler
border="2"
align="center"
cellspacing="0"
cellpadding="2"
>
<
tr
bgcolor="#ca9999">
<
td
width="50"><
strong>numero</strong></td>
<
td
width="50"><
strong>nom</strong></td>
<
td
width="50"><
strong>prenom</strong></td>
<
td
width="30"><
strong>age</strong></td>
(suite
sur
page
suivante)
3.28.
templates
twig
en
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
<
td
width="50"><
strong>ville</strong></td>
</tr>
{%
set
i=0
%}
{%
for
ami
in
ami
%}
{%
set
i=i+1
%}
{%
if
i
is
odd
%}
<
tr
bgcolor="#f0f0f0">
{%
else
%}
<
tr
bgcolor="#a6a6a6">
{%
endif
%}
<
td>{{ami.id}}</td>
<
td>{{ami.nom}}</td>
<
td>{{ami.prenom}}</td>
<
td>{{ami.naissance}}</td>
<
td>{{ami.ville}}</td>
</tr>
{%
endfor
%}
</table>
{%
endblock
%}
template
être
maladroit
montrer
l’expressivité
langage
de
template
twig
avec
boucles,
conditionnelles,
calcul
avec
variables,
etc.
pouvoir
sûr
en
proposer
simple
avec
css
adéquat.
3.28.4
affichage
personne
avec
template
simple
:
(carnet2.html)
{%
extends
"basetemplate.html"
%}
{%
block
title
%}personnes
carnet{%
endblock
%}
{%
block
head
%}
{{
parent()
}}
<
link
rel="stylesheet"
href="static/css/tabstyle.css"
/>
{%
endblock
%}
{%
block
content
%}
<
h2>{{titre}}</h2>
<
table
id="jolie"
class="centre"
>
<
tr>
<
td>numero</td>
<
td>nom</td>
<
td>prenom</td>
<
td>age</td>
<
td>ville</td>
</tr>
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
{%
for
ami
in
ami
%}
<
tr>
<
td>{{ami.id}}</td>
<
td>{{ami.nom}}</td>
<
td>{{ami.prenom}}</td>
<
td>{{ami.naissance}}</td>
<
td>{{ami.ville}}</td>
</tr>
{%
endfor
%}
</table>
{%
endblock
%}
avec
style
aller
sur
tableau
.
.
.
pouvoir
compléter
développement
mvc
effectuer
en
utiliser
templates
twig.
voir
sur
github/roza/php-basic-mvc
(https
://github.com/roza/php-basic-mvc/)
pour
code
complet.
système
de
routage
employer
être
rudimentaire
aller
utliser
outil
d’un
framework
web
de
référence
:
symfony
4
pour
aller
loin.
3.29
composer,
symfony
4
flex
aller
à
présent
familiariser
avec
outil
composants
d’un
framework
de
réfé-
rence
:
symfony
4
être
modulaire
permettre
d’installer
composant
riches
swiftmailer
pour
envoyer
mails,
fosuserbundle
gérer
utilisateurs,
fosrest-bundle
apiplatform
réaliser
api
complète.
framework
symfony
4
être
baser
sur
micro-noyau
(micro-kernel)
70%
léger
noyau
de
symfony
3.
introduction
générale
à
framework
trouver
(https
://symfony.com/4)
gestion
dépendance
faire
à
présent
grâce
à
l’outil
symfony
flex
permettre
d’établir
recette
recipes
décrire
dépendance
configuration
d’un
projet.
l’outil
de
base
être
composer
indication
:
composer
permettre
d’installer
centaine
de
package
disponibles.
trouver
sur
packagist
(https
://packagist.org/)
.
permettre
de
gérer
dépendance
d’un
projet
de
créer
squellette
d’une
application
symfony
4.
3.29.1
composer
installer
d’abord
l’outil
composer
servir
à
de
tâche
courantes
dans
projet
php.
aller
d’abord
créer
répertoire
bin
à
racine
de
home,
placez-y
l’exécutable
composer.phar
renommer
composer.
3.29.
composer,
symfony
4
flex
cours
php
accéléré,
version
0.9.1
cd
mkdir
bin
cd
bin
curl
-s
https://getcomposer.org/installer
|
php
mv
composer.phar
composer
vérifier
définition
de
variables
d’environnement
http_proxy
https_proxy
dans
.bashrc
ajouter
ligne
suivante
à
.bashrc
:
export
path=$path:~/bin
de
manière
à
programme
installer
dans
répertoire
bin
de
home
être
accessibles
de
n’importe
où.
vouloir
juste
installer
composant
simple
http
foundation
»,
placer
à
racine
dossier
de
travail
fichier
*composer.json
suivre
:
{
"require":
{
"symfony/http-foundation":
"~4.0"
}
}
indiquer
n’installons
pour
l’instant
seul
composant
demander
dernière
version
stable
de
branche
4
http-foundation.
utiliser
composer
pour
installer
composant
demander
:
composer
update
-o
noter
l’utilisation
de
l’option
-o
pour
optimize-autoloader
optimiser
«
»
chargement
automatique
classes.
3.29.2
httpfoundation
:
2
principaux
composant
de
httpfoundation
à
savoir
request
response
être
prêts
à
l’emploi.
remarquer
l’usage
espace
de
nommages
en
php
semblables
à
c++
import
de
package
en
java
pour
éviter
conflit
de
nommages
entre
différents
vendor
c’est
à
dire
différentes
entité
fournir
code
à
projet
:
<?php
//
chargement
autoloader
require_once
__dir__.'vendor/autoload.php';
user
symfony\component\httpfoundation\request;
user
symfony\component\httpfoundation\response;
//
actual
request
:
//$request
=
request::createfromglobals();
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
//
fake
request
$request
=
request::create('/essai.php?name=zozo');
//
uri
demandee
(sans
parametres)
$path=$request->getpathinfo();
//
recup
get
de
variables
$nom=$request->query->get('name','world');
$prenom=$request->query->get('surname','joe');
echo
"bonjour
$surname
$name<br/>";
pouvoir
récupérer
d’autres
information
sur
client
fabriquer
réponse
:
<?php
//
recup
variables
server
$host=$request->server->get('http_host');
//
get
cookies
$request->cookies->get('phpsessid');
//
http
headers
$headers=$request->headers->get('host');
$content_type=$request->headers->get('content_type');
$method=$request->getmethod();
//get,
post,
put,
delete
head
$langs=$request->getlanguages();
$ip
==
$request->getclientip();
$response
=
new
response($ip."
".$host."
".$path."
".$headers."
".$content_type."
".$method."
".$nom."
".$langs[0]);
$response->send();
?>
3.29.3
squellette
d’application
symfony
4
:
créer
répertoire
de
travail
mvc-sf4
dans
dossier
web,
par
exemple
~/www
(ou
~/public_html)
utiliser
user_dir
d’apache
n’importe
utiliser
serveur
web
embarquer
de
php.
créer
trame
d’une
application
symfony4
à
l’aide
de
composer
composer
create-project
symfony/skeleton
hello-sf4
veiller
à
avoir
version
à
jour
de
composer
besoin
:
composer
self-update
structure
projet
créer
être
suivante
:
3.29.
composer,
symfony
4
flex
cours
php
accéléré,
version
0.9.1
hello-sf4/
bin
consoler
composer.json
composer.lock
config
bundles.php
package
routes.yaml
services.yaml
public
index.php
src
controller
kernel.php
symfony.lock
var
cacher
log
vendor
autoload.php
composer
psr
symfony
répertoire
bin
contenir
l’outil
console
permettre
d’effectuer
tâche
de
routine
pour
créer
gérer
projet.
répertoire
config
contenir
fichier
de
configuration.
répertoire
public
contenir
fichier
index
de
l’application
dossie
src
controleurs,
kernel
entité
etc.
dossier
var
contenir
cache
logs
dossier
vendor
classe
bundles
installer
http-foundation.
pouvoir
consulter
fichier
symfony.lock
trouver
à
racine
dossier
hello-sf4
pour
voir
liste
dépendance
installer
:
{
"psr/cache":
{
"version":
"1.0.1"
},
"psr/container":
{
"version":
"1.0.0"
},
"psr/log":
{
"version":
"1.0.2"
},
"psr/simple-cache":
{
"version":
"1.0.1"
},
"symfony/cache":
{
"version":
"v4.1.0"
},
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
"symfony/config":
{
"version":
"v4.1.0"
},
"symfony/console":
{
"version":
"3.3",
"recipe":
{
"repo":
"github.com/symfony/recipes",
"branch":
"master",
"version":
"3.3",
"ref":
"e3868d2f4a5104f19f844fe551099a00c6562527"
}
},
"symfony/debug":
{
"version":
"v4.1.0"
},
"symfony/dependency-injection":
{
"version":
"v4.1.0"
},
"symfony/dotenv":
{
"version":
"v4.1.0"
},
"symfony/event-dispatcher":
{
"version":
"v4.1.0"
},
"symfony/filesystem":
{
"version":
"v4.1.0"
},
"symfony/finder":
{
"version":
"v4.1.0"
},
"symfony/flex":
{
"version":
"1.0",
"recipe":
{
"repo":
"github.com/symfony/recipes",
"branch":
"master",
"version":
"1.0",
"ref":
"cc1afd81841db36fbef982fe56b48ade6716fac4"
}
},
"symfony/framework-bundle":
{
"version":
"3.3",
"recipe":
{
"repo":
"github.com/symfony/recipes",
"branch":
"master",
"version":
"3.3",
"ref":
"c0c0bf94174609d740ca2a61e0201949c5683d50"
}
},
"symfony/http-foundation":
{
(suite
sur
page
suivante)
3.29.
composer,
symfony
4
flex
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
"version":
"v4.1.0"
},
"symfony/http-kernel":
{
"version":
"v4.1.0"
},
"symfony/lts":
{
"version":
"4-dev"
},
"symfony/polyfill-mbstring":
{
"version":
"v1.8.0"
},
"symfony/routing":
{
"version":
"4.0",
"recipe":
{
"repo":
"github.com/symfony/recipes",
"branch":
"master",
"version":
"4.0",
"ref":
"cda8b550123383d25827705d05a42acf6819fe4e"
}
},
"symfony/yaml":
{
"version":
"v4.1.0"
}
}
3.29.4
application
simple
symfony
4
compléter
à
présent
l’application
symfony
4.
3.30
tester
application
php
-
tdd
aller
à
présent
attaquer
à
problématique
fondamentale
dans
application
qu’elle
web,
mobile
autres
:
tests.
3.30.1
tdd
tdd
vouloir
dire
test
driven
development
c’est
à
dire
développement
diriger
par
test
c’est
démarche
mettre
en
avant
en
méthodologie
agile
consister
en
général
en
l’application
point
suivants
:
—
écrire
test
—
vérifier
qu’il
échouer
(car
code
qu’il
tester
n’existe
pas)
—
écrire
juste
code
suffire
pour
passer
test
—
vérifier
test
passer
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
—
procéder
à
refactoring
code,
c’est-à-dire
l’améliorer
en
garder
mêmes
fonctionnalités.
3.30.2
intérêt
de
démarche
:
avantage
principaux
de
démarche
être
:
—
préciser
spécification
code
l’api
envisager
—
obliger
à
faire
choix
de
conception
rester
dans
flou
début
développement
—
tard,
disposer
d’une
large
base
de
test
être
riche
pour
application
permettre
de
vérifier
à
moment
test
installer
être
mettre
en
défaut
par
de
nouveaux
développement
refactoring
de
code
langage
de
programmation
disposer
de
frameworks
de
tests.
par
exemple
java
offrir
junit.
php
avoir
proposer
phpunit.
pouvoir
l’installer
via
composer
:
{
"require":
{
"phpunit/phpunit":
"6.3.*",
},
"autoload":
{
"psr-0":
{
"exemple":
"src"
}
}
}
composer.phar
install
ecrivons
à
présent
premier
test
dans
dossier
test
:
<?php
user
exemple\fileloader;
class
fileloadertest
extends
phpunit_framework_testcase
{
public
function
testfileloaderclasscanbecreated()
{
$f
=
new
fileloader;
}
}
pour
tester
:
placer
fichier
phpunit.xml
à
racine
de
projet
contenir
:
<?xml
version="1.0"
encoding="utf-8"?>
<!
!--
(suite
sur
page
suivante)
3.30.
tester
application
php
-
tdd
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
phpunit
configuration
=====================
fichier
de
configuration
standard
de
phpunit
-->
<phpunit
backupglobals="false"
backupstaticattributes="false"
colors="true"
bootstrap="vendor/autoload.php"
converterrorstoexceptions="true"
convertnoticestoexceptions="true"
convertwarningstoexceptions="true"
processisolation="false"
stoponfailure="false"
syntaxcheck="false"
>
<testsuites>
<testsuite>
<directory>
tests</directory>
</testsuite>
</testsuites>
</phpunit>
sommes
prêts
à
lancer
premier
test
:
phpunit
ecrivons
de
code
pour
permettre
de
passer
premier
test
:
aller
compléter
test
par
vérification
qu’un
fichier
situer
dans
textit{fixtures}
de
test
avoir
être
charger
:
<?php
class
fileloadertest
extends
phpunit_framework_testcase
{
public
function
testfileloaderclasscanbecreated()
{
$f
=
new
fileloader;
}
/**
*
vouloir
récupérer
contenu
d'un
fichier
via
*
méthode
get()
*/
public
function
testfileloadercanloadfilecontent()
{
$f
=
new
fileloader;
$r
=
$f->get(__dir__.'/fixtures/simple.md');
$this->assertequals("foo\n",
$r);
}
}
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
avoir
besoin
de
mock
objects,
installer
librairie
mockery
:
composer
require
--dev
mockery/mockery
3.31
mettre
en
place
web
service
rest
3.31.1
problème
dans
architecture
rest
classique,
serveur
présenter
donnée
d’une
table
client
riche
(ou
ria)
en
javascript
client
mobile
permettre
de
récupérer
afficher.
rest
signifier
representational
state
transfer.
architecture
permettre
de
réaliser
application
de
type
onepage
en
reporter
sur
client
bonne
partie
de
logique
métier
en
offrir
point
d’entrée
client
pour
lire
donnée
sur
serveur
envoyer.
donnée
pouvoir
être
envoyer
en
xml
de
en
aujourd’hui
en
json
:
javascript
object
notation,
c’est
à
dire
objet
utilisables
en
js.
poser
définition
suivantes
:
—
ria
=
rich
internet
application
—
rest
=
representational
state
transform
—
logique
métier
déporter
vers
client
—
tâcher
principale
serveur
:
offrir
service
de
récupération
de
stockage
de
donnée
flux
de
news
pouvoir
offrir
par
exemple
ressource
type
:
/api/v1/news/314159
permettre
client
de
récupérer
news
numéro
314159
en
json
en
xml
en
employer
méthode
http
get
dans
version
1
de
api.
dans
exemple,
news
être
ressource
élément
manipuler
dans
l’api
version
1.
méthode
get
être
employer
pour
récupérer
élément
par
collections.
méthode
post
être
à
employer
pour
envoyer
vers
serveur
un
éléments.
d’autres
méthode
http
créer
modifier
(put)
(patch)
élément
effacer
(delete)
être
disponibles
dans
l’api.
technologie
concurrentes
à
rest
être
xml-rpc
soap
(microsoft)
rest
être
façon
moderne
de
concevoir
genre
de
service
posséder
avantage
suivants
:
—
bonne
monter
en
charge
serveur
—
simplicité
serveur
(retour
source
protocole
http)
—
equilibrage
de
charge
—
serveur
offrir
api
—
service
être
représenter
par
url’s
simplicité
bonne
gestion
cache
—
possibilité
de
décomposer
service
complexes
en
de
multiples
service
simples
communiquer
entre
principe
de
rest
avoir
être
théoriser
par
roy
fielding
dans
thèse
(http
://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)
:
séparation
claire
entre
client
serveur
3.31.
mettre
en
place
web
service
rest
cours
php
accéléré,
version
0.9.1
2.
client
contenir
logique
métier,
serveur
être
sans
etat
3.
réponse
serveur
pouvoir
être
mettre
en
cache
4.
l’interface
devoir
être
simple,
définie,
standardiser
5.
système
pouvoir
avoir
couche
proxys,
système
de
cache,
etc
6.
eventuellement,
client
pouvoir
télecharger
code
serveur
s’exécutera
dans
contexte
client
pour
mémoire,
api
rest
pouvoir
offrir
méthode
suivantes
:
méthode
http
rest
:
méthode
rôle
coder
retour
http
get
url
récupération
element
200
get
url
récupération
collection
201
post
url
envoi
d’elements
201
delete
url
effacer
element(s)
200
pouvoir
url
modifier
element
200
patch
url
modif.
partielle
d’elt.
200
pouvoir
avoir
erreur
:
coder
erreur
description
signification
400
bad
request
requêter
former
404
not
found
resource
demander
inexistante
401
unauthorized
authentification
necessaire
pour
accéder
à
resource.
405
method
not
allowed
méthode
interdire
resource.
409
conflict
par
exemple,
un
pouvoir
créer
ressource
2
fois
500
internal
server
error
autres
erreur
serveur.
par
ailleurs,
serveur
rest
maintenir
d’état,
requête
être
indépendantes
un
autres.
c’est
retour
fondamentaux
protocole
http
n’est
doter
de
de
capacité
de
mémorisation
.
.
.
logique
l’ergonomie
de
l’application
être
gérer
côté
client.
c’est
méthode
aujourd’hui
plebiscitée
pour
faire
dialoguer
client
(mobiles
web)
avec
serveurs.
3.32
exemple
de
service
rest
avec
php
3.32.1
problème
aller
réaliser
en
php
l’implémentation
d’un
service
rest
exposer
donnée
de
table
de
contact
appellée
carnet
utiliser
dans
autres
exemples.
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
contact
être
accessible
à
route
type
:
/api/v1/contact/12
permettre
client
de
récupérer
contact
en
json
employer
méthode
http
get
dans
version
1
de
api.
dans
exemple,
contact
constituer
ressource
manipuler
dans
api.
méthode
get
être
employer
pour
récupérer
élément
par
collections.
méthode
action
réaliser
uri
get
récup.
lien
/api/v1/
get
récuperation
element
/api/v1/contact/{id}
get
récupération
collection
/api/v1/contact
post
creation
d’elements
/api/v1/contact
delete
effacer
element
/api/v1/contact/{id}
pouvoir
modifier
element
/api/v1/contact/{id}
patch
modif.
partielle
d’elt.
/api/v1/contact/{id}
route
/api/v1/
en
get
renvoyer
liste
urls
contact
liste
de
contact
avec
détails.
permettre
d’avoir
serveur
rest
auto-documenté
récupération
d’une
premier
url
permettre
en
suivre
d’obtenir
liste
ressource
présentes
sur
service
avec
urls
respectives.
pouvoir
paginer
réponse
pour
manipuler
de
donnée
simultané-
ment.
pour
assurer
routage
aller
continuer
avec
silex
(http
://silex.sensiolabs.org/)
pouvoir
modifier
fichier
index.php
mettre
en
place
suivre
:
<?php
require_once
__dir__.'/vendor/autoload.php';
require_once
'modele.php';
$app
=
new
silex\application();
$app['debug']=true;
$app->get('/contact',
function
()
{
$content
='<ul>';
$amis=get_all_friends();
foreach
($amis
avoir
$ami){
$content.='<li>'.$ami['nom'].'</li>';
}
$content.='</ul>';
return
$content;
});
$app->get('/api/',
function
()
{
$amis=get_all_friends_links();
return
json_encode($amis);
});
$app->get('/api/contact',
function
()
{
(suite
sur
page
suivante)
3.32.
exemple
de
service
rest
avec
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
$amis=get_all_friends();
return
json_encode($amis);
});
?>
avec
nouvelle
méthode
dans
modele.php
:
<?php
function
get_all_friends_links()
{
$connexion=connect_db();
$amis=array();
$sql="select
*
from
carnet";
$data=$connexion->query($sql);
while($pers=$data->fetch(pdo::fetch_assoc))
{
$res=array();
$res['nom']
=
$pers['nom'];
$res['url']=$_server["request_scheme"].'://'.
$_server['http_host'].
$_server['context_prefix'].
'/silex/api/contact/'.$pers['id'];
$amis[]
=
$res;
}
return
$amis;
}
?>
indication
:
vue
de
base
de
api
renvoyer
liste
lien
de
contact
quelqu’un
s’y
connecter
pouvoir
décrouvrir
par
d’autres
urls
gérer
par
api.
bonne
api
rest
devoir
d’être
autodocumentée
dans
mesure
possible!
!
assurer
get
sur
l’uri
/api/contact/id
en
ajouter
à
index.php
:
<?php
$app->get('/api/contact/{id}',
function($id)
user
($app)
{
$ami
=
get_friend_by_id($id);
if
(!
!$ami)
$app->abort(404,
"contact
inexistant");
else
return
json_encode($ami,json_pretty_print);
});
?>
marcher
ajouter
nouvelle
méthode
get_friend_by_id()
modèle
:
<?php
function
get_friend_by_id($id)
{
(suite
sur
page
suivante)
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
$connexion=connect_db();
$sql="select
*
from
carnet
where
id=:id";
$stmt=$connexion->prepare($sql);
$stmt->bindparam(':id',
$id,
pdo::param_int);
$stmt->execute();
return
$stmt->fetch(pdo::fetch_obj);
}
?>
continuer
avec
méthode
http
delete
sur
même
route
en
ajouter
à
index.php
:
<?php
$app->delete('/api/contact/{id}',
function($id)
user
($app)
{
$ami
=
get_friend_by_id($id);
if
(!
!$ami)
$app->abort(404,
"contact
inexistant");
else
{
delete_friend_by_id($id);
return
json_encode($ami,json_pretty_print);
}
});
?>
en
ajouter
modèle
:
<?php
function
delete_friend_by_id($id)
{
$connexion=connect_db();
$sql="delete
from
carnet
where
id=:id";
$stmt=$connexion->prepare($sql);
$stmt->bindparam(':id',
$id,
pdo::param_int);
$stmt->execute();
return
$stmt->fetch(pdo::fetch_obj);
}
?>
post
devoir
permettre
d’envoyer
nouveau
contact
pour
peupler
table
carnet
sur
route
/api/contact.
assurer
d’abord
récupération
contenu
json
sous
forme
d’un
tableau
php
avec
méthode
before
de
silex
:
<?php
$app->before(function
(request
$request)
{
if
(0
===
strpos($request->headers->get('content-type'),
˓→
'application/json'))
{
$data
=
json_decode($request->getcontent(),
true);
$request->request->replace(is_array($data)
?
$data
˓→:
array());
(suite
sur
page
suivante)
3.32.
exemple
de
service
rest
avec
php
cours
php
accéléré,
version
0.9.1
(suite
de
page
précédente)
}
});
?>
méthode
post
dire
:
<?php
$app->post('/api/contact',
function
(request
$request)
user
(
˓→$app)
{
$data
=
$request->request->all();
add_friends($data);
return
new
response(json_encode($data),
200,
array('content-
˓→type'
=>
'application/json'));
});
?>
n’oubliez
de
faire
appel
objet
request
response
début
fichier
index.php
:
<?php
user
symfony\component\httpfoundation\request;
user
symfony\component\httpfoundation\response;
?>
rester
qu’à
ajouter
modèle
:
<?php
function
add_friends($data)
{
$connexion=connect_db();
$sql="insert
into
carnet(nom,prenom,naissance,ville)
value
(?
˓→,?,?,?)";
$stmt=$connexion->prepare($sql);
return
$stmt->execute(array($data['nom'],
$data['prenom'],
˓→$data['naissance'],$data['ville']));
}
?>
n’y
avoir
qu’à
implémenter
pouvoir
à
tester!!
!!
3.33
tester
api
rest
avec
navigateur
avec
curl
pour
tester
api
pouvoir
dans
premier
temps
utiliser
l’extension
postman
de
chrome
l’extension
restclient
firefox.
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
avertissement
:
attention
à
désactiver
proxys
dans
navigateur
vouloir
utiliser
extensions.
pour
chrome
pouvoir
lancer
en
ligne
de
commande
avec
l’option
–no-proxy-server
vouloir
solution
en
ligne
de
commande,
curl
permettre
de
manipuler
différentes
méthode
http.
syntaxe
n’est
idéale
pouvoir
tester
méthode
http.
avertissement
:
avoir
déclarer
variables
d’environnement
http_proxy
https_proxy,
valoir
désactiver
curl
n’essaie
de
passer
par
proxy
être
problématique
pour
de
requête
curl
:
unset
http_proxy
unset
https_proxy
3.33.1
pour
tester
get
:
curl
-i
http://localhost/silex/api/v1/contact/2
utiliser
module
user_dir
d’apache.
curl
-i
http://localhost/~login/silex/api/v1/contact/2
avertissement
:
attention
dans
cas
utiliser
user_dir,
réglage
pour
utiliser
methodes
protocole
http/1.1
pouvoir
s’avérer
délicats.
fichier
/etc/apache2/mods-available/userdir.conf
devoir
être
modifier
suivre
(les
user_dir
être
dans
www,
syntaxe
pour
apache
>
2.2)
:
<ifmodule
mod_userdir.c>
userdir
www
userdir
disabled
root
<directory
/home/*/www>
allowoverride
all
opter
multiviews
indexer
symlinksifownermatch
<limit
get
post
pouvoir
delete
options>
require
all
granted
</limit>
<limitexcept
get
post
pouvoir
delete
options>
require
all
denied
</limitexcept>
</directory>
</ifmodule>
3.33.
tester
api
rest
avec
navigateur
avec
curl
cours
php
accéléré,
version
0.9.1
falloir
dans
dossier
sous
voter
user_dir
(par
exemple
~/www/silex
)
avoir
.htaccess
suivre
:
<limit
get
post
delete
pouvoir
options>
allow
from
all
</limit>
fallbackresource
/~roza/silex/index.php
rewritebase
/~roza/silex
dans
cas,
préciser
besoin
dans
php.ini
fichier
équivalent
:
always_populate_raw_post_data
=
-1
3.33.2
pour
tester
post
:
curl
-i
-h
"content-type:
application/json"
-x
post
-d
'{"nom":"dalton",
"prenom":"joe",
"naissance":"2000-08-15",
˓→"ville":"orleans"}'
http://localhost/silex/api/contact
3.33.3
test
un
pouvoir
:
curl
-i
-h
"content-type:
application/json"
-x
pouvoir
-d
'{"done":true}
˓→'
http://localhost/silex/api/contact/5
3.33.4
test
de
delete
:
curl
-i
-h
"content-type:
application/json"
-x
"delete"
http://localhost/silex/api/contact/7
3.34
tester
api
3.34.1
tester
api
avec
postman
c’est
moyen
simple
pour
tester
un
api.
l’installe
en
téléchargeant
l’app
de
postman
(https
://www.getpostman.com/apps)
pour
os.
pouvoir
constituer
collection
de
requête
http
tester
api
rest
spécifique.
chapitre
table
matière
:
cours
php
accéléré,
version
0.9.1
3.34.2
tester
api
rest
avec
guzzle
test
de
api
rest
avec
curl
être
lisibles.
préférer
disposer
d’une
batterie
de
test
en
php,
pouvoir
utiliser
librairie
spécialiser
guzzle.
pouvoir
installer
dernière
avec
composer
:
composer
require
guzzlehttp/guzzle
3.35
feuille
de
td
lic
pro
web
mobile
3.35.1
année
2018-2019
—
td1
—
td2
—
td3
3.36
feuille
de
td
2ème
année
iut
informatique
3.36.1
année
2018-2019
—
td1
—
tp1
—
td2
—
tp2
—
tp3
—
td3
—
git
init
3.37
feuille
de
td
lic
pro
web
mobile
3.37.1
année
2017-2018
—
td1
—
td2
—
td3
—
td4
—
td5
—
td6
—
td7
3.35.
feuille
de
td
lic
pro
web
mobile
cours
php
accéléré,
version
0.9.1
3.38
feuille
de
td
cvrh
tours
3.38.1
formation
de
juin
2015
—
td1
—
td2
—
td3
3.39
alice
démarrer
avec
git
:
3.39.1
paramétrage
initialisation
:
configurer
d’abord
paramètre
git
config
--global
user.name
"alice
torvalds"
git
config
--global
user.email
"alice@kernel.org"
3.39.2
création
d’un
dossier
local
versionné
mkdir
monprojet
cd
monprojet
git
init
avoir
déja
contenu
:
git
add
.
3.39.3
création
d’un
dépot
«
monprojet
»
sur
gitlab
—
privé
—
public
—
interne
à
gitlab
bitbucket
(https
://bitbucket.org/)
offrir
possibilité
d’avoir
dépôt
priver
de
taille
limitée.
github
(https
://github.com/)
offrir
dépôt
public
faire
payer
dépôt
privés.
3.39.4
connexion
entre
local
gitlab
:
eventuellement
:
git
config
push.default
simple
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
git
remote
add
origin
https://gitlab.com/alice/monprojet.git
git
push
-u
origin
master
:
git
push
par
suite
3.39.5
réalisation
d’une
fonctionnalité
par
alice
:
—
alice
prendre
chose
à
réaliser
implémente
code
nécessaire
—
alice
faire
test
vérifier
marche
—
git
commettre
-am
«
message
de
commettre
»
3.39.6
alice
pousser
master
sur
remote
:
git
push
-u
origin
master
3.40
bob
travailler
avec
alice
grâce
à
git
:
bob
faire
d’abord
alice
paramétrer
initialiser
dépôt
local.
3.40.1
bob
vérifier
qu’il
avoir
2
remotes
:
—
sien,
origin
qu’il
créer
besoin
en
faire
:
git
remote
add
origin
https://gitlab.com/bob/monprojet.git
—
d’alice
qu’il
ajouter
:
git
remote
add
alice
https://gitlab.com/alice/monprojet.git
—
taper
git
remote
-v
pour
vérifier
remotes
—
tromper
:
git
remote
remove
alice
3.40.2
bob
récupérer
master
d’alice
:
git
fetch
alice
master
3.40.
bob
travailler
avec
alice
grâce
à
git
:
cours
php
accéléré,
version
0.9.1
3.40.3
bob
consulter
branche
locale
correspondre
master
d’alice
:
git
branch
-av
git
checkout
alice/master
vérifier
code
d’alice
être
correct
3.40.4
bob
revenir
dans
master
:
git
checkout
master
3.40.5
bob
merge
travail
d’alice
pousser
modifs
dans
dépôt
distant
:
git
merge
alice/master
git
push
detruit
branche
locale
d’alice
:
git
branch
-d
alice/master
3.41
alice
mettre
à
jour
:
—
ajouter
remote
de
bob
—
fetche
master
de
bob
pour
mettre
à
jour
:
git
fetch
bob
master
—
fusionner
:
git
merge
bob/master
3.42
alice
travailler
sur
branche
git
:
alice
devoir
par
exemple
intégrer
feature
de
connexion
à
base
de
données.
aller
pour
créer
branche
bd
dédier
à
réalisation
de
feature
placer
dedans.
chapitrer
table
matière
:
cours
php
accéléré,
version
0.9.1
3.42.1
création
choix
de
branche
:
git
checkout
-b
bd
faire
travail,
tester
:
git
commettre
-am
"intégration
bd"
3.42.2
alice
pousser
branche
sur
remote
:
git
push
origin
bd
3.43
bob
branche
d’alice
:
3.43.1
bob
récupérer
branche
d’alice
:
git
fetch
alice
bd
3.43.2
bob
consulter
branche
d’alice
:
s’il
souhaite,
bob
consulter
liste
branche
disponibles
placer
dans
branche
d’alice
pour
faire
petite
revue
code
de
collaboratrice.
.
.
git
branch
-av
git
checkout
alice/bd
3.43.3
bob
revenir
dans
branche
master
:
git
checkout
master
3.43.4
bob
merge
branche
d’alice
pousser
modifs
:
git
merge
alice/bd
git
push
3.43.
bob
branche
d’alice
:
cours
php
accéléré,
version
0.9.1
3.44
alice
récupérer
dernière
version
master
:
3.44.1
alice
fetche
master
de
bob
pour
mettre
à
jour
:
git
fetch
bob
master
git
merge
bob/master
3.44.2
alice
effacer
branche
bd
:
git
branch
-d
bd
chapitrer
table
matière
:
chapitre
4
git
bon
développeur
devoir
aujourd’hui
savoir
utiliser
système
de
gestion
de
version
pour
code
pour
collaborer.
git
être
aujourd’hui
répandu.
trouver
à
fin
de
cours
rappel
principales
commande
git
pour
démarrer
:
git
start
commande
pour
travailler
à
sur
projet
avec
branche
git
:
git
branche
cours
php
accéléré,
version
0.9.1
chapitre
git
chapitre
5
référence
—
manuel
php
(http
://php.net/manual/fr/)
—
intro
js
(https
://www.univ-orleans.fr/iut-orleans/informatique/intra/tuto/js-
initiation/slides1.html#/le-langage-javascript)
—
complément
js
(https
://www.univ-orleans.fr/iut-orleans/informatique/intra/tuto/js-initiation/slides2.html#/versions-de-javascript)
cours
php
accéléré,
version
0.9.1
chapitre
5.
référence
chapitre
6
index
recherche
—
genindex
—
search
cours
php
accéléré,
version
0.9.1
chapitre
index
recherche
index
symbols
csrf,
==,
curl,
===,
cvrh,
$_get[],
d
$_globals[],
$_post[],
database,
$_server[],
db,
2017-2018,
define,
2018-2019,
delete,
2eme
année,
directives,
dirname,
numbers
dom,
2015,
e
2018,
echo,
a
ensembles,
array_walk,
equals,
associatif,
ereg(),
autoload,
eregi(),
autoloader,
eval,
b
f
bases,
filtrage,
bd,
filtrage,
bundles,
foreach,
formulaire,
c
g
caché,
chaine,
génération,
clefs,
get,
collections,
gettype,
composer,
gump,
concaténation,
guzzle,
constructeur,
h
controleur,
cookies,
hidden,
cours
php
accéléré,
version
0.9.1
http,
phpunit,
http,
piles,
httpfoundation,
portée,
post,
i
preparedstatement,
imbrication,
print,
include,
print_r,
include_once,
put,
injection
sql,
q
installation,
interpréteur,
queue,
is_array,
r
is_double,
is_int,
recherche,
is_long,
request,
is_string,
require,
iut,
require_once,
response,
l
rest
lamp,
route,
lerdorf,
routes,
licence
professionnelle,
s
m
sécurité,
méthodes,
sax,
magic
quotes,
sessions,
mamp,
set,
modele,
settype,
mvc,
simplexml,
mysql,
sort,
sql,
n
stack,
namespace,
string,
stristr(),
o
strlen(),
objets,
strstr(),
options,
suppression,
orleans,
symfony,
p
t
pair,
tableau,
patch,
td,
pdo,
tdd,
persistante,
template,
php,
test,
php.ini,
tests,
php5,
tests,
php7,
time,
phpinfo,
timestamp,
index
cours
php
accéléré,
version
0.9.1
tostring,
tours,
transactions,
twig,
type,
u
url,
user-agent,
useragent,
v
valeurs,
validation,
variables,
variables
php,
vue,
w
wamp,
web,
x
xampp,
xml,
xmlreader,
xmlwriter,
z
zend,
index
