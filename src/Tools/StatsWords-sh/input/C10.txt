développement
web
–
php
cours
1
organisation
•
12
séance
•
séance
=
1h30
cours
1h30
td,
projet
•
projet
en
binôme
en
solo
(selon
groupe
premier
semestre)
•
1
devoir
sur
table
•
interros
surprendre
10
minute
•
participation,
travail
continu
noter
sous
forme
de
point
bonus
•
td
de
semaine,
divers
document
information
diverses
sur
l’epi
•
fin
courir
avril
•
evaluation
–
contrôler
continu
(50
%)
•
devoir
maison
•
projet
•
1
devoir
sur
table
•
interrogation
surprendre
•
bonus
participation
–
examen
partiel
(50
%)
programme
cours
•
introduction
générale
web
–
architecture
techniques
–
rappel
sur
html
différence
statique/dynamique
–
explication
sur
l’environnement
web
–
premier
pas
en
php
–
installation
wamp/mamp/xamp
•
php
•
php
mysql
architecturer
générale
d’un
site
web
base
de
données
(information
brute)
navigateur
serveur
web
(utilisateur)
(site
visible)
serveur
d’application
(traitements
internes)
front
office
back
office
architecture
générale
d’un
site
web
base
de
données
navigateur
serveur
web
serveur
d’application
front
office
back
office
architecture
générale
d’un
site
web
navigateur
serveur
web
&
base
de
donnée
apache
front
office
back
office
architecture
générale
d’un
site
web
navigateur
serveur
web
&
base
de
donnée
apache
xamp
front
office
back
office
rappel
version
technologie
vérifier
version
de
tutoriaux
trouver
sur
internet!
!
§
html
de
version
minimale
hormis
1.1...
navigateur
interpréter
qu’ils
pouvoir
§
html
5
version
actuelle
(4
passer
aussi)
§
php
4
obsolète
non-supporté
(+
faille
de
sécurité)
§
php
5.6
supporter
§
php
7.3
version
actuelle
§
mysql
8
version
actuelle
(mais
de
souci
avec
langage,
standard
sql,
excepté
tutorial
<=
mysql
3.0)
rappel
version
technologie
vérifier
version
de
tutoriaux
trouver
sur
internet!
!
§
documentation
php
:
http://php.net/manual/fr/
§
exemple
concret
avec
fonction
de
chaîne
:
http://php.net/manual/fr/ref.strings.php
rappel
html
•
header
/
body
•
lister
•
tableau
•
image
lien
html
baliser
ouvrir
html
devoir
être
fermer
<html>
<balise>
...
</balise>
head
body
<head>
<title>
exemple
html
</title>
title
h1
p
p
</head>
<body>
i
b
<h1>
exemple</h1>
<p>
être
<i>
really</i>
<b>
important</b>
.
</p>
<p>
l'informatique
pouvoir
aider!
!</p>
</body>
</html>
html
•
structurer
d’un
document
html
<!
!doctype
html>
indication
«
idiome
»
html
<html>
<head>
<
meta
name="author"
content=
entêter
(head)
"manuele
kirsch
pinheiro"
/>
information
générales
<
title>
exemple
html
</title>
sur
document
</head>
<body>
<h1>exemple</h1>
<p>ceci
être
<i>really</i>
corps
(body)
<b>important</b>.
</p>
contenir
document
<p>
l'informatique
pouvoir
aider!
!</p>
</body>
</html>
html
•
elément
doctype
–
indique
navigateur
version
de
html
avoir
être
utiliser
–
html
4.01
•
comprendre
par
navigateur
<!
!doctype
html
public
"-//w3c//dtd
html
4.01
transitional//en"
http://www.w3.org/tr/html4/loose.dtd>
–
html
5
<!
!doctype
html>
•
en
cours
de
définition
•
reconnaître
par
navigateur
récents
(google
chromer
16.0,
firefox
9.0,
internet
explorer
9...)
html
•
eléments
de
l’entête
(head)
<head>
<
meta
name="author"
–
information
complémentaires
content=
"manuele"
/>
sur
document
<
title>
exemple
html
</title>
</head>
–
n’est
contenu
document,
information
être
afficher
dans
page
–
typiquement,
information
pour
moteur
de
recherche
•
baliser
–
<titre>
...
</titre>
:
titre
document
–
<meta
...
/>
:
métadonnées
(descriptions)
sur
document
–
<link
...
/>,
<style>
...
</style>
:
style
html
•
eléments
de
l’entête
(head)
<
title
>
exemple
html
</
title
>
ouverture
fermeture
de
balise
<meta
name="author"
content=
"auteur"
/>
attribut
associer
à
balise
élément
de
précision
sur
balise
l’entête
être
balise
posséder
ensemble
visibles
dans
corps
d’attributs
document
<balise
attribut
=
"valeur"
...
>
<meta
name="description"
value="..."
/>
<meta
charset="iso-8859-1">
html
•
eléments
corps
(body)
<body>
–
contenir
document
<h1>exemple</h1>
<p>ceci
être
<i>really</i>
–
partie
rendre
visible
par
<b>important</b>.
</p>
navigateur
<p>
l'informatique
pouvoir
•
balise
:
avoir
plein...
aider!
!</p>
</body>
–
titre
:
<h1>,
<h2>
...
<h6>
–
paragraphe
saut
de
ligne
:
<p>
<br
/>
–
citation
mettre
en
valeur
:
<b>,
<i>,
<blockquote>
...
–
image
lien
:
<img>,
<a
...>
...
–
liste
:
<ol>,
<ul>,
<li>
–
tableau
:
<table>,
<tr>,
<td>
...
–
organisation
document
:
<div>,
<section>
...
html
•
eléments
corps
(body)
•
titre
:
h1,
h2,
h3,
h4,
h5,
h6
–
élément
h
x
permettre
de
définir
titre
de
différents
niveau
•
h1
correspondre
titre
principal
–
devoir
apparaître
dans
l’ordre
(h1
avant
h2)
avec
seul
titre
principal
(h1)
<body>
<h1>
exemple</h1>
h1
...
</body>
html
•
eléments
corps
(body)
•
paragraphe,
saut
de
ligne
citation...
–
balise
<p>
...
</p>
indique
paragraphe
–
balise
<br
/>
faire
simple
saut
de
ligne
–
balise
<b>...</b>
<i>...</i>
mettre
texte
en
relief
(en
gras
en
italique)
–
balise
<blockquote>
...</blockquote>
permettre
de
citer
autre
page
web
<blockquote
cite="http://source/"
>
citation
</blockquote>
–
balise
<hr
/>
permettre
d’établir
séparation
(ligne
horizontal)
dans
document
html
•
eléments
body
<html>
h1
<head>
...
</head>
<body>
h2
i
<h1>
exemple
h1</h1>
br
<h2>
exemple
h2</h2>
p
<p>
être
paragraphe
avec
<i>
terme
technique</i>
b
<br/>
<b>
mot-clé</b>
.
</p>
<blockquote
cite="
http://fr.wikipedia.org/wiki/
hypertext_markup_language"
>
html
n’est
concevoir
pour
spécifier
l’apparence
visuelle
exacte
documents.
</blockquote>
hr
<hr/>
<p>
l'informatique
pouvoir
aider!
!</p>
blockquote
</body>
</html>
html
•
html
–
langage
de
balises,
permettre
structuration
page
web
–
organisation
en
balise
<balise
attr="valeur">
...
</balise>
–
organisation
document
•
entêter
:
head
•
corps
document
:
body
–
différents
type
de
balise
possibles
•
listes,
tableaux,
images,
liens...
html
:
liste
•
type
de
liste
être
possibles
–
lister
numéroter
:
<ol>
...
</ol>
–
liste
non-numérotés
:
<ul>
...
</ul>
–
importer
liste,
seul
moyen
d’indiquer
élément
:
<li>
...
</li>
<ol>
<li>
1
</li>
<li>
2
</li>
</ol>
<ul>
<li>
premier
</li>
<li>
second
</li>
</ul>
html
:
tableau
•
pour
créer
tableau
en
html,
aller
combiner
balise
:
–
table,
tr,
td,
caption,
th,
thead,
tbody
<table
border="1"
>
tableau
<tr>
<table>
ligne
<td>
html
2</td>
<tr>
<td>
1995</td>
</tr>
<tr>
<td>html
4</td>
<td>1999</td>
cellule
</tr>
<td>
</table>
html
:
tableau
<table
border="1">
caption
:
légende
<caption>
historique
html
</caption>
<thead>
thead
:
entêter
tableau
<tr>
<th>
version</th>
th
:
cellule
de
l’entête
<th>
année
</th>
</tr>
</thead>
tbody
:
corps
<tbody>
tableau
<tr>
<td>html
2</td>
<td>1995</td>
</tr>
<tr>
<td>html
4</td>
<td>1999</td>
</tr>
</tbody>
</table>
html
:
image
•
insertion
d’images
dans
texte
:
baliser
img
<img
src="fichier.jpg"
width=
"80"
alt="texte"
/>
texte
alternatif
tailler
optionnelle
infobulle
width=
"80"
height="70"
src
:
trouver
l’image
page.html
être
avec
page
web
img
(
répertoire)
src=".\img\paris_nd.jpg"
paris_nd.jpg
(
fichier)
être
sur
serveur
:
src="http://lsteffenel.fr/images/petanque-cochonnet.jpg"
html
:
image
•
balise
html
:
image
<html>
<head>
...
</head>
<body>
<h1>exemples
</h1>
<p>image
distante
:
<img
src="http://lsteffenel.fr/images/petanque-cochonnet.jpg"
width="80"
alt="cochonnet
petanques"
/>
</p>
<p>image
local
:
<img
src=".\img\paris_nd.jpg"
height="70"
alt="vue
de
paris"
/>
</p>
</body>
</html>
html
:
lien
•
l’usage
lien
permettre
de
relier
page
web
à
d’autres
pages,
à
d’autres
point
dans
page
<a
href="
ref">
lien
visible</a>
•
l’attribut
href
indique
vers
aller
lorsqu’on
cliquer
sur
lien
–
lien
local
:
<a
href="
autrepage.html">
vers
autre
page
</a>
–
lien
distant:
<
avoir
href="
http://serveur/page.html">
</a>
–
envoyer
mail
:
<a
href="
mailto:monemail@serveur.com">
envoyer
mail</a>
html
:
lien
attribuer
identificateur
<balise
id="identificateur"
>
<h1
id="debut">
lien
</h1>
<p>lien
vers
<a
href="http://epi.univ-paris1.fr">
l'epi
</a>
</p>
<p>lien
vers
<a
href="courshtml-5.html">
exemple
tableau
</a>
</p>
<p>envoyer
mail
à
<a
href="mailto:moi@mail.com">
</a>
</p>
<p>
....
</p>
lien
vers
l’identificateur
<a
href="
#identificateur">
<p>
<a
href="courshtml-7.html#debut">
retourner
début
</a>
</p>
statique
vs
dynamique
•
statique
:
partie
«
fixe
»
page
–
html
renvoyer
client
:
–
css
partie
changer
–
javascript
(js)
qu’il
arriver
•
dynamique
:
–
cgi
partie
«
variable
»
page
–
php
renvoyer
client
:
–
java
partir
changer
selon
–
javascript
(js)
requête
–
...
information
disponibles
statique
vs
dynamique
•
site
web
statique
:
changement
dans
page
l’on
«
rafraichit
»/refait
même
requête
•
dynamique
:
page
évoluer
selon
information
externes
(à
requête,
en
général)
statique
vs
dynamique
•
site
web
statique
body
{
<html>
background-color:
<head>
lightblue;
<link
rel="stylesheet"
}
type="text/css"
href="mystyle.css">
h1
{
</head>
color:
navy;
<body>
margin-left:
20px;
</body>
}
</html>
css
html
statique
vs
dynamique
•
site
web
dynamique
body
{
<html>
<?php
background-color:
<head>
include("head.html");
lightblue;
<link
rel="stylesheet"
echo
"<body>";
}
type="text/css"
var
=
3
5;
href="mystyle.css">
echo
"valeur
:
$var";
h1
{
</head>
color:
navy;
echo
"</body>";
margin-left:
20px;
include("foot.html");
}
?>
css
html
php
apache,
uri/url,
dns,
php
•
serveur
web
:
apache
(traite
connexion
transmettre
requêtes)
•
s’appuie
sur
http,
uri/url,
dns
(pour
communiquer
comprendre
ressource
site
être
visés)
•
extension
serveur
web
:
php
(lit
requête
qu’apache
transmet,
faire
traitement
demandés)
apache
&
php
•
apache
aller
traiter
connexion
requête
•
php
aller
construire
réponse
en
exécuter
logique
métier
(le
code)
navigateur
serveur
web
apache
apache
•
apache
:
serveur
web
libre
gratuit
disposer
d’extensions
pour
lier
à
php
à
d’autres
outil
pour
traiter
requête
navigateur
serveur
web
apache
apache
•
apache
:
usage
classique
associer
fichier
à
requête
<html>
http://monsite.fr/page.htm
coucou
(get
page.htm)
</html>
page.htm
navigateur
serveur
web
apache
apache
client
envoyer
requête
avec
ressource
viser
apache
lit
requête,
chercher
fichier
apache
répondre
à
requête
en
envoyer
fichier
get
page.htm
<html>
http://monsite.fr/page.htm
coucou
(get
page.htm)
</html>
coucou
page.htm
<html>
navigateur
coucou
serveur
web
</html>
page.htm
apache
apache
•
requête
réponse
transmettre
avec
:
–
http
1.0
http
1.1
http/2
–
(hypertext
transfer
protocol)
get
page.htm
<html>
http://monsite.fr/page.htm
coucou
(get
page.htm)
</html>
coucou
page.htm
navigateur
serveur
web
protocole
pour
transmettre
apache
information
:
http
apache
apache
•
serveur
web
s’appuie
donc,
sur
:
–
protocole
http
(utilise
port
80)
–
protocole
https
(utilise
port
443)
[s
pour
«
secure
»,
en
utiliser
certificat
pour
chiffrer
connexion
pour
s’assurer
l’hôte/host
être
l’on
cherche]
•
pour
pouvoir
communiquer
avec
navigateur
apache
&
uri/url
•
identification
ressource
avec
uri
url
–
uri
:
uniform
resource
identifier
adresse
unique
vers
–
url
:
uniform
resource
locator
ressource
«
page.htm
»
get
page.htm
http://monsite.fr/page.htm
(get
page.htm)
coucou
<html>
<html>
coucou
navigateur
coucou
serveur
web
</html>
</html>
page.htm
page.htm
apache
apache
&
uri/url
•
identification
ressource
avec
uri
url
•
http://monsite.fr/page.htm
–
ressource
:
«
page.htm
»
–
dans
dossier
:
«
/
»
(la
racine)
–
sur
site
web
:
«
http://monsite.fr
»
•
ftp://machine1.autresite.com/images/oiseau.jpg
–
ressource
:
«
oiseau.jpg
»
–
dans
dossier
:
«
/images/
»
–
sur
machine
«
machine1.autresite.com
»
accessible
en
«
ftp://
»
apache
&
uri/url
apache
&
dns
•
machine
sur
internet
être
identifier
par
ip
•
exemple
ipv4
:
8.8.8.8
127.0.0.1
•
exemple
ipv6
:
2001:0db8:85a3:0000:0000:8a2e:
0370:7334
•
pratique
pour
visiter
site
web...
...mais
parfaire
pour
rendre
unique
machine
apache
&
dns
•
dns
:
domain
name
system
•
gérer
«
nom
de
domaine
»
(exemple
:
univ-paris1.fr
)
•
permettre
de
lier
nom
de
domaine
à
un
ip
•
permettre
de
gérer
«
sous-domaines
»
•
exemple
:
univ-paris1.fr
www.univ-paris1.fr
ent.univ-paris1.fr
•
«
www
»
«
ent
»
être
sous-domaines
apache
&
dns
apache
&
dns
client
envoyer
requête
avec
ressource
viser
apache
lit
requête,
chercher
fichier
apache
répondre
à
requête
en
envoyer
fichier
get
page.htm
host
chez.moi.fr
<html>
get
page.htm
get
page.htm
coucou
host
mio.es
host
chez.moi.fr
</html>
coucou
pouet
page.htm
<html>
<html>
navigateur
coucou
pouet
serveur
web
<html>
</html>
</html>
pouet
</html>
page.htm
page.htm
apache
page.htm
apache
&
dns
•
nom
de
domaine
pouvoir
renvoyer
vers
même
ip
•
serveur
web
pouvoir
afficher
site
différents
selon
l’hôte
demander
dans
requête
–
chez
apache,
appeler
«
virtual
host
»
(vhosts)
–
pour
gérer
cela,
devoir
avoir
accès
à
configuration
serveur
web.
n’est
cas
souscrire
à
service
«
d’hébergement
web
».
•
pour
avoir
«
bon
»
site,
être
utile
de
choisir
nom
de
domaine
pertinent
–
certificat
pour
mettre
https
baser
sur
nom
de
domaine,
sur
ip
apache
&
php
•
php
être
extension
à
côté
de
apache
<html>
–
apache
configurer
pour
appeler
php
lorsqu’il
<?php
voir
passer
requête
terminer
par
«
.php
»
echo
"b";
?>
–
php
traiter
fichier
en
question,
produit
</html>
réponse
renvoyer
par
apache
page.php
get
page.php
get
page.php
b
<html>
navigateur
serveur
web
<html>
b
b
</html>
</html>
apache
page.php
page.php
apache
&
cgi
•
cgi
:
common
gateway
interface
–
outil
autres
php
pouvoir
être
appeler
par
<html>
serveur
web
...
–
</html>
cgi
être
standard
pour
envoyer
requête
autres
outils,
lire
réponse
page.xyz
get
page.xyz
get
page.xyz
hello
cgi
<html>
navigateur
serveur
web
<html>
b
hello
</html>
</html>
cgi
apache
page.xyz
page.xyz
objectifs
cours
:
création
d’un
site
web
dynamique
php
php
•
php
être
langage
de
programmation
utiliser
pour
construction
de
site
web
dynamiques
–
page
php
:
page
web
contenir
de
php
•
aller
mélanger
php
code
html
/
css
•
code
php
aller
être
analyser
par
serveur
•
résultat
aller
être
nouvelle
page
web
mettre
à
jour
par
code
php
coursphp-1.php
<html>
...
code
php
être
à
<?php
l’intérieur
de
balise
date_default_timezone_set("europe/paris");
<?php
...
?>
entourer
par
balise
echo
"<p
style='font-style:
italic;'>
paris,
"
<script
language="php">
.date('d
/
m
/
y').
"</p>"
;
...
</script>
?>
...
</html>
php
php
:
php
hypertext
preprocessor.
ø
langage
interpréter
pour
créer
site
dynamiques
ø
langage
de
script
côté
serveur
ø
langage
typer
ø
langage
«
embedded
html
»
ø
open
source
:
php
avoir
permettre
de
créer
grand
nombre
de
site
web
célèbres,
facebook,
wikipédia,
etc.
commande
php
de
base
•
variables
•
type
•
opérateur
•
fonction
•
echo,
gettype,
unset
installation
configuration
de
php
suffire
de
télécharger
suite
logiciele
:
•
wamp
:
http://www.wampserver.com/
•
mamp
:
http://www.mamp.info/
•
xampp
:
https://www.apachefriends.org/fr/
éditeur
de
texte
:
•
sublim
text
(macos):
http://www.sublimetext.com/2
•
notepad++
(windows)
:
https://notepad-plus-plus.org/fr/
•
autres
(linux/bsd/unix)
:
emacs,
vim,
nano,
gedit,
...
introduction
php
syntaxe
de
base
:
<!
!doctype
html
public
"-//w3c//
<!
!doctype
html>
dtd
html
4.01//en"
"http://
<
html>
www.w3.org/tr/html4/strict.dtd">
<
head>
<
title>
titre</title>
</head>
<
body>
<?
php
echo
"
hello
world!
!"
;
?>
</body>
</html>
commentaire
php
commentaire
:
commentaire
hériter
langage
c
perl
//
être
commentaire
sur
seule
ligne
/*
être
commentaire
sur
ligne
*/
commentaire
styler
shell
#
être
commentaire
sur
seule
ligne
variables
php
•
notion
de
variable
–
variable
être
conteneur
de
valeur
–
pouvoir
affecter
valeur,
qu’on
aller
utiliser
$variable
=
"php5"
;
«
$
»
indiquer
variable
«
=
»
être
affectation
attribut
valeur
à
nom
de
variable
variable
commencer
par
lettre
«
_
»,
sans
echo
"...
$variable
..."
;
espace
récupérer
valeur
garder
dans
variable
par
nom
variables
php
•
notion
de
variable
:
type
donnée
–
variables
pouvoir
garder
de
valeur
de
différents
type
•
nombrer
entiers
(integer)
:
25
•
nombre
décimaux
(double
float)
:
2.25
•
chaîne
de
caractère
(string)
:
«
1
super
chaîne!
!»
•
logique
(boolean)
:
«
true
»
(1)
«
false
»
–
fonction
gettype($variable)
permettre
de
savoir
typer
de
valeur
contenir
variable
•
$entier
=
25;
gettype($entier)
->
integer
•
$decimal
=
2.25;
gettype($decimal)
->
double
•
$chaine
=
"1
super
chaîne!
!";
gettype($chaine)
->
string
•
$bool
=
true;
gettype($bool)
->
boolean
variables
php
•
exemple
:
<?php
définition
d’une
$entier
=
25;
variable
$decimal
=
2.25;
$chaine
=
"1
super
chaîne!
!";
$boolean
=
true;
echo
"<li>"
.
gettype($entier)
.
":
$entier
</li>"
;
echo
"<li>"
.
gettype($decimal)
.
":
$decimal
</li>"
;
echo
"<li>"
.
gettype($chaine)
.
":
$chaine
</li>"
;
echo
"<li>"
.
gettype($boolean)
.
":
$boolean
</li>"
;
?>
valeur
de
récupérer
gettype()
variable
valeur
de
variable
informer
type
$boolean
de
variable
type
de
donnée
php
opérateur
sur
chaîne
de
caractère
:
–
concaténation
:
chaine1
.
chaine2
opérateur
logiques
:
•
and
&&
(vrai
$a
$b
vrais)
•
or
||
(vrai
$a
$b
être
vrais)
opérateur
arithmétiques
:
•
addition
:
$a
$b,
•
soustraction
:
$a
-
$b,
•
multiplication
:
$a
*
$b,
•
division
:
$a
/
$b,
•
modulo
(reste
de
division
entière)
:
$a
%
$b.
type
de
donnée
php
opérateur
arithmétiques
:
•
attention
:
lorsqu’une
chaine
de
caractère
être
évaluer
valeur
numérique,
règles
suivantes
s’appliquent
:
•
$toto
=
1
"4.5"
;
#
$toto
valoir
5.5
•
$toto
=
1
"titi
149"
;
#
$toto
valoir
1
chaine
valoir
0
c’est
texte
ou,
•
$toto
=
1
"149
titi"
;
#
$toto
valoir
150
chaine
valoir
149
(commence
par
valeur
numérique).
type
de
donnée
php
opérateur
de
comparaison
:
•
égal
à
:
$a
==
$b
•
différent
de
:
$a!
!=
$b
•
supérieur
à
:
$a
>
$b
•
inférieur
à
:
$a
<
$b
•
supérieur
égal
à
:
$a
>=
$b
•
inférieur
égal
à
:
$a
<=
$b
exemple
:
echo
$toto
==
0
?
"vrai"
:
"faux"
;
opérateur
php
•
opérateur
–
différents
opérateur
permettre
de
manipuler
valeurs,
qu’ils
être
dans
variables
opérateur
opérateur
opérateur
de
opérateur
logiques
mathématiques
string
comparaison
+
-
*
/
%
.
==!
!=
||
(or)
(concaténation)
<=
<
>=
>
&&
(and)
!
!(
not)
<?php
$a
=
2
3
;
$b
=
4
-
$a
;
$nom
=
"toto”;
echo
"salut
"
.
$nom;
echo
"<p>
4
-
$a
valoir
$b
</p>";
?>
fonction
php
dater
déclaration
:
•
datetime
$date
=
new
datetime('2000-01-05');
•
date_create
:
de
datetime::__construct()
$date2
=
date_create('2000-01-01');
extraction
mois,
année
,
......
:
avec
style
procédural
en
utiliser
date_format
echo
date_format($date,
"m");
avec
style
orienter
objet
(oo)
:
echo
$date->format('y');
fonction
php
dater
exemple
:
•
$date=date(
"d-m-y
");
echo
"
être
date
jour
"
.$date
;
•
$heure
=
date("h:i:s");
echo
"c'est
l’heure
jour
"
.$heure
;
tableau
php
•
tableau
–
variables
capables
d’enregistrer
valeur
d’un
typer
•
tableau
à
indice
:
attention
avoir
définir
–
position
être
identifier
par
position
avant
de
un
numéro
(commençant
par
0)
utiliser
avoir
•
message
d’erreur.
$tableau
[0]
=
"a";
•
$tableau
[1]
=
"b";
•
$tableau
[3]
=
"fin";
•
a
b
fin
suite
$tableau
[
]
=
"suite";
•
tableau
associatifs
:
0
1
2
3
4
–
position
recevoir
identifier
(un
label)
jean
dupont
•
$tableauassoc
["
prenom"]
=
"jean";
•
prenom
nom
$tableauassoc
["
nom"]
=
"dupont"
;
tableau
php
tableau
de
php
ressembler
tableau
associatifs
(
hash-
tables).
•
l’index
être
appeler
clé
•
valeur
associer
à
clé
être
appeler
valeur
déclarer
tableau
de
deux
façon
:
•
utiliser
fonction
array()
pour
créer
tableau
•
affecter
valeur
tableau
php
message
d’erreur
<head>
...
contenir
de
position
2
<style>...
</style>
(
$tableau[2]
)
n’a
</head>
été
définir
auparavant.
<body>
...
<h2>tableaux
à
indice
</h2>
<table>
<?php
$tableau
[0]
=
"a";
$tableau
[1]
=
"b";
$tableau
[3]
=
"fin";
contenir
de
$tableau
[]
=
"suite";
position
4
(
$tableau[4]
)
echo
"
<tr>
<td>
".
$tableau[0]
.
"
</td>
<td>
".
$tableau[1]
.
"
</td>
<td>
"
.
$tableau[2]
.
"
</td><td>
"
.
$tableau[3]
.
"
</td><td>
"
.
$tableau[4]
.
"
</td></tr>
"
;
?>
</table>
...
tableau
php
...
<h2>tableau
associatif
</h2>
<table>
<tr>
<th>
nom
</th>
<th>prénom
</th>
</tr>
<?php
$tableauassoc
["prenom"]
=
"jean";
$tableauassoc
["nom"]
=
"dupont"
;
echo
"<tr>
<td>"
.
$tableauassoc
["nom"]
.
"</td>"
;
echo
"<td>"
.
$tableauassoc
["prenom"]
.
"
</td></tr>"
;
?>
</table>
</body>
tableau
php
fonction
sur
tableau
:
•
sizeof()
:
retourner
nombre
d’éléments
d’un
tableau,
•
count()
:
retourner
nombre
d’éléments
d’un
tableau
s’il
existe,
1
variable
n’est
tableau
0
variable
n’existe
pas.
tableau
php
exemple:
•
$suite
=
array(1,
2,
3,
4)
;
•
$tab[0]
=
1
;
•
$tab[1]
=
"toto"
;
#
pouvoir
mélanger
contenu
•
$tab["chaine"]
=
"
valeur"
;
#
pouvoir
mélanger
clés.
•
$personne
=
array("type"
=>
"m.",
"nom"
=>
"smith")
;
tableau
php
parcourir
tableau
:
<?php
//
créer
array
$prenoms
$prenoms
=
array
('françois',
'michel',
'nicole',
'véronique',
'benoît');
//
faire
boucle
pour
afficher
:
for
($numero
=
0;
$numero
<
5;
$numero++)
{
echo
$prenoms[$numero]
.
'<br
/>';
}
?>
tableau
php
parcourir
tableau
:
<?php
$prenoms
=
array
('françois',
'michel',
'nicole',
'véronique',
'benoît');
foreach($prenoms
avoir
$id
=>
$valeur)
{
echo
"case
($id)
=
$valeur";
}
?>
tableau
php
parcourir
tableau
associatif
:
<?php
$personne
=
array("type"
=>
"m.",
"nom"
=>
"smith")
;
foreach($personne
as
$cle
=>
$valeur)
{
echo
"cle="
.$cle
.“
valeur=
"
.
$valeur
;
}
?>
développement
web
–
php
cours
2
rappel
base
de
données
navigateur
serveur
web
serveur
d’application
front
office
back
office
rappel
navigateur
serveur
web
&
base
de
donnée
apache
front
office
back
office
rappel
•
wamp/mamp/lamp/xamp
:
–
windows/mac/linux/unix
–
apache
=
serveur
web
–
mysql
=
base
de
données
–
php
=
préprocesseur
page
web
rappel
•
communication
entre
«
navigateur
web
»
«
serveur
web
»
faire
avec
protocole
http
get
page.htm
<html>
http://monsite.fr/page.htm
coucou
(get
page.htm)
</html>
coucou
page.htm
navigateur
serveur
web
protocole
pour
transmettre
apache
information
:
http
rappel
•
php
être
extension
à
côté
de
apache
–
apache
configurer
pour
appeler
php
lorsqu’il
voir
passer
requête
terminer
par
«
.php
»
–
php
traiter
fichier
en
question,
produire
réponse
renvoyer
par
apache
<html>
<?php
echo
"b";
?>
</html>
page.php
get
page.php
get
page.php
b
<html>
navigateur
serveur
web
<html>
b
b
</html>
</html>
apache
page.php
page.php
caractéristiques
php
•
langage
typé
–
flexible...
–
...mais
possibilité
de
faire
n’importe
•
langage
interpréter
//
sur
terminal
de
linux
–
cli
disponible
pour
script
//
command
line
interface
•
usage
dans
cours
:
extension
apache
rappel
:
formulaire
html
•
communication
entre
client
(navigateur)
serveur
(php)
–
formulaire
en
html
permettre
de
recueillir
donnée
de
l’utilisateur
•
donnée
être
communiquer
à
programme
–
navigateur
envoyer
donnée
récolter
par
formulaire
serveur
•
programme
(page
php)
récupérer
données
grâce
à
variables
page
php
rappel
:
formulaire
html
•
formulaire
html
être
définir
par
balise
<form
...>
...
</form>
–
élément
être
à
l’intérieur
de
balise
<form
name="
nomformulaire"
action="
page.php"
method="get
|
post"
>
....
</form>
action
:
à
envoyer
donnée
method:
envoyer
donnée
–
champ
formulaire
être
introduire
par
différents
balise
:
•
<
input
type="..."
name="..."
value="...
"
id="..."
/>
•
<
textarea
name="..."
id="..."
cols="..."
rows="..."
>
...
</textarea>
•
<
select
name="..."
id="..."
size="...
"
>
<
option
value="...
"
>
...
</option>
</select>
rappel
:
formulaire
html
<input
type="text"
name="nomclient"
value="votre
nom"
size="40"
maxlength="150"
/>
<select
name="produit">
<option
value="superkdo">
super
kdo
</option>
...
</select>
<textarea
name="opinionclient"
cols="40"
rows="5"
>
opinion
sur
produit
</textarea>
<input
type="reset"
value="nettoyer"
/>
<input
type="submit"
value="envoyer"
/>
input
type="submit"
charger
d’envoyer
donnée
formulaire
rappel
:
formulaire
html
à
donnée
être
envoyer
input
type="text"
zone
de
saisie
select
...
option
liste
de
sélection
d’options
textarea
zone
de
texte
input
type="submit"
input
type="reset"
bouter
d’envoi
de
reset
formulaire
<form
name="formclient"
action="coursphp-7.php"
method="post"
>
<label
for="nom">
nom</label>
<input
type="text"
id="nom"
name="nomclient"
value="votre
nom"
size="40"
maxlength="150"
/>
<br/>
<label>
produit</label>
<select
name="produit">
<option
value="superkdo">
super
kdo</option>
<option
value="megatruc">
mega
truc</option>
<option
value="babyfun">
baby
fun</option>
</select>
<br/>
<label>
opinion</label>
<textarea
name="opinionclient"
cols="40"
rows="5"
>
opinion
sur
produit
</textarea>
<br/>
<input
type="submit"
value="envoyer"
class="bouton"
/>
<input
type="reset"
value="nettoyer"
class="bouton"
/>
</form>
communication
client
-
serveur
•
2
méthode
génériques
d’envoi
de
donnée
:
–
get
:
(query
string)
valeur
passer
via
l’url
par
navigateur
[valeurs
lisibles
dans
l’en-tête
dans
logs
d’accès]
•
http://monsite.fr/mapage.php?var=truc&nom=moi
–
post
:
remplir
formulaire,
navigateur
envoyer
formulaire
dans
«
body
»
de
requête
http
[valeurs
lisibles
«
body
»
de
requête
être
accessible]
•
http://monsite.fr/mapage.php
communication
client
-
serveur
•
donnée
recueillir
dans
formulaire
être
transmettre
programme
indiquer
dans
action=...
•
dans
php,
récupérer
données
grâce
à
deux
tableau
associatifs
spéciaux
–
$_get
->
<form
action="..."
method="get"
>
•
$_get["nom"]
<input
...
name="nom"
/>
–
$_post
->
<form
action="..."
method="post"
>
•
$_post["nom"]
<input
...
name="nom"
/>
communication
c/s
:
get
client
envoyer
donnée
clique
sur
lien
prévu
apache
récupérer
analyser
requête
apache
créer
tableau
contenir
valeur
envoyer
à
php
get
page.php
get
var=42
get
:
http://site.fr/page.php?var=42
var=42
get
/page.php?var=42
<html>
coucou
</html>
navigateur
serveur
web
page.php
apache
communication
c/s
:
get
•
url
de
requête
contenir
valeur
–
formulaire
passer
par
l’url
–
construction
de
propre
url
:
<a
href="http://monsite.fr/page.php?var=bla&x=42&y=0">lien</a>
page.php
page
traiter
requête
var
contenir
«
bla
»
x
contenir
42
contenir
0
«
?
»
séparer
l’adresse
de
ressource
donnée
«
&
»
séparer
donnée
(champs/valeur)
communication
c/s
:
get
•
méthode
get
–
donnée
être
envoyer
dans
l’url
programme
–
limiter
à
256
octet
<form
name="formget"
–
déconseiller
action="coursphp-8.php"
method="get">
<label>nom</label>
<input
type="text"
name="client"
size="20"
/>
<br/>
<label>mot
de
passe
</label>
<input
type="password"
name="mdp"
size="10"/>
<br/>
<input
type="submit"
value="envoyer"
/>
</form>
<?php
echo
"<p>bienvenue,
<i>".
$_get["client"]
.
"</i>!
!</p>";
?>
communication
c/s
:
get
1
-
lancer
programme
écouter
requête
envoyer
sur
propre
machine
(localhost),
sur
port
5000
2
-
créer
formulaire
envoyer
donnée
avec
méthode
get,
vers
page
de
machine
sur
port
5000
communication
c/s
:
get
3
–
remplir
formulaire
avec
valeurs,
cliquer
sur
«
envoyer
»
4
–
navigateur
envoyer
requête
get
serveur
(localhost)
avec
l’ensemble
variables
dans
l’url
communication
c/s
:
get
5
–
depuis
programme
«
serveur
»
écrire
réponse
6
–
navigateur
récupérer
réponse,
considérer
qu’il
s’agit
de
ressource
viser
par
url
avec
variables
valeur
6
–
navigateur
commencer
à
récupérer
réponse
communication
c/s
:
get
7
–
depuis
programme
«
serveur
»,
terminer
réponse
(ctrl
d)/ferme
connexion
8
–
navigateur
voir
connexion
fermer,
considérer
donnée
qu’il
avoir
récupérer
constituer
réponse
entière,
l’affiche
communication
c/s
:
get
(logs)
1
–
aller
regarder
«
logs
»
de
apache
(les
journaux
enregistrer
transaction
serveur
web
avoir
traité)
2
–
navigateur
demander
page
contenir
formulaire
serveur
3
–
navigateur
envoyer
formulaire
par
l’url...
voir
valeur
dans
requête
get
enregistrer
communication
c/s
:
post
client
remplir
formulaire
déclencher
requête
apache
récupérer
analyser
requête
apache
créer
tableau
contenir
valeur
envoyer
à
php
get
page.php
post
name=flo
post
:
http://site.fr/page.php
name=flo
post
name=flo
name
:
flo
<html>
coucou
</html>
navigateur
serveur
web
page.php
apache
communication
c/s
:
post
<form
name="formclient"
action="coursphp-7.php"
method="post"
>
<label
for="nom">nom</label>
<input
type="text"
id="nom"
name="nomclient"
value="votre
nom"
size="40"
maxlength="150"
/>
<br/>
...
<?php
$nom
=
$_post["nomclient"];
$op
=
$_post["opinionclient"];
$prod
=
$_post["produit"];
echo
"<p>merci
de
participation,
$nom!
!</p>";
echo
"<p>votre
produire
être
:
<i>
$prod
</i>
</p>";
echo
"<p>
opinion
être
:
<i>
$op
</i>
</p>";
?>
communication
c/s
:
post
-
html
•
exemple
<form
name="..."
action="coursphp-9.php"
method="post">
<fieldset>
<legend>
donnée
</legend>
<label
>...</label>
<
input
type="text"
name="nom"
...
/>
<br/>
<label
>...</label>
<
input
type="email"
name="email"...
/><br/>
<input
type="radio"
name="sexe"
value="homme"
/>
homme
<input
type="radio"
name="sexe"
value="femme"
/>
femme<br/>
</fieldset>
<fieldset>
<legend>
produit
</legend>
<label>...</label>
<select
name="produit">
<option
value="superkdo">...</option>
<option
value="megatruc">
mega
truc</option>
<option
value="babyfun">
...
</option>
</select>
<br/>
<label>...</label>
<textarea
name="opinion"
...
>
...
</textarea>
</fieldset>
communication
c/s
:
post
-
php
•
exemple
<body>
<h1>récapitulatif
</h1>
<ul>
<?php
echo
"<li>
nom
:
"
.
$_post["nom"]
.
"</li>"
;
echo
"<li>
email
:
"
.
$_post["email"]
.
"</li>"
;
echo
"<li>
sexe
:
"
.
$_post["sexe"]
.
"</li>"
;
echo
"<li>
produire
préférer
:
"
.
$_post["produit"]
.
"</li>"
;
echo
"<li>
suggestion
:
"
.
$_post["opinion"]
.
"</li>"
;
?>
</ul>
</body>
communication
c/s
:
post
1
-
lancer
programme
écouter
requête
envoyer
sur
propre
machine
(localhost),
sur
port
5000
2
-
créer
formulaire
envoyer
donnée
avec
méthode
post,
vers
page
de
machine
sur
port
5000
communication
c/s
:
post
3
–
remplir
formulaire
avec
valeurs,
cliquer
sur
«
envoyer
»
4
–
navigateur
envoyer
requête
post
serveur
(localhost)
en
viser
ressource
/index.php,
inclure
l’ensemble
variables
dans
corps
(body)
de
requête
http
communication
c/s
:
post
5
–
depuis
programme
«
serveur
»
écrire
réponse
6
–
navigateur
récupérer
réponse,
considérer
qu’il
s’agit
6
–
navigateur
d’une
réponse
possible
accessible
à
commencer
à
récupérer
url
l’on
envoyer
réponse
donner
en
post
communication
c/s
:
post
8
–
navigateur
voir
connexion
fermer,
considérer
donnée
qu’il
avoir
récupérer
constituer
réponse
entière,
l’affiche
7
–
depuis
programme
«
serveur
»,
terminer
réponse
(ctrl
d)/ferme
connexion
communication
c/s
:
post
(logs)
1
–
aller
regarder
«
logs
»
de
apache
(les
journaux
enregistrer
transaction
serveur
web
avoir
traité)
2
–
navigateur
demander
page
contenir
formulaire
serveur
3
–
navigateur
envoyer
formulaire
en
post,
voir
nom
de
variable
valeur
dans
logs
d’apache!
!
statut
http
•
requête
envoyer
=
réponse
reçue
•
réponse
http
de
5
type
(officiels)
:
–
1xx
:
informationnelle
–
2xx
:
succès
–
3xx
:
redirection
–
4xx
:
erreur
côté
client
//
404
:
url
n’existe
–
5xx
:
erreur
côté
serveur
–
[autres
erreur
être
lier
serveur
web
utilisé]
statut
http
:
classique
200
ok
requête
avoir
être
reçue,
comprise,
exécuter
301
308
permanent
redirect
ressource
avoir
être
déplacer
à
autre
url
302
307
temporary
redirect
ressource
être
déplacer
à
autre
url
403
forbidden
requête
être
correcte,
client
n’a
droit
de
demander
serveur
de
faire
action
404
not
found
ressource
viser
par
l’url
n’a
être
trouver
500
internal
server
error
erreur
générique/non
spécifique...
serveur
web
avoir
échouer
chose
à
moment
502
bad
gateway
serveur
web
viser
n’arrive
à
contacter
serveur
traiter
requête
envoyer
statut
http
:
200
statut
http
1
–
envoyer
requête
serveur
«
localhost
»
sur
port
8888,
en
demander
ressource
‘/’
2
–
apache
répondre
dans
l’en-tête
de
réponse
http
aller
(ok)
:
code
200
2
–
apache
envoyer
page
web
demander
dans
corps
(body)
de
réponse
statut
http
:
404
statut
http
1
–
envoyer
requête
serveur
«
localhost
»
sur
port
8888,
en
demander
ressource
n’existe
2
–
apache
répondre
dans
l’en-tête
de
réponse
http
ressource
n’a
être
trouver
:
code
404
2
–
apache
envoyer
dans
corps
de
réponse
http
page
web
détailler
l’erreur
client
(au
format
html
client
pouvoir
lire)
statut
http
:
400
statut
http
1
–
envoyer
requête
incorrecte
(protocole
inexistant)
serveur
«
localhost
»
sur
port
8888
2
–
apache
répondre
dans
l’en-tête
de
réponse
http
requête
être
incorrecte
(elle
respecter
standard
qu’il
connait)
2
–
apache
envoyer
dans
corps
de
réponse
http
page
web
détailler
l’erreur
client
(au
format
html
client
pouvoir
lire)
php
:
contrôle
de
flot
•
instruction
de
contrôle
–
instruction
pour
gérer
flot
d’exécution
–
instruction
conditionnelles
•
conditionner
l’exécution
•
semblables
à
nœud
de
décision
(diagramme
activités)
•
if...
else
...,
switch
...
case
...
–
instruction
de
boucle
•
permettre
répétition
d’un
bloc
d’instructions
•
for
...
,
foreach
...
,
while
...
,
do...
while
php
:
if
...
else
...
•
instruction
conditionnelles
if
...
else...
if
(
condition
)
{
bloc
d’instructions
vrai
;
}
else
{
bloc
d’instructions
faux
;
}
[
condition
vrai
]
bloc
d’instructions
vrai
optionnel
[
]
bloc
d’instructions
faux
if
(
$qte
>=
100)
{
$remise
=
0.10;
/*
remettre
de
10
%
offrir
*/
echo
"<p>vous
avoir
remise
de
10%!
!</p>";
}
else
{
...
$remise
=
0.05;
echo
"<p>vous
avoir
remise
de
5%
</p>";
php
:
if
...
else
...
•
instruction
conditionnelles
if
...
else...
–
donnée
pour
condition
pouvoir
venir
d’un
formulaire
formexemple11.html
<form
name="..."
method="post"
action="coursphp-11.php"
>
...
<select
name="prix">
<option
value="10">
super
kdo
-
10€
</option>
...
</select>
...
<input
type="number"
size="10"
name="qte"
/>
...
<input
type="submit"
value="devis"
/>
</form>
coursphp-11.php
<?php
$qte
=
$_post["qte"];
$prixunit
=
$_post["prix"];
$remise
=
0;
if
(
$qte
>=
100)
{
$remise
=
0.10;
/*
remettre
de
10
%
offrir
*/
echo
"<p>vous
avoir
remise
de
10%!
!</p>";
}
$prix
=
$prixunit
*
$qte
-
($prixunit
*
$qte
*
$remise);
echo
"
<p>
pour
prix
de
<i>
$prixunit
</i>
l'unité
<i>
$qte
</i>
unités,
avoir
à
régler
<i>
$prix
</i></p>";
?>
php
:
if
...
else
...
<form
name="..."
method="post"
action="coursphp-11.php"
>
<label>produit
:
</label>
<select
name="prix">
<option
value="10"
>
super
...
</option>
...
</select>
<br/>
<label
>quantité
:
</label>
<input
name="qte"
type="number"
size="10"
/>
<br/>
<input
type="submit"
value="devis"
/>
</form>
<?php
$qte
=
$_post["qte"];
$prixunit
=
$_post["prix"];
$remise
=
0;
....
if
(
$qte
>=
100)
{
$remise
=
0.10;
echo
"<p>vous
avoir
....
</p>";
}
...
?>
php
:
if
...
elseif
...
else
...
•
instruction
conditionnelles
if
...
else
...
–
bloc
if
...
else
...
pouvoir
contenir
n’importe
instruction,
comprendre
d’autres
bloc
if
...
else
...
if
(
condition1
)
{
bloc
d’instructions
condition1
vraie
;
}
elseif
(condition2)
{
bloc
d’instructions
condition2
vraie
;
}
else
{
bloc
d’instructions
condition
être
fausses
;
}
<form
name="..."
method="post"
action="coursphp-12.php"
>
...
<select
name="prix">
...
</select>
...
<input
type="number"
...
name="qte"/>
...
<input
type="submit"
value="devis"
/>
</form>
<?php
$qte
=
$_post["qte"];
$prixunit
=
$_post["prix"];
if
(
$qte
>=
100)
{
$remise
=
0.10
;
}
elseif
(
$qte
>=
50
)
{
$remise
=
0.05
;
}
else
{
$remise
=
0
;
}
$prix
=
$prixunit
*
$qte
-
($prixunit
*
$qte
*
$remise)
;
echo
"
<p>
prix
unitaire
:
<i>
$prixunit
</i>,
quantité
:
<i>
$qte
</i>,
remettre
:
<i>"
.
$remise*100
.
"</i>
%
</p>"
;
echo
"<p><i>total
à
régler
:
</i>
<b>
$prix
</b></p>";
44
?>
php
:
for
...
•
instruction
de
boucle
:
for
–
boucle
for
permettre
de
répéter
(un
nombre
de
fois)
l’exécution
d’un
bloc
d’instructions
for
(
initialisation
;
condition
;
incrémentation
)
{
bloc
d’instructions
à
répéter
;
}
$i
=
1
[
i
<=
6
]
echo
...
i++
[
else
]
suite...
$i++
->
$i
=
$i
+
1
for
(
$i
=
1
;
$i
<=
6
;
$i++)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
}
php
:
for
...
•
instruction
de
boucle
:
for
<?php
for
(
$i
=
1
;
$i
<=
6
;
$i++)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
}
?>
php
:
while
...
•
instruction
de
boucle
:
while
–
boucle
while
permettre
de
continuer
à
réaliser
bloc
d’opérations
qu’une
condition
être
vraie
$i
=
1
[
i
<=
6
]
echo
...
$i
=
$i
+
1
;
[
else
]
suite...
$i
=
1
;
while
(
$i
<=
6
)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
$i
=
$i
+
1;
}
php
:
while
...
•
instruction
de
boucle
:
while
donner
valeur
initiale
à
variable
$i
$i
dépasser
valeur
6
mettre
à
jour
valeur
de
variable
$i
<?php
$i
=
1
;
while
(
$i
<=
6
)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
$i
=
$i
+
1;
}
?>
php
:
foreach
...
•
instruction
de
boucle
:
foreach
–
boucle
foreach
permettre
de
répéter
bloc
d’instructions
pour
valeur
dans
tableau
$tableau
[
reste-t-il
valeur
?
]
$titre
recevoir
prochaine
valeur
echo
...
[
de
valeur
dans
tableau
]
suite...
foreach
($tableau
avoir
$titre
)
{
echo
"<$titre>
titre
$titre
</$titre>";
}
php
:
foreach
...
•
instruction
de
boucle
:
foreach
définir
tableau
pour
valeur
dans
tableau
<?php
$tableau
=
array("h1",
"h2",
"h3",
"h4",
"h5",
"h6");
foreach
($tableau
avoir
$titre
)
{
echo
"<$titre>
titre
$titre
</$titre>";
}
?>
php
:
foreach
...
•
instruction
de
boucle
:
foreach
–
fonctionner
pour
tableau
associatifs
définir
tableau
associatif
:
clé
=>
valeur
pour
pair
$clé
=>
$valeur
dans
$tableau
<?php
$tableau
=
array
("nom"
=>
"dupont"
,
"prenom"
=>
"jean"
,
"adresse"
=>
"qq
part
à
paris"
)
;
foreach
($tableau
avoir
$cle=>$valeur)
{
echo
"<li>
$cle
:
$valeur
</li>"
;
}
?>
php
:
boucle
•
instruction
de
boucle
:
boucler
imbriquer
–
être
possible
d’imbriquer
boucle
un
dans
autres
<table>
<?php
for
(
$lin
=
1
;
$lin
<=
9
;
$lin++)
{
echo
"<tr>
";
for
(
$col
=
1
;
$col
<=
9
;
$col++)
{
echo
"<td>
"
.
($col
*
$lin)
.
"
</td>"
;
}
echo
"</tr>";
}
?>
</table>
52
evaluation
etudiants
date
typer
description
binôme
s05
(19/02)
[dm]
devoir
maison
1
mini
projet
à
rendre
par
mail
(25/02
–
23h42)
oui
s10
(02/04)
[dst]
devoir
sur
table
1
examen
écrire
sans
document
machiner
50%
s12
(16/04)
[proj]
projet
présentation
projet
oui
mai
partiel
1
examen
écrire
sans
document
machiner
50%
php
:
fonction
•
fonction
–
php
offrir
large
panoplie
de
fonction
•
exemple
:
isset($var)
à
true
$var
avoir
être
déclarer
•
exemple
:
empty($var)
à
true
$var
être
vide
(ou
valoir
0)
–
pouvoir
écrire
(même
en
dehors
classes)
•
function
nomfonction
($paramètre
,
...
)
{
instruction
}
function
salutation
(
$nom
)
{
echo
"<h1>bienvenue,
$nom!
!</h1>";
echo
"<p
class=droite>aujourd'hui,
sommes
"
.date('d
/
m
/
y').
"</p>"
;
}
php
...
<form
name="..."
method="post"
action="coursphp-15.php"
>
<label
>nom
:
</label>
<input
type="text"
name="client"
size="25"/>
...
<input
type="submit"
value="ok"
/>
</form>
<?php
function
salutation
(
$nom
)
{
date_default_timezone_set("europe/paris");
echo
"<h1>bienvenue,
$nom!
!</h1>";
echo
"<p
class=droite>aujourd'hui..."
.
date('d
/
m
/
y').
"</p>"
;
}
if
(
isset
($_post["client"])
and
!
!empty
($_post["client"])
)
{
salutation
(
$_post["client"]
)
;
}
else
{
salutation
("cher
client")
;
}
?>
visibilité
variables
en
php
exister
3
niveau
de
visibilité
d’une
variables
selon
contexte
:
•
variables
superglobales
:
être
disponibles
n'importe
dans
programme.
•
variables
globales
:
être
variables,
tableaux,
objet
constantes
créer
nous-même
dans
programme
principal.
être
visibles
dans
programme
principal.
•
variables
local
:
être
variables
d'une
fonction
(paramètres
compris).
visibilité
n'est
locale,
programme
principal
pouvoir
agir
sur
variables.
porter
variables
globales
•
en
php,
variable
globale
pouvoir
être
utiliser
à
l’intérieur
d’une
fonction
sans
passer
en
paramètre
–
usage
mot
clé
«
global
»
–
variable
devoir
être
déclarer
avec
«
global
»
dans
fonction
être
nécessaire
porter
variables
globales
<?php
$a
=
1;
$b
=
2;
function
somme()
{
global
$a,
$b;
$b
=
$a
$b;
echo
«
».$b;
}
somme();
somme();
?>
avoir
déclarer
$a
$b
avec
mot
clé
«
global
»
à
l’intérieur
de
somme
pour
qu’elles
être
manipuler
par
celle-ci.
porter
variables
globales
•
autre
méthode
pour
accéder
variables
globales
être
d'utiliser
superglobale
$globals
:
<?php
$a
=
1;
$b
=
2;
function
somme()
{
$globals['b']
=
$globals['a']
$globals['b'];
echo
$globals['b']
;
}
?>
variables
superglobales
•
variables
superglobales
être
générer
par
php
:
–
être
disponibles
contexte
script
(même
à
l’intérieur
d’une
fonction
sans
être
passer
en
paramètre
de
celle-ci)
–
être
écrire
en
majuscules
commencent,
par
underscore
«
_
»
–
être
tableau
associatifs
variables
superglobales
•
$globals
:
rassembler
variables
globales.
•
$_env
:
être
variables
d'environnement
donner
par
serveur.
•
$_session
:
être
variables
de
session.
variables
rester
stocker
sur
serveur
temps
de
présence
d'un
visiteur.
•
$_cookie
:
contenir
valeur
cookies
enregistrer
sur
l'ordinateur
visiteur.
•
$_get
:
contenir
donnée
envoyer
en
paramètre
dans
l'url.
•
$_post
:
contenir
information
venir
d'être
envoyer
par
un
formulaire.
variables
superglobales
<html><head>
<title>la
variable
$_server</title>
</head><body>
<?php
echo
'nom
fichier
en
cours
d\'execution
'
.
'a
partir
de
racine
:
'
.
$_server['php_self'];
echo
'<br/>'
;
echo
'nom
de
racine
script
:
'
.
$_server['document_root']
;
echo
'<br/>';
echo
'nom
client
html
:
'
.
$_server['http_user_agent']
.
'<br>';
echo
'nom
serveur
execute
script
:
'
.
$_server['server_name']
;
echo
'<br/><br/>';
echo
'votre
adresse
ip
être
:
'
.
$_server['remote_addr']
;
?>
</body></html>
fonction
avancer
•
fonction
avancer
php
(serveur)
–
===,
isset,
empty,
is_nul
–
include,
require,
include_once,
require_once
–
...
•
fonction
avancée
http
(client)
–
header()
php
:
fonction
avancer
<?php
$var1
=
42;
$var2
=
"42";
$var3
=
"42
";
$var4
=
"
42";
echo(($var1
==
$var2)."#");
echo(($var1
==
$var3)."#");
echo(($var1
==
$var4)."#");
echo(($var1
===
$var2)."#");
echo(($var1
===
$var3)."#");
echo(($var2
==
$var3)."#");
?>
php
typer
:
==
comparer
valeur
===
comparer
valeur
type
true
==
1
false
==
0
1#
1#
1#
#
#
#
php
:
fonction
avancer
•
importation
fichier
•
incorporer
contenu
d’un
fichier
dans
page
php
•
but
:
réutilisation
fichiers,
uniformisation
site
–
include
"fichier"
include_once
"fichier"
•
include
remplacer
ligne
par
contenu
fichier
•
include_once
faire
seule
fois
(même
dans
boucle)
–
require
"fichier"
require_once
"fichier"
•
include,
fichier
n’existe
pas,
avoir
erreur
php
:
fonction
avancer
<meta
charset="utf-8"
/>
...
<title>mon
site</title>
<link
rel="stylesheet"
href="css/blocs.css"
/>
<header>
<h1>mon
site</h1>
</header>
<nav>
<h2>exemples
</h2>
<ul>
<li>...</li>
...
</ul>
</nav>
<head>
<?php
include_once
"head.html";
require
"mesfonctions.php"
;
?>
</head>
<body>
<?php
include_once
"headernav.html";
?>
...
<?php
salutation
("cher
client")
;
?>
<article>
<h2>
news
</h2>
<p>
...
</p>
</article>
...
<?php
function
salutation
(
$nom
)
{
echo
"<p
class=droite><b>bienvenue,
$nom!
!</b></p>";
echo
"<p
class=droite>aujourd'hui,
sommes
"
.date('d
/
m
/
y').
"</p>"
;
}
?>
php
include_once
"head.html"
include_once
"headernav.html";
require
"mesfonctions.php"
;
salutation
("cher
client")
;
<head>
...
<title>mon
site</title>
<link
rel="stylesheet"
href="css/blocs.css"
/>
</head>
<body>
<header>
<h1>mon
site</h1>
</header>
<nav>
<h2>exemples
</h2>
<ul>
<li>...</li>
...
</ul>
</nav>
<section>
<p
class=droite><b>bienvenue,
cher
client!
!</b></p><p
class=droite>aujourd'hui,
sommes
22/
03
/
2014
</p>
...
php
:
fonction
avancer
•
gettype($var)
:
retourner
type
de
variable
•
addslashes()
:
ajouter
antislashs
devant
caractère
spéciaux
$res
=
addslashes("l'a");
//
retourne
l\’a.
•
strstr(texte,
chaineachercher)
:
trouver
premier
occurrence
dans
chaîne
$email
=
'name@example.com';
$domain
=
strstr($email,
'@');
echo
$domain;
//
affiche
:
@example.com
php
:
fonction
avancer
•
htmlspecialchars
(chaine,
flags)
:
conversion
caractère
spéciaux
en
entité
html.
remplacer
par
exemple
&
(et
commercial)
en
&amp;
exemple
de
flag
être
ent_quotes
convertir
guillemet
doubles
guillemet
simples.
$str
=
"this
is
some
<b>
bold
</b>
text.";
echo
htmlspecialchars($str);
//
afficher
:
this
is
some
&lt;b&gt;
bold
&lt;/b&gt;
text.
php
:
fonction
avancer
•
strip_tags
(chaine,
allowabletags)
:
supprimer
balise
html
php
d'une
chaîne.
commentaire
html
php
être
supprimer
comportement
pouvoir
être
modifier
avec
paramètre
allowabletags
$text
=
‘
<p>paragraph.</p><!
!--
--><a
href="#fragment">other
text</a>
';
//
autoriser
<p>
<a>
echo
strip_tags($text,
'<p><a>');
//
afficher
:
//
<p>paragraph.</p>
<a
href="#fragment">other
text</a>
php
:
fonction
avancer
•
strlen()
:
retourner
longueur
de
chaîne
•
strtolower()
:
passer
caractère
en
minuscules
•
strtoupper()
:
passer
caractère
en
majuscules
•
strpos(texte,
chaine)
:
rechercher
position
de
premier
«
chaine
»
trouver
php
:
fonction
avancer
•
trim()
:
effacer
espace
blancs
début
à
fin
d’une
chainer
•
ereg(chaine,
texte)
:
recherche
dans
texte
,
séquence
caractère
«
chaine
».
retourner
longueur
de
l'occurrence
trouver
occurrence
avoir
être
trouver
dans
chaîne
string,
false
dans
cas
contraire
erreur
être
survenue.
if
(
ereg("bcd",
"abcdef")
)
{
echo
"oui";
}
else
{
echo
"non";
}
php
:
fonction
avancer
•
isset($var1,
$var2,
...)
:
déterminer
variable
être
définir
être
différentes
de
null
•
unset($var1,$var2,...)
:
détruire
variables
•
empty($var)
:
déterminer
variable
être
vide
php
:
fonction
avancer
•
variable
déclarer
variable
vide
être
pareilles...
false
=
0
true
=
1
-1
1-
1-1
-1
<?php
echo(isset($var)
.
"-"
.
empty($var)
.
"<br>");
$var
=
42;
echo(isset($var)
.
"-"
.
empty($var)
.
"<br>");
$var
=
"";
echo(isset($var)
.
"-"
.
empty($var)
.
"<br>");
unset($var);
echo(isset($var)
.
"-"
.
empty($var)
.
"<br>");
?>
php
:
fonction
avancer
$var
isset
empty
($var
déclarée)
(0)
faux
(1)
vrai
42
(1)
vrai
(0)
faux
«
»
(1)
vrai
(1)
vrai
(unset
$var)
(0)
faux
(1)
vrai
php
:
fonction
avancer
•
valeur
«
null
»
disponible,
signifier
variable
exister
•
null!
!=
empty
<?php
echo
(is_null($var)
.
"-"
.
empty($var)
.
";;");
$var=0;
echo
(is_null($var)
.
"-"
.
empty($var)
.
";;");
$var="";
echo
(is_null($var)
.
"-"
.
empty($var)
.
";;");
$var
=
null;
echo
(is_null($var)
.
"-"
.
empty($var)
.
";;");
?>
php
notice:
undefined
variable:
var
in
standard
input
code
line
2
1-1
;;
-1
;;
-1
;;
1-1
php
:
fonction
avancer
$var
is_null
empty
($var
déclarée)
(1)
vrai*
(1)
vrai
0
(0)
faux
(1)
vrai
«
»
(0)
faux
(1)
vrai
null
(1)
vrai
(1)
vrai
*
:
is_null()
déclencher
alerte
(php
notice)
variable
n’a
être
allouer
php
:
fonction
avancer
•
array_values(array)
:
retourner
valeur
d'un
tableau
–
dans
tableau
(utile
pour
vider
case
vides)
•
array_keys(array,
valeur)
:
retourner
clé
associer
à
«
valeur
»
–
valeur
n’est
spécifier
retourne
clé
tableau
(utile
pour
connaître
clé
possibles)
php
:
fonction
avancer
•
array_values(array)
:
retourner
valeur
d'un
tableau
–
dans
tableau
0
-
42
;;
1
-
42
;;
2
-
9
;;
5
-
42
;;
8
-
6
0
-
42
;;
1
-
42
;;
2
-
9
;;
3
-
42
;;
4
-
6
<?php
$tab[0]
=
42;
$tab[1]
=
42;
$tab[2]
=
9;
$tab[5]
=
42;
$tab[8]
=
6;
$var1=array_values($tab);
foreach($tab
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
echo
"<br>";
foreach($var1
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
?>
php
:
fonction
avancée
prenom
-
jean
;;
nom
-
martin
;;
prenom2
-
olivier
;;
prenom3
-
jean
0
-
jean
;;
1
-
martin
;;
2
-
olivier
;;
3
-
jean
<?php
$tab["prenom"]
=
"jean";
$tab["nom"]
=
"dupont";
$tab["prenom2"]
=
"olivier";
$tab["prenom3"]
=
"jean";
$tab["nom"]
=
"martin";
$var1=array_values($tab);
foreach($tab
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
echo
"<br>";
foreach($var1
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
?>
php
:
fonction
avancer
•
array_keys(array,
valeur)
:
retourner
clé
associer
à
«
valeur
»
–
valeur
n’est
spécifier
retourne
clé
tableau
0
-
prenom
;;
1
-
prenom3
;;
<?php
$tab["prenom"]
=
"jean";
$tab["nom"]
=
"dupont";
$tab["prenom2"]
=
"olivier";
$tab["prenom3"]
=
"jean";
$tab["nom"]
=
"martin";
$var1=array_keys($tab,
"jean");
foreach($tab
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
echo
"<br>";
foreach($var1
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
?>
php
:
fonction
avancer
•
array_keys(array,
valeur)
:
retourner
clé
associer
à
«
valeur
»
–
valeur
n’est
spécifier
retourne
clé
tableau
0
-
prenom
;;
1
-
nom
;;
2
-
prenom2
;;
3
-
prenom3
;;
<?php
$tab["prenom"]
=
"jean";
$tab["nom"]
=
"dupont";
$tab["prenom2"]
=
"olivier";
$tab["prenom3"]
=
"jean";
$tab["nom"]
=
"martin";
$var1=array_keys($tab);
foreach($tab
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
echo
"<br>";
foreach($var1
avoir
$id
=>
$val)
{
echo
"$id
-
$val
;;
";
}
?>
php
:
fonction
avancer
•
in_array(valeur,
array)
:
vérifier
valeur
appartenir
à
tableau
•
array_key_exists(key,
array)
:
vérifier
clé
exister
dans
tableau
php
:
fonction
avancer
true
=
1
false
=
0
1
-
1
-
-
<?php
$tab["prenom"]
=
"jean";
$tab["nom"]
=
"dupont";
$tab["prenom2"]
=
"olivier";
$tab["prenom3"]
=
"jean";
$tab["nom"]
=
"martin";
$var1=in_array("jean",
$tab);
$var2=array_key_exists("nom",
$tab);
$var3=in_array("a",
$tab);
$var4=array_key_exists("a",
$tab);
echo
"$var1
-
$var2
-
$var3
-
$var4";
?>
php
:
fonction
avancée
http
•
en
php,
fonction
header()
charger
d'envoyer
client
en-tête
passer
en
paramètre
•
règle
importante
:
l'appel
à
‘header()’
devoir
faire
avant
envoi
navigateur
–
attention
includes
écrire
chose...
–
écrire
de
<html>
voir
l’on
être
dans
en-tête
http
html!
!
php
:
fonction
avancée
http
•
pouvoir
utiliser
fonction
«
header()
»
pour
envoyer
code
http
:
<?php
header("http/1.0
404
not
found");
?>
<?php
header("status:
301
moved
permanently",
false,
301);
header('location:
http://www.votresite.com/
pageprotegee.php');
?>
php
:
fonction
avancée
http
header
http
renvoyer
par
apache...
...donc
pouvoir
modifier
avec
fonction
«
header()
»
php
:
fonction
avancée
http
•
pour
créer
redirection
avec
php,
utiliser
header
pour
envoyer
en-tête
de
type
location
(adresse)
•
script
de
redirection
(http
302)
:
<?php
header('location:
http://monsite.com/page.php');
?>
php
:
fonction
avancée
http
•
pouvoir
envoyer
fichier
jouer
avec
d’autres
champ
http
«
content-
type
»
–
«
content-type
»
indiquer
type
de
donnée,
navigateur
essayer
d’utiliser
l’outil
préférer
de
l’utilisateur
pour
lire
fichier
•
readfile()
permettre
d’envoyer
fichier
php
:
fonction
avancée
http
serveur
web
déclarer
en
header
qu’il
s’agit
de
«
text/html
»,
texte
interprétable
par
navigateur
lisible
par
l’utilisateur.
navigateur
l’affiche
donc.
php
:
fonction
avancée
http
serveur
web
déclarer
en
header
qu’il
s’agit
de
«
image/jpeg
»,
d’une
image
format
jpeg.
texte
n’en
être
pas,
être
impossible
d’afficher
image,
navigateur
essayer
de
même
php
:
fonction
avancée
http
serveur
web
déclarer
en
header
qu’il
s’agit
de
«
video/mp4
»,
d’une
vidéo
format
mp4.
texte
n’en
être
pas,
être
impossible
d’afficher
vidéo,
navigateur
essayer
de
de
lire
avec
lecteur
de
vidéo
php
:
fonction
avancée
http
serveur
web
déclarer
en
header
qu’il
s’agit
de
«
application/octet-
stream
»,
d’un
flux
d’octets.
par
défaut,
navigateur
proposer
de
télécharger
fichier
associer
de
l’afficher
php
:
fonction
avancée
http
<?php
//
declare
pdf
header('content-type:
application/pdf');
//
client
voir
fichier
"downloaded.pdf"
header('content-
disposition:
attachment;
filename="downloaded.pdf"');
//
fichier
serveur
web
être
transmettre
readfile('original.pdf');
?>
php
:
fonction
avancée
http
<?php
$file
=
'monkey.gif';
if
(file_exists($file))
{
header('content-description:
file
transfer');
header('content-type:
application/octet-stream');
header('content-
disposition:
attachment;
filename="'.basename($file).'"');
header('expires:
0');
header('cache-control:
must-revalidate');
header('pragma:
public');
header('content-length:
'
.
filesize($file));
readfile($file);
exit;
}
?>
développement
web
–
php
cours
3
rappel
:
architecturer
générale
base
de
données
navigateur
serveur
web
serveur
d’application
front
office
back
office
rappel
:
architecturer
générale
navigateur
serveur
web
&
base
de
donnée
apache
front
office
back
office
rappel
:
serveur
web
•
communication
entre
«
navigateur
web
»
«
serveur
web
»
faire
avec
protocole
http
http://monsite.fr/page.htm
(get
page.htm)
get
page.htm
<html>
coucou
</html>
coucou
page.htm
navigateur
serveur
web
apache
protocole
pour
transmettre
information
:
http
rappel
:
serveur
web
•
communication
entre
client
serveur
faire
avec
méthode
get
post
•
get
:
passage
d’informations
par
l’url,
par
requête
•
post
:
passage
d’information
par
contenu
de
requête
rappel
:
serveur
web
•
requête
envoyer
=
réponse
reçue
•
réponse
http
de
5
type
(officiels)
:
–
1xx
:
informationnelle
–
2xx
:
succès
–
3xx
:
redirection
–
4xx
:
erreur
côté
client
–
5xx
:
erreur
côté
serveur
–
[autres
erreur
être
lier
serveur
web
utilisé]
rappel
:
serveur
web
•
header
http
permettre
de
déclarer
type
de
donnée
transmettre
–
content-type:
text/html
–
content-type:
application/pdf
–
content-type:
application/octet-stream
–
content-type:
video/mp4
•
navigateur
web
avoir
paramètre
personnalisables
pour
choisir
programme
externe
(ou
pas)
selon
type
de
données
rappel
:
php
•
php
être
extension
à
côté
de
apache
–
apache
configurer
pour
appeler
php
lorsqu’il
voir
passer
requête
terminer
par
«
.php
»
–
php
traiter
fichier
en
question,
produire
réponse
renvoyer
par
apache
<html>
<?php
echo
"b";
?>
</html>
page.php
get
page.php
get
page.php
navigateur
serveur
web
apache
<html>
b
<html>
page.php
<html>
b
</html>
page.php
rappel
:
php
•
langage
typé
–
flexible...
–
...mais
possibilité
de
faire
n’importe
•
langage
interpréter
–
cli
disponible
pour
script
•
usage
dans
cours
:
extension
apache
sgbd
&
bdd
•
sgbd
:
système
de
gestion
de
base
de
données
[dbms
:
database
management
system]
•
bdd
:
base
de
données
[db
:
database]
sgbd
&
bdd
cours
id
nom
prenom
1
jaffal
ali
2
boissier
fabrice
•
bdd
:
donnée
organiser
dans
conteneur
table
:
personne
•
sgbd
:
système
select
*
from
logiciel
gérer
base
de
donnée
1:jaffal:ali
;
2:boissier:fabrice
;
sgbd
&
bdd
•
qu’est
qu’un
sgbd
?
«
c’est
un
logiciel
système
destiner
à
stocker
à
partager
information
dans
base
de
données,
en
garantir
qualité,
pérennité
confidentialité
informations,
en
cacher
complexité
opérations.»
wikipedia
parmi
logiciel
connus,
trouver
:
mysql,
postgresql,
sqlite,
oracle
mariadb.
pour
liste
détailler
sgbd,
consulter
lien
http://fadace.developpez.com/sgbdcmp/#li
sgbd
&
bdd
•
«
avant
»
:
organiser
soi-même
disque
fichier,
coder
bout
de
programme
spécifique
pour
naviguer
dedans
(et
effectuer
lectures/écritures)
bdd
(search
for
«
handle
»
description)
get
/car/door/handle/description
[seek
disc
1,
track
4,
block
2
&
extract
2
blocks]
application
sgbd
&
bdd
•
aujourd’hui
:
usage
d’un
piloter
logiciel
effectuer
transaction
avec
sgbd
–
api,
bibliothèque,
...
extension
permettre
de
mettre
sql
dans
langage
de
programmation,
de
récupérer
tableau
réponse
select
*
from
connecteur
(api,
extension,
...)
1:jaffal:ali
;
2:boissier:fabrice
;
serveur
web
sgbd
php
&
sgbd
:
connecteur
$sql
=
"select
*
from
personne";
$res
=
mysqli->query($sql);
$line
=
$res->fetch_object();
echo
$line->nom;
page.php
select
*
from
get
page.php
mysqli
jaffal
1:jaffal:ali
;
2:boissier:fabrice
;
navigateur
base
de
données
serveur
web
php
&
sgbd
:
connecteur
•
extension
à
php
exister
pour
interroger
sgbd
:
–
mysql
:
obsolète
–
l’utiliser!
!
(attention
:
anciens
tutos
l’utilisent)
–
mysqli
:
mysql
«
improved
»
mettre
à
jour
de
l’extension
mysql
–
pdo
:
php
dater
object
pilote
générique
multi-sgbd
•
(hors
php
:
odbc
(middleware),
connecteur
quasi-universel)
–
open
database
connectivity
mysql
avec
php
manipulation
base
de
donnée
mysql
faire
via
interface
graphique
‘phpmyadmin’
en
exécuter
script
php.
1.
phpmyadmin
•
programme
permettre
d'avoir
vue
rapide
de
l’ensemble
données.
•
c’est
un
outil
connus
permettre
de
manipuler
base
de
donnée
mysql.
•
phpmyadmin
être
livrer
avec
wamp,
hébergeur
permettre
d'utiliser
phpmyadmin.
(chemin
d’accès:
http://localhost:8888/phpmyadmin)
mysql
avec
php
2.
script
php
•
etapes
utiliser
base
donnée
1)
connexion
serveur
mysql
2)
envoi
requête
sql
(select,
insert
into...)
3)
récupération
résultat
4)
fermeture
de
connexion
mysqli
•
connexion
à
serveur
mysql
à
travers
mysqli
–
communication
avec
bdd
passer
par
objet
de
classe
«
mysqli
»
–
connexion
s’effectue
à
création
de
objet
(new)
$idcon
=
new
mysqli
(
$
host,
$user,
$mdp,
$bdd
);
objet
identifier
de
connexion
nom
serveur
utilisateur
autoriser
à
accéder
à
base
mot
de
passe
base
de
données
•
connexion
ouverte
devoir
être
fermer
$bool
=
$idcon->close
()
;
demander
à
l’objet
mysqli
de
fermer
connexion
mysqli
astuce
:
placer
information
dans
fichier
faire
require
(ou
include)
"fichier"
création
de
l’objet
connexion
l’attribut
connect_errno
de
indique
connexion
avoir
être
établir
en
cas
de
problème,
arrêter
avec
fonction
die.
fermeture
de
connexion
<?php
$host
=
"localhost";
$user
=
"root";
$mdp
=
"root";
$bdd
=
"clientsbd";
$mysqli
=
new
mysqli
(
$host,
$user,
$mdp,
$bdd
)
;
if
(
$mysqli->connect_errno
)
{
die
("<p>
impossible
de
connecter
à
$bdd
:
"
.
$mysqli->connect_error
.
"
</p>"
)
;
}
else
{
echo
"<p>
connecter
serveur
$host,
à
base
$bdd
</p>";
$mysqli->close();
}
?>
mysqli
•
envoyer
de
requête
à
base
de
donnée
$result
=
$mysqli->query
($sql)
;
résultat
de
requête
exécution
de
requête
sur
l’objet
connexion
requêter
sql
à
exécuter
–
requête
sql
:
•
s’il
s’agit
d’un
select,
résultat
correspondre
donnée
fournir
par
requête
(objet
mysqli_result)
•
(insert,
update,
delete...),
résultat
être
true
requête
être
exécutée,
false
<form
name="formnouveauclient"
action="coursphp-18.php"
method="post">
...
<input
type="text"
name="nom"
...
/>
...
<input
type="text"
name="email"
...
/>
...
<input
type="submit"
value="envoyer"
/>
</form>
php
connexion.php
<?php
function
connexion()
{
$host
=
"localhost";
$user
=
"uml";
$mdp
=
"uml";
$bdd
=
"clientsbd";
$mysqli
=
new
mysqli
(
$host,
$user,
$mdp,
$bdd)
;
if
(
$mysqli->connect_errno
)
{
die
("<p>
impossible
..."
.
$mysqli->connect_error
.
"
</p>"
)
;
}
return
$mysqli
;
}
?>
coursphp-18.php
<?php
if
(!
!empty($_post["nom"])
and!
!empty($_post["e
mail"])
)
{
require
"connexion.php";
$mysqli
=
connexion()
;
$nom
=
$_post["nom"];
$email
=
$_post["email"];
$adr
=
$_post["adresse"];
$id
=
'\n';
/*
auto-increment
*/
$sql
=
"insert
into
client
(id,
nom,
email,
adresse)
valoir
(
'$id',
'$nom',
'$email',
'$adr')
";
$result
=
$mysqli->query
($sql)
;
if
(!
!$result
)
{
echo
"<p>désolée,
...
</p>";
}
else
{
echo
"<p>
être
client
numéro
<i>
"
.
$mysqli->insert_id
.
"</i></p>";
}
$mysqli->close()
;
}
...
?>
mysqli
•
récupération
donnée
$result
=
$mysqli->query
("select
*
from
table")
;
–
requête
select
fournir
donnée
–
récupérer
résultat
(ligne
à
ligne)
à
l’aide
opération
fetch_*
–
appel
à
fetch_*
retourner
prochaine
ligne
•
ligner
dans
tableau
à
indice
:
$result->fetch_row
()
;
•
ligne
dans
tableau
associatif
:
$result->fetch_assoc
()
;
•
ligne
dans
objet
:
$result->fetch_object
()
;
connexion.php
<?php
function
connexion()
{
...
$mysqli
=
new
mysqli
(
$host,
$user,
$mdp,
$bdd)
;
...
return
$mysqli
;
}
?>
exécuter
requête
avec
l’opération
$mysqli->query
l’opération
$result->fetch_object
récupérer
prochaine
ligne,
faux
s’il
n’y
rester
de
lignes.
attribut
de
requête
devenir
attribut
de
l’objet
$ligne
coursphp-19.php
<?php
require
"connexion.php"
;
$mysqli
=
connexion();
$sql
=
"select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
if
(!
!$result
)
{
echo
"<p>
desolée
...
</p>"
;
}
else
{
...
while
(
$ligne
=
$result->fetch_object()
)
{
...
echo
"<td>"
.
$ligne->id
.
"</td>";
echo
"<td>"
.
$ligne->nom
.
"</td>";
echo
"<td>"
.
$ligne->email
.
"</td>";
echo
"<td>"
.
$ligne->adresse
.
"</td>";
...
}
...
}
?>
mysqli
même
requête
avec
récupération
information
•
...
par
tableau
à
indice
...
$sql
=
"select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
...
while
(
$ligne
=
$result->fetch_row()
)
{
...
echo
"<td>"
.
$ligne[0]
.
"</td>";
echo
"<td>"
.
$ligne[1]
.
"</td>";
echo
"<td>"
.
$ligne[2]
.
"</td>";
echo
"<td>"
.
$ligne[3]
.
"</td>";
...
}
...
commencer
par
0
•
...
par
tableau
associatif
...
$sql
=
"select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
...
while
(
$ligne
=
$result->fetch_assoc
()
)
{
...
echo
"<td>"
.
$ligne['id']
.
"</td>";
echo
"<td>"
.
$ligne['nom']
.
"</td>";
echo
"<td>"
.
$ligne['email']
.
"</td>";
echo
"<td>"
.
$ligne['adresse']
."<td>";
...
}
...
attribut
être
accessible
par
nom
mysqli
•
autres
information
pouvoir
être
récupérer
d’un
objet
mysqli_result
(
$result
=
$mysqli->query
(...)
)
–
de
ligne
colonne
pouvoir
récupérer
•
$nblignes
=
$result->num_rows
;
•
$nbcol
=
$result->field_count
;
–
nom
colonne
(attributs)
dans
résultat
•
$colonnes
=
$result->fetch_fields()
;
mysqli
a
partir
de
l’objet
$result,
pouvoir
récupérer
nombre
de
ligne
(attribut
num_rows)
de
colonne
par
ligne
(attribut
field_count).
...
$sql
=
"
select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
...
echo
"<p>
avoir
"
.
$result->num_rows
.
"
clients.
</p>";
echo
"<p>
avoir
"
.
$result->field_count
.
"
attribut
par
client.
</p>
"
;
...
pouvoir
récupérer
colonnes.
colonne
être
objet
l’attribut
name
donner
nom.
ligne
être
objet
attribut
correspondre
colonnes.
pouvoir
utiliser
foreach
pour
accéder
à
valeur
attributs.
...
$titres
=
$result->fetch_fields()
;
foreach
($titres
avoir
$colonne)
{
echo
"<th>
"
.
$colonne->name
.
"
</th>"
;
}
while
(
$ligne
=
$result->fetch_object()
)
{
echo
"<tr>"
;
foreach
(
$ligne
avoir
$colonne=>$val
)
{
echo
"<td>
"
.
$val
.
"
</td>"
;
}
}
echo
"</tr>"
;
}
...
mysqli
$mysql
=
new
mysqli
(
$host,
$user,
$mdp,
$bdd
);
$mysql->connect_errno();
$sql
=
"insert
into
client
(id,
nom,
email,
adresse)
valoir
(
'$id',
'$nom',
'$email',
'$adr')
";
$result
=
$mysql->query($sql)
;
while
(
$ligne
=
$result->fetch_object()
)
{
$ligne->id;
$ligne->nom;
}
$mysql->close();
mysqli
•
pour
debugger
:
(sauf
en
production)
/*
test
d’erreur
avoir
connexion
*/
$mysqli
=
new
mysqli("localhost",
"nobody",
"");
if
(mysqli_connect_errno())
{
printf("la
connexion
avoir
échouer
:
%s\n",
mysqli_connect_error());
exit();
}
/*
test
d’erreur
de
requête
*/
if
(!
!$mysqli->query("set
a=1"))
{
print_r($mysqli->error_list);
}
pdo
•
pdo
:
php
dater
object
•
piloter
générique
multi-sgbd
–
mysql,
postgresql,
oracle,
db2,
sql
server,
...
•
similaire
à
mysqli
–
variation
dans
syntaxe...
–
...et
dans
comportement
pdo
:
connexion
•
connexion
faire
avec
«
connection
string
»
contenir
information
de
bdd
:
–
host
:
localhost
(ou
127.0.0.1)
–
port
:
9306
$connexion
=
new
pdo(
"mysql:host=mon_serveur;port=mon_port;dbname=ma_bdd",
"mon_login",
"mon_pass");
pdo
:
ecriture
/
exec
•
requêter
d’écriture
:
insert,
update,
delete
–
faire
avec
méthode
pdo::exec()
–
avec
query!
!
–
renvoyer
nombre
de
modification
effectuer
(integer)
$requete
=
"delete
from
ma_table
where
mon_champ
=
ma_valeur";
$compteur
=
$connexion->exec($requete);
pdo
:
lecture
/
query
•
requêter
de
lecture
:
select
–
faire
avec
méthode
pdo::query()
–
avec
exec!
!
–
renvoyer
résultat
(pdostatement)
$requete
=
"select
*
from
ma_table
where
mon_champ
=
ma_valeur";
$resultats
=
$connexion->query($requete);
pdo
:
résultat
/
fetch
•
lecture
de
réponse
d’une
requête
de
lecture
:
fetch
•
fetch()
:
renvoyer
ligne
suivante
résultat
•
fetchobject()
:
renvoyer
ligne
suivante
en
qu’objet
•
fetchall()
:
renvoyer
tableau
de
réponse
$ligne
=
$resultats->fetch(pdo::fetch_assoc);
<-
tableau
associatif
$ligne
=
$resultats->fetch(pdo::fetch_num);
<-
tableau
simple
$ligne
=
$resultats->fetch(pdo::fetch_both);
<-
2
(par
défaut)
$ligne
=
$resultats->fetch(pdo::fetch_obj);
<-
objet
pdo
:
fermeture
connexion
•
avant
de
refaire
requête,
falloir
libérer
curseur
en
place
$resultats->closecursor();
pdo
$connexion
=
new
pdo(
"mysql:host=mon_serveur;port=mon_port;dbname=ma_bdd",
"mon_login",
"mon_pass");
$requete
=
"select
*
from
ma_table
where
mon_champ
=
ma_valeur";
$resultats
=
$connexion->query($requete);
while
(
$ligne
=
$resultats->fetch(pdo::fetch_obj)
)
{
$ligne->id;
$ligne->nom;
}
$resultats->closecursor();
pdo
:
...or
die()
•
pour
débugger
requête,
oublier
de
demander
à
php
d’afficher
l’erreur
s’il
a!
!
–
sauf
en
production!
!une
fois
site
en
ligne,
falloir
afficher
erreurs...
–
risquer
qu’un
pirate
récupérer
information
de
debug
$resultats
=
$connexion->query($requete);
if
(!
!$resultats)
{
print_r($connexion-
>errorinfo());
}
programmation
orienter
objet
(poo)
«
classe
objet
»
•
classe
permettre
définition
d’un
nouveau
type
de
variable
rassembler
attributs.
–
permettre
définition
de
fonction
manipuler
attributs,
en
poo,
fonction
s’appellent
‘
méthodes’.
•
objet
être
instance
d’une
classe.
objet
être
assimiler
à
variable
classe
type
de
objet.
programmation
orienter
objet
(poo)
«
concept
de
base
»
poo
avoir
deux
but
:
•
faciliter
réutilisation
code
écrire
grâce
à
l'héritage
•
encapsulation
donnée
traitement
correspondants
programmation
orienter
objet
(poo)
«
concept
de
base
»
•
faciliter
réutilisation
code
écrire
grâce
à
l'héritage
:
–
l’héritage
permet,
à
partir
d'une
classer
existante,
d'en
créer
nouvelle
reprendre
caractéristique
de
adapter
besoin
sans
modifier
classe
de
base.
–
être
possible
de
redéfinir
méthode
dans
classe
hériter
d'une
classe
de
base
sauf
méthode
avoir
être
définir
final.
l’appel
de
méthode
d'un
objet
être
possible
sans
soucier
de
type
intrinsèque
:
s'agit
polymorphisme.
•
polymorphisme
traire
de
capacité
de
l'objet
à
posséder
formes.
:
ma_fonction(int
i)
ma_fonction(string
str)
programmation
orienter
objet
(poo)
«
concept
de
base
»
•
encapsulation
donnée
traitement
correspondants.
–
l’encapsulation
permettre
de
regrouper
ensemble
d’attributs
avec
ensemble
de
méthode
en
classe
permettre
de
manipuler.
php
orienter
objet
•
php
5
être
langage
«
orienter
objet
»
–
manipulation
de
classe
d’objets
définition
de
classe
visibilité
:
private
$nom
définition
d’un
attribut
opération
:
public
function
...
accès
à
attribut
$this->attribut
retourner
valeur
return
valeur
;
<?php
{
private
$nom;
public
function
setnom
(
$nouvnom
)
{
$this->nom
=
$nouvnom;
}
public
function
getnom
()
{
return
$this->nom;
}
}
poo
en
php
«
visibilité
d'un
attribut
d'une
méthode
»
•
«
public
»
:
attribut
méthode
être
public,
pouvoir
avoir
accès
depuis
n'importe
où.
•
«
private
»:
imposer
restrictions.
l’accès
attribut
méthode
être
possible
depuis
l'intérieur
de
classe.
–
mettre
constructeur
avec
type
de
visibilité
private
sinon,
pouvoir
être
appelée,
pouvoir
instancier
classe
•
«
protected
»
avoir
même
effet
private,
à
l’exception
classe
fille
avoir
accès
attribut
protégés.
php
orienter
objet
•
classer
&
objet
–
création
d’un
objet
:
$obj
=
new
classe()
;
création
d’un
objet
$toto
=
new
()
accès
opération
publiques
$toto->setnom("toto")
$toto
->
getnom
()
impossible
d’accéder
attribut
priver
...
<?php
$toto
=
new
personne();
$toto->setnom("toto");
echo
"<p>
...
"
.
$toto->getnom()
.
"</p>";
$toto->nom
=
"blablabla";
echo
"
<p>
"
.
$toto->nom
.
"
</p>
";
?>
php
orienter
objet
erreur
l’attribut
«
nom
»
être
privé!!
!!
<html>
<head>
...
<?php
{
private
$nom;
...
}
//fin
classer
?>
</head>
<body>
...
<?php
$toto
=
new
personne();
$toto->setnom("toto");
echo
"<p>
objet
<i>personne</i>
:
"
.
$toto->getnom()
.
"</p>
";
...
echo
"
<p>
"
.
$toto->nom
.
"
</p>
";
?>
</body>
</htlml>
php
orienter
objet
•
classer
&
objet
:
–
héritage
:
sousclasse
extends
superclasse
classe
employe
hériter
de
classe
class
employe
extends
rajouter
nouvel
attribut
private
$salaire
nouvelles
opération
public
function
augmentation
public
function
getsalaire
employe
extends
{
private
$salaire
=
1000;
public
function
augmentation
($perc)
{
if
($perc
>
0)
{
$this->salaire
=
$this->salaire
$this->salaire*$perc;
}
}
public
function
getsalaire()
{
return
$this->salaire;
}
}
fichier
employe.php
php
orienter
objet
•
classer
&
objet
importer
définition
classe
employe
personne
toto
être
employé,
être
personne
toto
posséder
salaire
(employe),
nom
(personne)
classe
employe
hériter
attribut
opération
de
personne
<?php
include
"employe.php"
;
$toto
=
new
employe();
$toto->setnom("toto");
$toto->augmentation(0.10);
echo
"<i>
nom
</i>
:
"
.
$toto->getnom()
;
echo
"
<i>
salaire
</i>
:
"
.
$toto->getsalaire()
.
"
€
</p>";
?>
php
orienter
objet
•
classer
&
objet
<html>
<head>
.
.
.
</head>
<body>
<h1>objets
en
php</h1>
<?php
include
"employe.php"
;
$toto
=
new
employe();
$toto->setnom("toto");
$toto->augmentation(0.10);
echo
"<p>objet
employe
:
</p>
<ul>"
;
echo
"<li>
<i>
nom
</i>
:
".
$toto->getnom()
.
"</li>";
echo
"<li>
<i>
salaire
</i>
:
"
.
$toto->getsalaire()
.
"
€
</li>";
echo
"</ul>"
;
?>
</body>
</html>
php
orienter
objet
•
classer
&
objet
–
méthode
constructeur
:
__construct
–
redéfinition
d’une
opération
constructeur
être
appeler
fois
qu’un
objet
être
créer
(new)
redéfinition
de
l’opération
getsalaire
parent::getsalaire
correspondre
à
l’opération
getsalaire
définir
par
super-classe
(employe)
class
manager
extends
employe
{
private
$bonus
;
function
__construct
($bon)
{
$this->bonus
=
$bon;
}
public
function
getsalaire()
{
return
parent::getsalaire()
$this->bonus;
}
public
function
setbonus
($nouvbon)
{
...
}
public
function
getbonus
()
{
...
}
}
php
orienter
objet
•
classer
&
objet
appel
constructeur
:
function
__construct
($bon)
{
$this->bonus
=
$bon;
}
appel
à
l’opération
getsalaire
de
classe
manager
<?php
require
"manager.php"
;
$toto
=
new
manager(400);
$toto->setnom("toto");
$toto->augmentation(0.10);
echo
"<p><i>manager</i>
:
".
$toto->getnom()
.
",
salaire
"
.
$toto->getsalaire()
.
"
€
"
.
",
bonus
"
.
$toto->getbonus()
.
"</p>";
?>
poo
en
php
«
l’opérateur
::
»
l'opérateur
de
résolution
de
portée
«
::
»
(double
deux
points)
fournir
moyen
d'accéder
membre
statiques
constantes,
qu'aux
attribut
méthode
surcharger
d'une
classe.
•
mot
clé«
self::
»
être
utiliser
pour
accéder
méthode
attribut
statiques
depuis
classe
•
mot
clé
«
parent::
»
être
utiliser
pour
accéder
propriété
méthode
surchargées
constantes
d’une
classe
depuis
classe
fille
•
pour
référencer
élément
en
dehors
de
classe,
utiliser
nom
de
classe
«
nomclasse::
»
php
:
session
•
mécanisme
de
session
–
visite
à
site
/
page
être
indépendante
–
session
permettre
de
conserver
information
visiteur
entre
page
–
information
sur
session
être
stocker
sur
serveur
•
fonctionnement
général
1)
ouverture
de
session
:
session_start()
•
utilisateur
recevoir
identifier
transmettre
entre
page
2)
définition
variables
de
session
(données)
•
variables
de
session
être
transmettre
de
page
à
page
•
$_session["variable"]
=
valeur
;
3)
fermeture
de
session
:
session_destroy()
php
:
session
login
&
mdp
différents
de
uml
login
&
mdp
corrects
(uml
/uml
)
<
form
name="..."
action="coursphp-23.php"
method="post"
>
<label
>login
:
</label>
<input
type="text"
name="login"
maxlength="15"
/>
<br/>
<label
>mot
de
passe
:
</label>
<input
type="password"
name="mdp"
maxlength="15"
/>
<br/>
<input
type="submit"
value="ok"
/>
</form>
php
:
session
ouverture
d’une
session
(au
début
de
page)
définition
variables
de
session
$_session["var"]
variables
de
session
contenir
information
passer
de
page
en
page.
<?php
session_start();
?>
<html>
<head>
...
</head>
<body>
<?php
...
$login
=
$_post["login"]
;
$mdp
=
$_post["mdp"];
if
(
$login
==
"uml"
and
$mdp
==
"uml"
)
{
$_session["login"]
=
$login
;
...
echo
"<h1>bienvenue,
$login
</h1>"
;
}
else
{
echo
"<h1>desolé!
!</h1>";
echo
"<p>
page
accessible
membres.
</p>";
}
?>
</body>
</html>
php
:
session
usage
variables
de
session
$_session["var"]
<?php
session_start();
?>
<html>
<head>...
</head>
<body>
<?php
if
(
isset(
$_session["login"]
)
and!
!empty(
$_session["login"]
)
)
{
$login
=
$_session["login"]
;
...
echo
"<p>client
<b>
$login
</b>
:
être
page
pour
abonné
</p>"
;
}
else
{
echo
"<h1>desolé!
!</h1>";
echo
"<p>
s'agit
d'une
pager
privée!!
!!il
falloir
être
membre.
</p>";
}
?>
...
php
:
session
fermeture
de
session
session_destroy()
oublier
de
vider
variables
de
session
unset(
$_session[
"var"
]
)
<?php
session_start();
?>
<html>
<head>...
</head>
<body>
<?php
if
(
isset(
$_session["login"]
)
and!
!empty(
$_session["login"]
)
)
{
...
unset($_session["login"]);
session_destroy();
}
else
{
echo
"<h1>desolé!
!</h1>";
echo
"<p>
de
connexion
active.
</p>";
}
?>
...
php
:
fonction
avancer
(rappel)
•
isset($var1,
$var2,
...)
:
déterminer
variable
être
définir
être
différentes
de
null
•
unset($var1,$var2,...)
:
détruire
variables
•
empty($var)
:
déterminer
variable
être
vide
php
:
session
sans
session,
demander
page
web,
obtenir
réponse
classique
:
déclaration
habituelles
serveur
web,
page
demander
1
–
demander
page
web
classique
sans
session
serveur
web
sur
«
localhost
»
port
«
8888
»
2
–
serveur
web
répondre
avec
code
http
200,
avec
diverses
valeur
indiquer
plugins
disposer
3
–
serveur
web
envoyer
page
web
<?php
?>
<html><body>
pageweb
</body></html>
statut
http
:
classiques
(rappel)
200
ok
requête
avoir
être
reçue,
comprise,
exécuter
301
308
permanent
redirect
ressource
avoir
être
déplacer
à
autre
url
302
307
temporary
redirect
ressource
être
déplacer
à
autre
url
403
forbidden
requête
être
correcte,
client
n’a
droit
de
demander
serveur
de
faire
action
404
not
found
ressource
viser
par
l’url
n’a
être
trouver
500
internal
server
error
erreur
générique/non
spécifique...
serveur
web
avoir
échouer
chose
à
moment
502
bad
gateway
serveur
web
viser
n’arrive
à
contacter
serveur
traiter
requête
envoyée
php
:
session
1
–
demander
page
web
contenir
session
serveur
web
sur
«
localhost
»
port
«
8888
»
2
–
serveur
web
répondre
avec
code
http
200,
envoyer
numéro
de
session
php
(un
id
unique).
id
être
renvoyer
par
navigateur
avec
requête
pour
identifier
3
–
serveur
web
envoyer
client
côté
serveur
page
web
php
demander
à
créer
session,
id
être
transmettre
par
serveur
web
navigateur.
côté
serveur
web
&
php
:
liste
session
actives
être
stocker
dans
fichier
(avec
l’ensemble
variables
l’on
souhaiter
conserver
entre
page
web)
côté
client
:
l’id
de
session
être
renvoyer
pour
pouvoir
«
s’identifier
»...
attention!
!l’id
être
visible
sur
réseau!
!quelqu’un
de
intentionner
pouvoir
copier
id
s’identifier
avec
à
place
navigateur
légitime...
pour
faire
session
«
à
»
sécurisée,
être
nécessaire
de
s’assurer
l’on
parler
même
navigateur
(en
vérifier
l’ip
client,
par
exemple).
voir
l’ensemble
bonnes
pratique
dans
cours.
<?php
session_start();
?>
<html><body>
pageweb
</body></html>
php
:
session
•
mécanisme
de
session
–
base
pour
gestion
de
panier
dans
site
de
e-commerce
–
produit
choisir
par
client
être
enregistrer
en
variables
de
session
–
pouvoir
garder
objet
simples
contenir
panier
être
garder
dans
variables
de
session.
tableau
contenir
objet
ligneproduit.
$_session[$produit]
contenir
objet.
class
ligneproduit
{
public
$nom
;
public
$qte
;
/*
constructeur
*/
function
__construct(
$nom
)
{
$this->nom
=
$nom;
$this->qte
=
1;
}
}
php
:
session
produit
choisir
être
identifier
par
«
id
»
(ici
nom).
$_session[$produit]
aller
contenir
objet
ligneproduit
s’il
n’y
avoir
$_session[$produit]
,
aller
créer
nouveau
objet
ligneproduit
s’il
avoir
$_session[$produit]
,
aller
juste
augmenter
valeur
de
l’attribut
«
qte
»
dans
l’objet
ligneproduit
function
ajouterproduit($produit)
{
$qte
=
0;
if
(!
!isset
(
$_session[$produit]
)
)
{
$_session[$produit]
=
new
ligneproduit($produit);
$qte
=
$_session[$produit]->qte
}
else
{
//
produit
là,
augmenter
quantité
$objet
=
$_session[$produit]
;
$objet->qte
=
$objet->qte
1;
$qte
=
$objet->qte
;
}
return
$qte;
}
php
:
session
lorsqu’on
vouloir
supprimer
produit,
aller
réduire
quantité
dans
l’objet
ligneproduit
récupérer
l’objet
ligneproduit
garder
dans
$_session[$produit]
réduire
quantité
d’une
unité
s’il
n’en
rester
(la
quantité
avoir
atteindre
0
unités),
supprimer
produit
de
session
function
supprimerproduit($produit)
{
$qte
=
0
;
if
(
isset(
$_session[$produit]
)
)
{
$objet
=
$_session[$produit]
;
$objet->qte
=
$objet->qte
-
1;
$qte
=
$objet->qte;
if
(
$qte
<=
0)
{
//on
supprimer
produit
unset($_session[$produit]);
}
}
return
$qte;
}
php
:
session
pouvoir
récupérer
contenu
panier
en
récupérer
contenu
de
variable
de
session
$_session
pour
objet
ligneproduit
garder
dans
$_session
function
afficherpanier()
{
echo
"<table>"
;
foreach($_session
avoir
$objet)
{
echo
"<tr><td>
"
.
$objet->nom
.
"
</td>
<td>
"
.
$objet->qte
.
"
</td>
</tr>
";
}
echo
"</table>"
;
}
php
:
session
cookies
•
cookie
être
mécanisme
pour
stocker
information
sur
visiteur
de
identifier
•
variables
de
session,
cookies
être
petits
fichier
stocker
sur
l’ordinateur
de
l’utilisateur
pour
durée
de
vie
pouvoir
définir
php
:
cookies
•
cookies
être
accessibles
via
superglobale
$_cookie
•
fonction
setcookie()
permettre
de
définir
cookie
être
envoyer
avec
reste
en-tête
http
–
cookies
faire
partir
en-tête
http,
imposer
setcookie()
être
appeler
avant
affichage
de
texte
avant
même
<!
!doctype
>
–
fonction
setcookie()
pouvoir
prendre
jusqu'à
7
paramètre
:
•
premier
être
obligatoire
définir
nom
cookie
•
deuxième
définir
valeur
cookie
•
troisième
définir
durée
de
vie
cookie
en
second
setcookie('nom',
'nomutilisateur',
time()+3600*24);
echo
$_cookie['nom’];
//
affichage
cookie
php
:
cookies
1
–
demander
page
web
contenir
session
cookie
avec
variable
2
–
serveur
web
répondre
avec
code
http
200,
envoyer
numéro
de
session
php,
variable
«
nom
»
contenir
valeur
«
nomutilisateur
»...
dans
cookie
php
demander
à
créer
cookies,
valeur
être
envoyer
par
serveur
web
navigateur,
celui-ci
stocker
valeur
localement.
cookies
être
stocker
sur
disque
dur!
!...
être
renvoyer
à
demande
de
page
web.
attention
à
mettre
de
donnée
:
-
mettre
de
fichier
-
mettre
d’objets
conteneur
gros!
!
(tableaux,
etc...)
<?php
session_start();
setcookie('nom',
'nomutilisateur',
time()+3600*24);
?>
php
:
cookies
•
fonction
setrawcookie()
être
même
setcookie()
excepter
valeur
cookie
être
encoder
dans
l’url
de
l'envoi
navigateur
•
pour
détruire
cookie
:
appeler
setcookie()
avec
date
d’expiration
dans
passé
:
setcookie("nomcookie",
"valeurcookie",
time()-3600);
php
:
cookies
•
exemple
de
cookie
sous
forme
de
tableau
:
<?php
setcookie("cookie[three]",
"cookiethree",
time()+3600*1);
setcookie("cookie[two]",
"cookietwo",
time()+3600*1);
setcookie("cookie[one]",
"cookieone",
time()+3600*1);
?>
<?php
//
affichage
de
cookies
if
(isset($_cookie['cookie']))
{
//
exemple
d'appel
cookie
:
echo
'le
cookie
two
être
:'.
$_cookie['cookie']['two'].
'
parcours
avec
foreach
suivre
:
<br/>';
foreach
($_cookie['cookie']
avoir
$name
=>
$value)
{
$name
=
htmlspecialchars($name);
$value
=
htmlspecialchars($value);
echo
"$name
:
$value
<br
/>";
}
}
?>
php
:
cookies
<?php
session_start();
setcookie("cookie[three]",
"cookiethree",
time()+3600*1);
setcookie("cookie[two]",
"cookietwo",
time()+3600*1);
setcookie("cookie[one]",
"cookieone",
time()+3600*1);
?>
1
–
demander
page
web
contenir
session
trois
cookies
2
–
serveur
web
répondre
avec
code
http
200,
envoyer
cookies
contenir
3
variables
numéro
de
session
php
cookie
être
envoyer
navigateur
avec
valeur
date
d’expiration...
php
:
cookies
php
:
cookies
php
:
cookies
php
:
cookies
php
:
cookies
php
:
cookies
php
:
cookies
php
:
cookies
[navigateur
faire
requête]
client
avoir
cliquer
sur
lien
vers
cookies4.php
page
n’ait
besoin
d’aucune
valeur
de
cookie
(hormis
session),
navigateur
renvoyer
temps
valeur
stocker
dans
cookies!
!
(évident
:
navigateur
connaître
code
php
contenir
dans
page
web,
renvoyer
valeur
qu’il
être
censé
conserver)
php
:
cookies
[serveur
web
répond]
serveur
web
«
détruire
»
session...
en
pratique
signifier
variables
de
session
être
détruites...
cookies!
!
php
:
cookies
[navigateur
faire
requête]
navigateur
demander
cookies5.php
session
être
détruire
côté
serveur,
navigateur
continuer
d’envoyer
l’id
dispose,
cookies
qu’il
avoir
stocker
php
:
cookies
[serveur
web
répond]
forcer
serveur
web
avoir
écrire
valeur
de
session
de
cookies...
seules
valeur
stocker
dans
cookies
être
affichables...
être
donner
session
être
détruite!
!
php
:
cookies
en
effet
:
2
variables
stocker
dans
cookies
s’affichent,
autres
-
nom
rester
vide,
session
être
détruite,
contenu
être
vide
-
prenom
monrawcookie
s’affichent
être
renvoyer
par
navigateur
avec
requête
«
»
durée
de
vie
être
valable
php
:
cookies
[navigateur
faire
requête]
navigateur
demander
page
cookies5.php
continuer
d’envoyer
variables
«
valables
»
contenir
dans
cookies
php
:
cookies
[serveur
web
répond]
serveur
web
répond,
renvoyer
id
de
session
(usage
de
valeur
précédente
possible)
php
:
cookies
donnée
navigateur
être
stocker
dans
fichier
cookie
«
prenom
»,
contenir
«
fab
»,
pour
serveur
web
p1web2019.metalman.eu
dans
dossier
«
test_cookie
»
avec
divers
timestamps
exemple
de
fichier
contenir
cookies
navigateur
client.
valeur
être
lisibles!
!ne
stocker
de
mot
de
passe
dans
cookie!
!
(que
contenu
de
variable
chiffrer
:
mot
de
passe
être
accessible
sur
l’ordinateur
client!
!)
cookie
«
monrawcookie
»,
contenir
«
valeurcookie
»,
pour
serveur
web
p1web2019.metalman.eu
dans
dossier
«
test_cookie
»
avec
divers
timestamps
php
:
session
&
cookies
•
session
:
variables
conserver
côté
serveur
–
session_start();
//
sur
page
php
–
$_session["ma_variable"]
=
42;
//
variables
–
unset($_session["ma_variable"]);
//
variables
–
session_destroy();
//
en
fin
de
session
•
cookies
:
variables
conserver
côté
client
–
setcookie('nom',
'nomutilisateur',
time()+3600*24);
–
echo
$_cookie['nom'];
–
setcookie('nom',
'nomutilisateur',
time()-3600);
transaction
&
bdd
•
site
de
vente
en
ligne
avoir
vider
stocks...
rester
qu’un
seul
objet
en
vente
en
seul
exemplaire
•
passe-t-il
2
utilisateur
essayer
d’acheter
en
même
temps
objet
?
–
impossible
à
déterminer...
en
général,
deux
utilisateur
arriver
à
passer
commande,
vendeur
voir
2
commande
sur
même
objet,
stock
passer
en
négatif
transaction
&
bdd
•
transaction
être
ensemble
de
requête
viser
à
changer
l’état
d’une
base
de
données
•
exemple
:
sélectionner
produit
dans
bdd
choix
produit
2.
créer
nouvelle
ligne
dans
table
création
d’une
nouvelle
réservation
de
produit
réduire
valeur
dans
autre
table
réduction
de
quantité
de
produit
3
requête
être
exécuter
en
seule
transaction
transaction
&
bdd
•
transaction
pouvoir
être
vue
requête
«
métier
»/haut
niveau
:
-
«
réserver
produit
dans
magasin
»
être
transaction
qu’un
client
pouvoir
demander
-
en
pratique
falloir
client
choisir
produit
disponibles,
l’on
préparer
note
lier
client
produits,
isoler
produit
pour
mettre
de
côté
requête
«
techniques
»/bas
niveau
seules
n’ont
de
signification,
servir
but
commun
(cf
process
mining...)
transaction
&
bdd
•
transaction
terminer
par
«
commettre
»
–
validation
de
transaction
–
écriture
modification
•
pouvoir
vouloir
annuler
transaction
en
cours
de
route
après
un
commit.
effectuer
dans
cas
«
rollback
»
–
transaction
être
annulée,
modification
n’est
apporter
donnée
dans
bdd
–
anciennes
valeur
être
remettre
dans
bdd
transaction
&
bdd
«
commettre
»
être
dernière
étape
d’une
transaction
:
c’est
à
moment-là
sgbd
enregistrer
changements.
généralement,
transaction
être
effectuer
en
mémoire
ram,
qu’un
commettre
être
effectué,
changement
être
inscrire
sur
disque
durs.
sgbd
crashe,
devoir
pouvoir
retrouver
dernier
état
cohérent...
...ou
devoir
pouvoir
proposer
de
“rejouer”
l’ensemble
transaction
effectuer
pour
retrouver
base
de
donnée
cohérente
à
jour.
transaction
(leurs
requête
groupées)
être
enregistrer
dans
logs
sgbd,
permettre
de
rejouer
l’ensemble
transaction
effectuées.
transaction
&
bdd
•
propriété
acid
:
–
atomicité
–
cohérence
–
isolation
–
durabilité
«
ensemble
de
propriété
garantir
qu'une
transaction
informatique
être
exécuter
de
façon
fiable.
»
wikipédia
–
propriété
acid
propriété
acid
permettre
d’assurer
qu’un
sgbd
supporter
«
transaction
»
transaction
&
bdd
•
atomicité
:
transaction
être
«
atomique
»
s’effectue
(une
transaction
non-atomique
créer
réservation
avec
produits,
réduire
quantité
dans
stock
(par
exemple).
stock
réel
être
représenté,
entraîner
problèmes)
transaction
&
bdd
•
cohérence
:
cohérence
assurer
contrainte
de
base
de
donnée
être
respecter
avant
après
transaction
(l’état
de
base
de
donnée
être
valide
selon
règles)
(une
transaction
incohérente
permettre
par
exemple
de
faire
référence
à
objet
n’existent
plus,
bloquer
jointures)
transaction
&
bdd
•
isolation
:
capacité
de
protéger
donnée
contre
modification
simultanées.
transaction
devoir
dépendre
données
d’une
autre
transaction.
(des
transaction
non-isolées
permettre
de
faire
modification
sur
valeur
n’existent
avoir
être
modifier
entre
temps)
transaction
&
bdd
•
exemple
problème
isolation
:
produit
être
en
quantité
9
transaction
a
réduit
de
1,
devoir
retrouver
à
8,
un
transaction
b
réduit
de
3
entre
temps.
•
valeur
correcte
devoir
être
3
1
=
4
=>
9
–
4
=
5
l’ordre
écriture
être
importante
:
1)
a
lit
valeur
9
select
qte
from
produire
where
nom=«
pomme
»
2)
b
lire
valeur
9
select
qte
from
produire
where
nom=«
pomme
»
3)
b
réduire
de
3
quantité
:
9
–
3
=
6
(
update
qte
)
4)
a
réduit
de
1
quantité
:
9
–
1
=
8
(
update
qte
)
5)
valeur
finale
être
8,
b
être
exécuter
en
dernière
transaction
&
bdd
•
durabilité:
en
cas
de
panne
(de
l’ordinateur,
système
d’exploitation,
sgbd,
...),
transaction
exécuter
être
enregistrées.
(à
panne
concerner
l’ensemble
disque
contenir
bdd,
transaction
effectuer
devoir
être
enregistrer
dès
qu’elles
être
effectuées)
transaction
avec
mysql
mysql
avoir
particularité
de
gérer
moteur
de
stockage
dans
même
bdd,
appeler
moteur
de
table.
•
moteur
de
stockage
être
ensemble
d’algorithmes
permettre
de
stocker
d’accéder
donnée
dans
sgbd.
en
général,
seul
moteur
être
utiliser
par
bdd.
•
pour
lister
moteurs,
utiliser
requête
:
show
engines;
transaction
avec
mysql
principaux
moteur
de
stockage
mysql
:
myisam
:
moteur
par
défaut
jusque
mysql
5.5
•
simple
d’utilisation
•
performant
sur
table
ouvertes
(très
rapide
pour
opération
count()
lectures)
•
offrir
index
full-text
permettre
de
faire
recherche
précises
sur
texte
×
supporter
clé
étrangères,
transaction
×
gérer
verrouillage
niveau
de
table
(bloque
table
entière
opération
d’insertions,
suppression
maj)
transaction
avec
mysql
principaux
moteur
de
stockage
mysql
:
innodb
:
moteur
par
défaut
depuis
mysql
5.5
•
gestion
clé
étrangères
support
transaction
(par
défaut
:
requête
sql
être
considérer
transaction)
–
véritable
gestion
modèle
relationnel
&
transactionnel
–
respecter
acid
•
gérer
verrouillage
niveau
de
ligne
×
proposer
d’index
full-text,
lent
dans
opération
transaction
avec
mysql
principaux
moteur
de
stockage
mysql
:
memory
:
stocker
donnée
de
table
en
mémoire
(ram).
•
accès
rapides
×
en
cas
de
panne,
donnée
stocker
être
perdre
transaction
avec
mysql
1.
début
de
transaction
:
start
transaction
requête
:
select,
update,
...
validation
de
transaction
:
commettre
annulation
de
transaction
en
cas
d’erreur
:
rollback
•
s’il
avoir
erreur
d’intégrité
dans
données,
rollback
faire
transaction
avec
mysql
oublier
d’utiliser
moteur
de
bdd
compatible
avec
transaction
propriété
acid...
...
utiliser
requête
fonction
de
transaction
nécessaire...
...sinon
:
requête
=
transaction
“pas
acid”
transaction
avec
mysql
exemple
de
gestion
de
transaction
:
achat
en
ligne
•
spécification
moteur
innodb
de
création
de
table,
pour
supporter
transaction
create
tabler
compte
(
id
int
,
solde
int
not
nul
)
engine=innodb
;
set
autocommit=0
;
//désactiver
validation
automatique
requête
start
transaction
;
update
compter
set
solde=solde+100
where
id=idvendeur
;
update
compter
set
solde=solde-100
where
id=idacheteur
;
commettre
;
transaction
avec
pdo
1.
début
de
transaction
:
$bdd->begintransaction();
requête
de
transactions:
$bdd->query();
$bdd->query();
validation
/
annulation
de
transaction
:
$bdd->commit();
$bdd->rollback();
