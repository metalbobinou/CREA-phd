informatique
modélisation
uml
objectifs
de
séance
:
création
d’un
site
web
dynamique
php
php
•
php
être
langage
de
programmation
utiliser
pour
construction
de
site
web
dynamiques
–
page
php
:
page
web
contenir
de
php
•
aller
mélanger
php
code
html
/
css
•
code
php
aller
être
analyser
par
serveur
•
résultat
aller
être
nouvelle
page
web
mettre
à
jour
par
code
php
code
php
être
à
l’intérieur
de
balise
<?php
...
?>
entourer
par
balise
<script
language="php">
...
</script>
coursphp-1.php
<html>
...
<?php
date_default_timezone_set("europe/paris");
echo
"<p
style='font-style:
italic;'>
paris,
"
.date('d
/
m
/
y').
"</p>"
;
?>
...
</html>
php
•
cycler
de
vie
d’une
page
php
1)
client
envoyer
requête
serveur
2)
page
php
être
analyser
par
serveur,
code
php
être
interpréter
3)
contenu
de
page
être
mettre
à
jour
envoyer
client
(1)
requêter
fichier
statiques
hup://serveur/page.php
html
/
css
(3)
envoyer
par
serveur
contenu
mettre
à
jour
(contenu
html
calculé)
interpréteur
php
page
php
(2)
interprétation
par
serveur
code
php
php
http://serveur/courphp-1.php
...
<h1>
bienvenir
sur
site
php
</h1>
<p
style='font-style:
italic;'>
paris,
28
/
02
/
2012
</p>
<p>
être
18:45:12
.</p>
...
contenu
html/css
calculer
interpréteur
php
pager
php
originelle
(
php
&
html
/
css
)
coursphp-1.php
...
<h1>
bienvenir
sur
site
php
</h1>
<?php
date_default_timezone_set("europe/paris");
echo
"
<p
style='font-style:
italic;'>
paris,
"
.
date('d
/
m
/
y').
"</p>"
;
?>
<script
language="php">
echo
"
<p>
être
"
.date("h:i:s").
"
.</p>"
;
</script>
...
php
•
exemple
coder
php
coursphp-2.php
instruction
php
terminer
par
«
;
»
portion
de
code
php
<?php
....
?>
séquence
/*
...
*/
délimiter
commentaire,
visible
pour
l’auteur,
invisible
pour
client
portion
de
code
php
l’instruction
«
echo
»
permettre
d’écrire
dans
document
final
<!
!doctype
html>
<?php
date_default_timezone_set("europe/paris")
;
$today
=
date("d-m-y
h:i:s")
;
$variable
=
"php5"
;
?>
<html>
<head>
...
</head>
<body>
<h1>
exemple
php
</h1>
<p>contenu
statique
:
changer
</p>
<?php
/*
contenu
aller
être
interpréter
par
serveur
*/
echo
"<p>contenu
en
$variable
</p>"
;
echo
"<p>
c'est
$today
</p>"
;
?>
</body>
</html>
php
•
coder
fois
interpréter
par
serveur...
<!
!doctype
html>
<html>
<head>
...
</head>
<body>
<h1>
exemple
php
</h1>
<p>contenu
statique
:
changer
</p>
<p>contenu
en
php5
</p>
<p>
c'est
28-02-2012
19:38:54
</p>
</body>
</html>
résultat
instruction
«
echo
»
client
voit...
php
•
notion
de
variable
–
variable
être
conteneur
de
valeur
–
pouvoir
affecter
valeur,
qu’on
aller
utiliser
$variable
=
"php5"
;
«
$
»
indiquer
variable
«
=
»
être
affectation
attribut
valeur
à
variable
nom
de
variable
commencer
par
lettre
«
_
»,
sans
espace
echo
"...
$variable
..."
;
récupérer
valeur
garder
dans
variable
par
nom
php
•
notion
de
variable
:
type
donnée
–
variables
pouvoir
garder
de
valeur
de
différents
type
•
nombrer
entiers
(integer)
:
25
•
nombre
décimaux
(double
float)
:
2.25
•
chaîne
de
caractère
(string)
:
«
1
super
chaîne!
!»
•
logique
(boolean)
:
«
true
»
(1)
«
false
»
–
fonction
gettype($variable)
permettre
de
savoir
typer
de
valeur
contenir
variable
•
$entier
=
25;
gettype($entier)
->
integer
•
$decimal
=
2.25;
gettype($decimal)
->
double
•
$chaine
=
"1
super
chaîne!
!";
gettype($chaine)
->
string
•
$bool
=
true;
gettype($bool)
->
boolean
php
•
exemple
:
définition
d’une
variable
<?php
$entier
=
25;
$decimal
=
2.25;
$chaine
=
"1
super
chaîne!
!";
$boolean
=
true;
echo
"<li>"
.
gettype($entier)
.
":
$entier
</li>"
;
echo
"<li>"
.
gettype($decimal)
.
":
$decimal
</li>"
;
echo
"<li>"
.
gettype($chaine)
.
":
$chaine
</li>"
;
echo
"<li>"
.
gettype($boolean)
.
":
$boolean
</li>"
;
?>
valeur
de
variable
récupérer
valeur
de
variable
$boolean
gettype()
informer
type
de
variable
php
•
opérateur
–
différents
opérateur
permettre
de
manipuler
valeurs,
qu’ils
être
dans
variables
opérateur
mathématiques
opérateur
string
opérateur
de
comparaison
opérateur
logiques
+
-
*
/
%
.
(concaténation)
==!
!=
<=
<
>=
>
||
(or)
&&
(and)!
!(not)
<?php
$a
=
2
3
;
$b
=
4
-
$a
;
$nom
=
"toto”;
echo
"salut
"
.
$nom;
echo
"<p>
4
-
$a
valoir
$b
</p>";
?>
php
•
tableau
–
variables
capables
d’enregistrer
valeur
d’un
typer
•
tableau
à
indice
:
–
position
être
identifier
par
numéro
(commençant
par
0)
•
$tableau
[0]
=
"a";
•
$tableau
[1]
=
"b";
•
$tableau
[3]
=
"fin";
•
$tableau
[
]
=
"suite";
a
b
fin
suite
0
1
2
3
4
attention
avoir
définir
position
avant
de
utiliser
avoir
message
d’erreur.
•
tableau
associatifs
:
–
position
recevoir
identifier
(un
label)
•
$tableauassoc
["prenom"]
=
"jean";
•
$tableauassoc
["
nom"]
=
"dupont";
jean
dupont
prenom
nom
php
message
d’erreur
contenu
de
position
2
(
$tableau[2]
)
n’a
être
défini
auparavant.
<head>
...
<style>...
</style>
</head>
<body>
...
<h2>tableaux
à
indice
</h2>
<table>
<?php
$tableau
[0]
=
"a";
$tableau
[1]
=
"b";
$tableau
[3]
=
"fin";
$tableau
[]
=
"suite";
echo
"
<tr>
<td>
".
$tableau[0]
.
"
</td>
<td>
".
$tableau[1]
.
"
</td>
<td>
"
.
$tableau[2]
.
"
</td><td>
"
.
$tableau[3]
.
"
</td><td>
"
.
$tableau[4]
.
"
</td></tr>
"
;
?>
</table>
...
contenir
de
position
4
(
$tableau[4]
)
php
...
<h2>tableau
associatif
</h2>
<table>
<tr>
<th>
nom
</th>
<th>prénom
</th>
</tr>
<?php
$tableauassoc
["prenom"]
=
"jean";
$tableauassoc
["nom"]
=
"dupont"
;
echo
"<tr>
<td>"
.
$tableauassoc
["nom"]
.
"</td>"
;
echo
"<td>"
.
$tableauassoc
["prenom"]
.
"
</td></tr>"
;
?>
</table>
</body>
informatique
modélisation
uml
objectifs
de
séance
:
classer
&
objet
php
orienter
objet
•
php
5
être
langage
«
orienter
objet
»
–
manipulation
de
classe
d’objets
définition
de
classe
visibilité
:
private
$nom
définition
d’un
attribut
opération
:
public
function
...
accès
à
attribut
$this->attribut
retourner
valeur
return
valeur
;
<?php
{
private
$nom;
public
function
setnom
(
$nouvnom
)
{
$this->nom
=
$nouvnom;
}
public
function
getnom
()
{
return
$this->nom;
}
}
php
orienter
objet
•
classer
&
objet
–
création
d’un
objet
:
$obj
=
new
classe()
;
création
d’un
objet
$toto
=
new
()
accès
opération
publiques
$toto->setnom("toto")
$toto
->
getnom
()
...
<?php
$toto
=
new
personne();
$toto->setnom("toto");
echo
"<p>
...
"
.
$toto->getnom()
.
"</p>";
$toto->nom
=
"blablabla";
echo
"
<p>
"
.
$toto->nom
.
"
</p>
";
?>
impossible
d’accéder
attribut
priver
php
orienter
objet
<html>
<head>
...
<?php
{
private
$nom;
...
}
//fin
classer
?>
</head>
<body>
...
<?php
$toto
=
new
personne();
$toto->setnom("toto");
echo
"<p>
objet
<i>personne</i>
:
"
.
$toto->getnom()
.
"</p>
";
...
echo
"
<p>
"
.
$toto->nom
.
"
</p>
";
?>
</body>
</html>
erreur
l’attribut
«
nom
»
être
privé!!
!!
php
orienter
objet
•
classer
&
objet
:
–
héritage
:
sousclasse
extends
superclasse
classe
employe
hériter
de
classe
class
employe
extends
rajouter
nouvel
attribut
private
$salaire
nouvelles
opération
public
function
augmentation
public
function
getsalaire
employe
extends
{
private
$salaire
=
1000;
public
function
augmentation
($perc)
{
if
($perc
>
0)
{
$this->salaire
=
$this->salaire
$this->salaire*$perc;
}
}
public
function
getsalaire()
{
return
$this->salaire;
}
}
fichier
employe.php
php
orienter
objet
•
classer
&
objet
importer
définition
classe
employe
personne
toto
être
employé,
être
personne
toto
posséder
salaire
(employe),
nom
(personne)
<?php
include
"employe.php"
;
$toto
=
new
employe();
$toto->setnom("toto");
$toto->augmentation(0.10);
echo
"<i>
nom
</i>
:
"
.
$toto->getnom()
;
echo
"
<i>
salaire
</i>
:
"
.
$toto->getsalaire()
.
"
€
</p>";
?>
classe
employe
hériter
attribut
opération
de
personne
php
orienter
objet
•
classer
&
objet
<html>
<head>
...
</head>
<body>
<h1>objets
en
php</h1>
<?php
include
"employe.php"
;
$toto
=
new
employe();
$toto->setnom("toto");
$toto->augmentation(0.10);
echo
"<p>objet
employe
:
</p>
<ul>"
;
echo
"<li>
<i>
nom
</i>
:
".
$toto->getnom()
.
"</li>";
echo
"<li>
<i>
salaire
</i>
:
"
.
$toto->getsalaire()
.
"
€
</li>";
echo
"</ul>"
;
?>
</body>
</html>
php
orienter
objet
•
classer
&
objet
–
méthode
constructeur
:
__construct
–
redéfinition
d’une
opération
constructeur
être
appeler
fois
qu’un
objet
être
créer
(new)
redéfinition
de
l’opération
getsalaire
parent::getsalaire
correspondre
à
l’opération
getsalaire
définir
par
super-classe
(employe)
class
manager
extends
employe
{
private
$bonus
;
function
__construct
($bon)
{
$this->bonus
=
$bon;
}
public
function
getsalaire()
{
return
parent::getsalaire()
$this->bonus;
}
public
function
setbonus
($nouvbon)
{
...
}
public
function
getbonus
()
{
...
}
}
php
orienter
objet
•
classer
&
objet
appel
constructeur
:
function
__construct
($bon)
{
$this->bonus
=
$bon;
}
appel
à
l’opération
getsalaire
de
classe
manager
<?php
require
"manager.php"
;
$toto
=
new
manager(400);
$toto->setnom("toto");
$toto->augmentation(0.10);
echo
"<p><i>manager</i>
:
".
$toto->getnom()
.
",
salaire
"
.
$toto->getsalaire()
.
"
€
"
.
",
bonus
"
.
$toto->getbonus()
.
"</p>";
?>
informatique
modélisation
uml
objectifs
de
séance
:
formulaire
html
&
php
php
être
langage
pour
web
•
communication
entre
client
(navigateur)
serveur
(php)
–
formulaire
en
html
permettre
de
recueillir
donnée
de
l’utilisateur
•
donnée
être
communiquer
à
programme
–
navigateur
envoyer
donnée
récolter
par
formulaire
serveur
•
programme
(page
php)
récupérer
données
grâce
à
variables
page
php
formulaire
html
•
formulaire
html
être
définir
par
balise
<form
...>
...
</form>
–
élément
être
à
l’intérieur
de
balise
<form
name="
nomformulaire"
action="
page.php"
method="get
|
post"
>
....
</form>
action
:
à
envoyer
donnée
method:
envoyer
donnée
–
champ
formulaire
être
introduire
par
différents
balise
:
•
<
input
type="..."
name="..."
value="...
"
id="..."
/>
•
<
textarea
name="..."
id="..."
cols="..."
rows="..."
>
...
</textarea>
•
<
select
name="..."
id="..."
size="...
"
>
<
option
value="...
"
>
...
</option>
</select>
formulaire
html
<input
type="text"
name="nomclient"
value="votre
nom"
size="40"
maxlength="150"
/>
<select
name="produit">
<option
value="superkdo">
super
kdo
</option>
...
</select>
<textarea
name="opinionclient"
cols="40"
rows="5"
>
opinion
sur
produit
</textarea>
<input
type="reset"
value="nettoyer"
/>
<input
type="submit"
value="envoyer"
/>
input
type="submit"
charger
d’envoyer
donnée
formulaire
formulaire
html
à
donnée
être
envoyer
input
type="text"
zone
de
saisie
select
...
option
liste
de
sélection
d’options
textarea
zone
de
texte
input
type="submit"
input
type="reset"
bouter
d’envoi
de
reset
formulaire
<form
name="formclient"
action="coursphp-7.php"
method="post"
>
<label
for="nom">
nom</label>
<input
type="text"
id="nom"
name="nomclient"
value="votre
nom"
size="40"
maxlength="150"
/>
<br/>
<label>
produit</label>
<select
name="produit">
<option
value="superkdo">
super
kdo</option>
<option
value="megatruc">
mega
truc</option>
<option
value="babyfun">
baby
fun</option>
</select>
<br/>
<label>
opinion</label>
<textarea
name="opinionclient"
cols="40"
rows="5"
>
opinion
sur
produit
</textarea>
<br/>
<input
type="submit"
value="envoyer"
class="bouton"
/>
<input
type="reset"
value="nettoyer"
class="bouton"
/>
</form>
formulaire
html
&
php
•
donnée
recueillir
dans
formulaire
être
transmettre
programme
indiquer
dans
action=...
•
dans
php,
récupérer
données
grâce
à
deux
tableau
associatifs
spéciaux
–
$_get
->
<form
action="..."
method="get"
>
•
$_get["nom"]
<input
...
name="nom"
/>
–
$_post
->
<form
action="..."
method="post"
>
•
$_post["nom"]
<input
...
name="nom"
/>
formulaire
html
&
php
<form
name="formclient"
action="coursphp-7.php"
method="post"
>
<label
for="nom">nom</label>
<input
type="text"
id="nom"
name="nomclient"
value="votre
nom"
size="40"
maxlength="150"
/>
<br/>
...
<?php
$nom
=
$_post["nomclient"];
$op
=
$_post["opinionclient"];
$prod
=
$_post["produit"];
echo
"<p>merci
de
participation,
$nom!
!</p>";
echo
"<p>votre
produire
être
:
<i>
$prod
</i>
</p>";
echo
"<p>
opinion
être
:
<i>
$op
</i>
</p>";
?>
formulaire
html
&
php
•
méthode
get
–
donnée
être
envoyer
dans
l’url
programme
–
limiter
à
256
octet
–
déconseiller
<form
name="formget"
action="coursphp-8.php"
method="get">
<label>nom</label>
<input
type="text"
name="client"
size="20"
/>
<br/>
<label>mot
de
passe
</label>
<input
type="password"
name="mdp"
size="10"/>
<br/>
<input
type="submit"
value="envoyer"
/>
</form>
<?php
echo
"<p>bienvenue,
<i>".
$_get["client"]
.
"</i>!
!</p>";
?>
formulaire
html
&
php
•
exemple
<form
name="..."
action="coursphp-9.php"
method="post">
<fieldset>
<legend>
donnée
</legend>
<label
>...</label>
<
input
type="text"
name="nom"
...
/>
<br/>
<label
>...</label>
<
input
type="email"
name="email"...
/><br/>
<input
type="radio"
name="sexe"
value="homme"
/>
homme
<input
type="radio"
name="sexe"
value="femme"
/>
femme<br/>
</fieldset>
<fieldset>
<legend>
produit
</legend>
<label>...</label>
<select
name="produit">
<option
value="superkdo">...</option>
<option
value="megatruc">
mega
truc</option>
<option
value="babyfun">
...
</option>
</select>
<br/>
<label>...</label>
<textarea
name="opinion"
...
>
...
</textarea>
</fieldset>
formulaire
html
&
php
•
exemple
<body>
<h1>récapitulatif
</h1>
<ul>
<?php
echo
"<li>
nom
:
"
.
$_post["nom"]
.
"</li>"
;
echo
"<li>
email
:
"
.
$_post["email"]
.
"</li>"
;
echo
"<li>
sexe
:
"
.
$_post["sexe"]
.
"</li>"
;
echo
"<li>
produire
préférer
:
"
.
$_post["produit"]
.
"</li>"
;
echo
"<li>
suggestion
:
"
.
$_post["opinion"]
.
"</li>"
;
?>
</ul>
</body>
informatique
modélisation
uml
objectifs
de
séance
:
instruction
de
contrôle
en
php
fonction
php
•
instruction
de
contrôle
–
instruction
pour
gérer
flot
d’exécution
–
instruction
conditionnelles
•
conditionner
l’exécution
•
semblables
à
nœud
de
décision
(diagramme
activités)
•
if...
else
...,
switch
...
case
...
–
instruction
de
boucle
•
permettre
répétition
d’un
bloc
d’instructions
•
for
...
,
foreach
...
,
while
...
,
do...
while
php
•
instruction
conditionnelles
if
...
else...
[
condition
vrai
]
bloc
d’instructions
vrai
optionnel
[
]
bloc
d’instructions
faux
...
if
(
condition
)
{
bloc
d’instructions
vrai
;
}
else
{
bloc
d’instructions
faux
;
}
if
(
$qte
>=
100)
{
$remise
=
0.10;
/*
remettre
de
10
%
offrir
*/
echo
"<p>vous
avoir
remise
de
10%!
!</p>";
}
else
{
$remise
=
0.05;
echo
"<p>vous
avoir
remise
de
5%
</p>";
}
php
•
instruction
conditionnelles
if
...
else...
–
donnée
pour
condition
pouvoir
venir
d’un
formulaire
formexemple11.html
<form
name="..."
method="post"
action="coursphp-11.php"
>
...
<select
name="prix">
<option
value="10">
super
kdo
-
10€
</option>
...
</select>
...
<input
type="number"
size="10"
name="qte"
/>
...
<input
type="submit"
value="devis"
/>
</form>
coursphp-11.php
<?php
$qte
=
$_post["qte"];
$prixunit
=
$_post["prix"];
$remise
=
0;
if
(
$qte
>=
100)
{
$remise
=
0.10;
/*
remettre
de
10
%
offrir
*/
echo
"<p>vous
avoir
remise
de
10%!
!</p>";
}
$prix
=
$prixunit
*
$qte
-
($prixunit
*
$qte
*
$remise);
echo
"
<p>
pour
prix
de
<i>
$prixunit
</i>
l'unité
<i>
$qte
</i>
unités,
avoir
à
régler
<i>
$prix
</i></p>";
?>
php
<form
name="..."
method="post"
action="coursphp-11.php"
>
<label>produit
:
</label>
<select
name="prix">
<option
value="10">
super
...
</option>
...
</select>
<br/>
<label
>quantité
:
</label>
<input
name="qte"
type="number"
size="10"
/>
<br/>
<input
type="submit"
value="devis"
/>
</form>
<?php
$qte
=
$_post["qte"];
$prixunit
=
$_post["prix"];
$remise
=
0;
....
if
(
$qte
>=
100)
{
$remise
=
0.10;
echo
"<p>vous
avoir
....
</p>";
}
...
?>
php
•
instruction
conditionnelles
if
...
else...
–
bloc
if...
else
...
pouvoir
contenir
n’importe
instruction,
comprendre
d’autres
bloc
if...
else
...
if
(
condition1
)
{
bloc
d’instructions
condition1
vraie
;
}
elseif
(condition2)
{
bloc
d’instructions
condition2
vraie
;
}
else
{
bloc
d’instructions
condition
être
fausses
;
}
php
<form
name="..."
method="post"
action="coursphp-12.php"
>
...
<select
name="prix">
...
</select>
...
<input
type="number"
...
name="qte"/>
...
<input
type="submit"
value="devis"
/>
</form>
<?php
$qte
=
$_post["qte"];
$prixunit
=
$_post["prix"];
if
(
$qte
>=
100)
{
$remise
=
0.10
;
}
elseif
(
$qte
>=
50
)
{
$remise
=
0.05
;
}
else
{
$remise
=
0
;
}
$prix
=
$prixunit
*
$qte
-
($prixunit
*
$qte
*
$remise)
;
echo
"
<p>
prix
unitaire
:
<i>
$prixunit
</i>,
quantité
:
<i>
$qte
</i>,
remettre
:
<i>"
.
$remise*100
.
"</i>
%
</p>"
;
echo
"<p><i>total
à
régler
:
</i>
<b>
$prix
</b></p>";
?>
php
•
instruction
de
boucle
:
for
–
boucle
for
permettre
de
répéter
(un
nombre
de
fois)
l’exécution
d’un
bloc
d’instructions
for
(
initialisagon
;
condition
;
incrémentation
)
{
bloc
d’instructions
à
répéter
;
}
$i
=
1
[
i
<=
6
]
echo
...
i++
[
else
]
suite...
for
(
$i
=
1
;
$i
<=
6
;
$i++)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
}
$i++
->
$i
=
$i
1
php
•
instruction
de
boucle
:
for
<?php
for
(
$i
=
1
;
$i
<=
6
;
$i++)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
}
?>
php
•
instruction
de
boucle
:
while
–
boucle
while
permettre
de
continuer
à
réaliser
bloc
d’opérations
qu’une
condition
être
vraie
$i
=
1
[
i
<=
6
]
echo
...
$i
=
$i
1
;
[
else
]
suite...
$i
=
1
;
while
(
$i
<=
6
)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
$i
=
$i
1;
}
php
•
instruction
de
boucle
:
while
donner
valeur
initiale
à
variable
$i
$i
dépasser
valeur
6
<?php
$i
=
1
;
while
(
$i
<=
6
)
{
echo
"<h$i>
titre
niveau
$i
</h$i>";
$i
=
$i
1;
}
?>
mettre
à
jour
valeur
de
variable
$i
php
•
instruction
de
boucle
:
foreach
–
boucle
foreach
permettre
de
répéter
bloc
d’instructions
pour
valeur
dans
tableau
$tableau
[
reste-t-il
valeur
?
]
$titre
recevoir
prochaine
valeur
echo
...
[
de
valeur
dans
tableau
]
suite...
foreach
($tableau
avoir
$titre
)
{
echo
"<$titre>
titre
$titre
</$titre>";
}
php
•
instruction
de
boucle
:
foreach
définir
tableau
<?php
$tableau
=
array("h1",
"h2",
"h3",
"h4",
"h5",
"h6");
foreach
($tableau
avoir
$titre
)
{
echo
"<$titre>
titre
$titre
</$titre>";
}
?>
pour
valeur
dans
tableau
php
•
instruction
de
boucle
:
foreach
–
fonctionner
pour
tableau
associatifs
définir
tableau
associatif
:
clé
=>
valeur
pour
pair
$clé
=>
$valeur
dans
$tableau
<?php
$tableau
=
array
("nom"
=>
"dupont"
,
"prenom"
=>
"jean"
,
"adresse"
=>
"qq
part
à
paris"
)
;
foreach
($tableau
avoir
$cle=>$valeur)
{
echo
"<li>
$cle
:
$valeur
</li>"
;
}
?>
php
•
instruction
de
boucle
:
boucler
imbriquer
–
être
possible
d’imbriquer
boucle
un
dans
autres
<table>
<?php
for
(
$lin
=
1
;
$lin
<=
9
;
$lin++)
{
echo
"<tr>
”;
for
(
$col
=
1
;
$col
<=
9
;
$col++)
{
echo
"<td>
"
.
($col
*
$lin)
.
"
</td>"
;
}
echo
"</tr>";
}
?>
</table>
php
•
fonction
–
php
offrir
large
panoplie
de
fonction
•
exemple
:
isset($var)
à
true
$var
être
connaître
•
exemple
:
empty($var)
à
true
$var
être
vide
(ou
valoir
0)
–
pouvoir
écrire
(même
en
dehors
classes)
•
function
nomfonction
($paramètre
,
...
)
{
instruction
}
function
salutation
(
$nom
)
{
echo
"<h1>bienvenue,
$nom!
!</h1>";
echo
"<p
class=droite>aujourd'hui,
sommes
"
.date('d
/
m
/
y').
"</p>"
;
}
php
<?php
function
salutation
(
$nom
)
{
date_default_timezone_set("europe/paris");
echo
"<h1>bienvenue,
$nom!
!</h1>";
echo
"<p
class=droite>aujourd'hui..."
.
date('d
/
m
/
y').
"</p>"
;
}
if
(
isset
($_post["client"])
and
!
!empty
($_post["client"])
)
{
salutation
(
$_post["client"]
)
;
}
else
{
salutation
("cher
client")
;
}
?>
...
<form
name="..."
method="post"
action="coursphp-15.php"
>
<label
>nom
:
</label>
<input
type="text"
name="client"
size="25"/>
...
<input
type="submit"
value="ok"
/>
</form>
php
•
importation
fichier
•
incorporer
contenu
d’un
fichier
dans
page
php
•
but
:
réutilisation
fichiers,
uniformisation
site
–
include
"fichier"
include_once
"fichier"
•
include
remplacer
ligne
par
contenu
fichier
•
include_once
faire
seule
fois
(même
dans
boucle)
–
require
"fichier"
require_once
"fichier"
•
include,
fichier
n’existe
pas,
avoir
erreur
php
<meta
charset="utf-8"
/>
...
<title>mon
site</title>
<link
rel="stylesheet"
href="css/blocs.css"
/>
<?php
function
salutation
(
$nom
)
{
echo
"<p
class=droite><b>bienvenue,
$nom!
!</b></p>";
echo
"<p
class=droite>aujourd'hui,
sommes
"
.date('d
/
m
/
y').
"</p>"
;
}
?>
<header>
<h1>mon
site</h1>
</header>
<nav>
<h2>exemples
</h2>
<ul>
<li>...</li>
...
</ul>
</nav>
<head>
<?php
include_once
"head.html";
require
"mesfonctions.php"
;
?>
</head>
<body>
<?php
include_once
"headernav.html";
?>
...
<?php
salutation
("cher
client")
;
?>
<article>
<h2>
news
</h2>
<p>
...
</p>
</article>
...
php
include_once
"head.html"
include_once
"headernav.html";
require
"mesfonctions.php"
;
salutation
("cher
client")
;
<head>
...
<title>mon
site</title>
<link
rel="stylesheet"
href="css/blocs.css"
/>
</head>
<body>
<header>
<h1>mon
site</h1>
</header>
<nav>
<h2>exemples
</h2>
<ul>
<li>...</li>
...
</ul>
</nav>
<section>
<p
class=droite><b>bienvenue,
cher
client!
!</b></p><p
class=droite>aujourd'hui,
sommes
22/
03
/
2014
</p>
...
informatique
modélisation
uml
objectifs
de
séance
:
php
&
base
de
donnée
php
•
accès
base
de
donnée
à
partir
de
php
–
php-mysql
être
utiliser
pour
site
web
–
différents
«
bibliothèque
»
disponibles
•
mysqli
pdo
•
etapes
l’utiliser
base
donnée
1)
connexion
serveur
mysql
2)
envoi
requête
sql
(select,
insert
into...)
3)
récupération
résultat
4)
fermeture
de
connexion
php
•
connexion
à
serveur
mysql
à
travers
mysqli
–
communication
avec
bdd
passer
par
objet
de
classe
«
mysqli
»
–
connexion
s’effectue
à
création
de
objet
(new)
$idcon
=
new
mysqli
(
$
host,
$user,
$mdp,
$bdd
);
objet
identifier
de
connexion
nom
serveur
utilisateur
autoriser
à
accéder
à
base
mot
de
passe
base
de
données
•
connexion
ouverte
devoir
être
fermer
$bool
=
$idcon->close
()
;
demander
à
l’objet
mysqli
de
fermer
connexion
php
astuce
:
placer
information
dans
fichier
faire
require
(ou
include)
"fichier"
création
de
l’objet
connexion
l’attribut
connect_errno
de
indique
connexion
avoir
être
établir
en
cas
de
problème,
arrêter
avec
fonction
die.
fermeture
de
connexion
<?php
$host
=
"localhost";
$user
=
"root";
$mdp
=
"root";
$bdd
=
"clientsbd";
$mysqli
=
new
mysqli
(
$host,
$user,
$mdp,
$bdd
)
;
if
(
$mysqli->connect_errno
)
{
die
("<p>
impossible
de
connecter
à
$bdd
:
"
.
$mysqli->connect_error
.
"
</p>"
)
;
}
else
{
echo
"<p>
connecter
serveur
$host,
à
base
$bdd
</p>";
$mysqli->close();
}
?>
php
•
envoyer
de
requête
à
base
de
donnée
$result
=
$mysqli->query
($sql)
;
résultat
de
requête
exécution
de
requête
sur
l’objet
connexion
requêter
sql
à
exécuter
–
requête
sql
:
•
s’il
s’agit
d’un
select,
résultat
correspondre
donnée
fournir
par
requête
(objet
mysqli_result)
•
(insert,
update,
delete...),
résultat
être
true
requête
être
exécutée,
false
php
<form
name="formnouveauclient"
action="coursphp-18.php"
method="post">
...
<input
type="text"
name="nom"
...
/>
...
<input
type="text"
name="email"
...
/>
...
<input
type="submit"
value="envoyer"
/>
</form>
php
coursphp-18.php
<?php
if
(!
!empty($_post["nom"])
and!
!empty($_post["email"]))
{
require
"connexion.php";
$mysqli
=
connexion()
;
$nom
=
$_post["nom"];
$email
=
$_post["email"];
$adr
=
$_post["adresse"];
$id
=
'\n';
/*
auto-increment
*/
$bdd
=
"clientsbd";
$sql
=
"insert
into
client
(id,
nom,
email,
adresse)
valoir
(
'$id',
'$nom',
'$email',
'$adr')
";
$result
=
$mysqli->query
($sql)
;
if
(!
!$result
)
{
echo
"<p>désolée,
...
</p>";
}
else
{
echo
"<p>
être
client
numéro
<i>
"
.
$mysqli->insert_id
.
"</i></p>";
}
$mysqli->close()
;
}
...
?>
connexion.php
<?php
function
connexion()
{
$host
=
"localhost";
$user
=
"uml";
$mdp
=
"uml";
$mysqli
=
new
mysqli
(
$host,
$user,
$mdp,
$bdd)
;
if
(
$mysqli->connect_errno
)
{
die
("<p>
impossible
..."
.
$mysqli->connect_error
.
"
</p>"
)
;
}
return
$mysqli
;
}
?>
php
•
récupération
donnée
$result
=
$mysqli->query
("select
*
from
table")
;
–
requête
select
fournir
donnée
–
récupérer
résultat
(ligne
à
ligne)
à
l’aide
opération
fetch_*
–
appel
à
fetch_*
retourner
prochaine
ligne
•
ligner
dans
tableau
à
indice
:
$result->fetch_row
()
;
•
ligne
dans
tableau
associatif
:
$result->fetch_assoc
()
;
•
ligne
dans
objet
:
$result->fetch_object
()
;
php
connexion.php
<?php
function
connexion()
{
...
$mysqli
=
new
mysqli
(
$host,
$user,
$mdp,
$bdd)
;
...
return
$mysqli
;
}
?>
exécuter
requête
avec
l’opération
$mysqli->query
l’opération
$result->fetch_object
récupérer
prochaine
ligne,
faux
s’il
n’y
rester
de
lignes.
attribut
de
requête
devenir
attribut
de
l’objet
$ligne
coursphp-19.php
<?php
require
"connexion.php"
;
$mysqli
=
connexion();
$sql
=
"select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
if
(!
!$result
)
{
echo
"<p>
desolée
...
</p>"
;
}
else
{
.
.
.
while
(
$ligne
=
$result->fetch_object()
)
{
...
echo
"<td>"
.
$ligne->id
.
"</td>";
echo
"<td>"
.
$ligne->nom
.
"</td>";
echo
"<td>"
.
$ligne->email
.
"</td>";
echo
"<td>"
.
$ligne->adresse
.
"</td>";
...
}
...
}
?>
php
même
requête
avec
récupération
information
•
...
par
tableau
à
indice
...
$sql
=
"select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
...
while
(
$ligne
=
$result->fetch_row()
)
{
...
echo
"<td>"
.
$ligne[0]
.
"</td>";
echo
"<td>"
.
$ligne[1]
.
"</td>";
echo
"<td>"
.
$ligne[2]
.
"</td>";
echo
"<td>"
.
$ligne[3]
.
"</td>";
...
}
commencer
par
0
•
...
par
tableau
associatif
...
$sql
=
"select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
...
while
(
$ligne
=
$result->fetch_assoc
()
)
{
...
echo
"<td>"
.
$ligne['id']
.
"</td>";
echo
"<td>"
.
$ligne['nom']
.
"</td>";
echo
"<td>"
.
$ligne['email']
.
"</td>";
echo
"<td>"
.
$ligne['adresse']
."<td>";
...
}
attribut
être
accessible
par
nom
php
•
autres
information
pouvoir
être
récupérer
d’un
objet
mysqli_result
(
$result
=
$mysqli->query
(...)
)
–
de
ligne
colonne
pouvoir
récupérer
•
$nblignes
=
$result->num_rows
;
•
$nbcol
=
$result->field_count
;
–
nom
colonne
(attributs)
dans
résultat
•
$colonnes
=
$result->fetch_fields()
;
php
a
partir
de
l’objet
$result,
pouvoir
récupérer
nombre
de
ligne
(attribut
num_rows)
de
colonne
par
ligne
(attribut
field_count).
...
$sql
=
"
select
id,
nom,
email,
adresse
from
client
order
by
nom
"
;
$result
=
$mysqli->query
($sql)
;
...
echo
"<p>
avoir
"
.
$result->num_rows
.
"
clients.
</p>";
echo
"<p>
avoir
"
.
$result->field_count
.
"
attribut
par
client.
</p>
"
;
pouvoir
récupérer
colonnes.
colonne
être
objet
l’attribut
name
donner
nom.
ligne
être
objet
attribut
correspondre
colonnes.
pouvoir
utiliser
foreach
pour
accéder
à
valeur
attributs.
...
$titres
=
$result->fetch_fields()
;
foreach
($titres
avoir
$colonne)
{
echo
"<th>
"
.
$colonne->name
.
"
</th>"
;
}
while
(
$ligne
=
$result->fetch_object()
)
{
echo
"<tr>"
;
foreach
(
$ligne
avoir
$colonne=>$val
)
{
echo
"<td>
"
.
$val
.
"
</td>"
;
}
echo
"</tr>"
;
}
informatique
modélisation
uml
objectifs
de
séance
:
mécanisme
de
session
php
•
mécanisme
de
session
–
visite
à
site
/
page
être
indépendante
–
session
permettre
de
conserver
information
visiteur
entre
page
–
information
sur
session
être
stocker
sur
serveur
•
fonctionnement
général
1)
ouverture
de
session
:
session_start
()
•
utilisateur
recevoir
identifier
transmettre
entre
page
2)
définition
variables
de
session
(données)
•
variables
de
session
être
transmettre
de
page
à
page
•
$_session["variable"]
=
valeur
;
3)
fermeture
de
session
:
session_destroy()
php
login
&
mdp
différents
de
uml
login
&
mdp
corrects
(uml
/uml
)
<form
name="..."
action="coursphp-23.php"
method="post"
>
<label
>login
:
</label>
<input
type="text"
name="login"
maxlength="15"
/>
<br/>
<label
>mot
de
passe
:
</label>
<input
type="password"
name="mdp"
maxlength="15"
/>
<br/>
<input
type="submit"
value="ok"
/>
</form>
php
ouverture
d’une
session
(au
début
de
page)
définition
variables
de
session
$_session["var"]
variables
de
session
contenir
information
passer
de
page
en
page.
<?php
session_start();
?>
<html>
<head>
...
</head>
<body>
<?php
...
$login
=
$_post["login"]
;
$mdp
=
$_post["mdp"];
if
(
$login
==
"uml"
and
$mdp
==
"uml"
)
{
$_session["login"]
=
$login
;
...
echo
"<h1>bienvenue,
$login
</h1>"
;
}
else
{
echo
"<h1>desolé!
!</h1>";
echo
"<p>
page
accessible
membres.
</p>";
}
?>
</body>
</html>
php
usage
variables
de
session
$_session["var"]
<?php
session_start();
?>
<html>
<head>...
</head>
<body>
<?php
if
(
isset(
$_session["login"]
)
and!
!empty(
$_session["login"]
)
)
{
$login
=
$_session["login"]
;
...
echo
"<p>client
<b>
$login
</b>
:
être
page
pour
abonnés
</p>"
;
}
else
{
echo
"<h1>desolé!
!</h1>";
echo
"<p>
s'agit
d'une
pager
privée!!
!!il
falloir
être
membre.
</p>";
}
?>
...
php
fermeture
de
session
session_destroy()
oublier
de
vider
variables
de
session
unset($_session["var"])
<?php
session_start();
?>
<html>
<head>
...
</head>
<body>
<?php
if
(
isset(
$_session["login"]
)
and!
!empty(
$_session["login"]
)
)
{
...
unset($_session["login"]);
session_destroy();
}
else
{
echo
"<h1>desolé!
!</h1>";
echo
"<p>
de
connexion
active.
</p>";
}
?>
...
php
•
mécanisme
de
session
–
base
pour
gestion
de
panier
dans
site
de
e-commerce
–
produit
choisir
par
client
être
enregistrer
en
variables
de
session
–
pouvoir
garder
objet
simples
contenir
panier
être
garder
dans
variables
de
session.
tableau
contenir
objet
ligneproduit.
$_session[$produit]
contenir
objet.
class
ligneproduit
{
public
$nom
;
public
$qte
;
/*
constructeur
*/
function
__construct(
$nom
)
{
$this->nom
=
$nom;
$this->qte
=
1;
}
}
php
produit
choisir
être
identifier
par
«
id
»
(ici
nom).
$_session[$produit]
aller
contenir
objet
ligneproduit
s’il
n’y
avoir
$_session[$produit]
,
aller
créer
nouveau
objet
ligneproduit
s’il
avoir
$_session[$produit]
,
aller
juste
augmenter
valeur
de
l’attribut
«
qte
»
dans
l’objet
ligneproduit
function
ajouterproduit($produit)
{
$qte
=
0;
if
(!
!isset
(
$_session[$produit]
)
)
{
$_session[$produit]
=
new
ligneproduit($produit);
$qte
=
$_session[$produit]->qte
}
else
{
//
produit
là,
augmenter
quantité
$objet
=
$_session[$produit]
;
$objet->qte
=
$objet->qte
1;
$qte
=
$objet->qte
;
}
return
$qte;
}
php
lorsqu’on
vouloir
supprimer
produit,
aller
réduire
quantité
dans
l’objet
ligneproduit
récupérer
l’objet
ligneproduit
garder
dans
$_session[$produit]
réduire
quantité
d’une
unité
s’il
n’en
rester
(la
quantité
avoir
atteindre
0
unités),
supprimer
produit
de
session
function
supprimerproduit($produit)
{
$qte
=
0
;
if
(
isset(
$_session[$produit]
)
)
{
$objet
=
$_session[$produit]
;
$objet->qte
=
$objet->qte
-
1;
$qte
=
$objet->qte;
if
(
$qte
<=
0)
{
//on
supprimer
produit
unset($_session[$produit]);
}
}
return
$qte;
}
php
pouvoir
récupérer
contenu
panier
en
récupérer
contenu
de
variable
de
session
$_session
pour
objet
ligneproduit
garder
dans
$_session
function
afficherpanier()
{
echo
"<table>"
;
foreach($_session
avoir
$objet)
{
echo
"<tr><td>
"
.
$objet->nom
.
"
</td>
<td>
"
.
$objet->qte
.
"
</td>
</tr>
";
}
echo
"</table>"
;
}
php
php
:
panier
avancer
•
exemple
avancer
de
panier
utiliser
classe
en
php
notion
de
session
•
panier
être
modéliser
par
classe
panier
panier
+
nbproduits
:
int
+
ajouterproduit
(code,
nom,
prix)
+
supprimerproduit
(code)
+
calculertotal
()
:
float
+
getnbproduits
()
:
int
<?php
lignepanier
{
public
$prod
;
public
$qte
;
...
}
?>
ligne
*
produire
+
code
:
string
+
nom
:
string
+
prix
:
float
<?php
produire
{
public
$code
;
public
$nom
;
public
$prix
;
...
}
?>
lignepanier
+
qte
:
int
php
:
panier
avancer
ligne
de
panier
être
garder
dans
tableau
associatif
$this->lignes[$code]
=>
$lignepanier
commencer
avec
zéro
produire
dans
panier
class
panier
{
public
$lignes
;
public
$nbproduits
;
function
__construct()
{
$this->nbproduits
=
0
;
}
...
aller
créer
tableau
de
l’ajout
premier
produit
panier
function
ajouterproduit($code,
$nom,
$prix)
{
if
(
$this->nbproduits
==
0)
{
$prod
=
new
produit($code,
$nom,
$prix);
$lp
=
new
lignepanier($prod);
$this->lignes[$code]
=
$lp;
$this->nbproduits
=
1;
}
...
php
:
panier
avancer
pour
ajouter,
vérifier
produit
être
dans
panier
s’il
est,
récupérer
mettre
à
jour
quantité
s’il
n’y
être
pas,
aller
ajouter
nouvelle
ligne
de
panier
function
ajouterproduit($code,
$nom,
$prix)
{
if
(
$this->nbproduits
==
0)
{
...
}
else
{
if
(
isset
(
$this->lignes[$code]
)
)
{
$lp
=
$this->lignes[$code]
;
$qte
=
$lp->qte;
$lp->qte
=
$qte
1;
}
else
{
$prod
=
new
produit($code,
$nom,
$prix);
$lp
=
new
lignepanier($prod);
$this->lignes[$code]
=
$lp;
$this->nbproduits
=
$this->nbproduits
1;
}
}
php
:
panier
avancer
supprimer
produit
être
dans
panier
s’il
est,
mettre
à
jour
quantité,
en
supprimer
1
unité
par
contre,
s’il
rester
(qte
<
1),
supprimer
ligne
de
panier
tableau
function
ajouterproduit($code,
$nom,
$prix)
{
if
(
isset
(
$this->lignes[$code]
)
)
{
$lp
=
$this->lignes[$code]
;
$lp->qte
=
$lp->qte
-
1
;
if
(
$lp->qte
<
1)
{
unset($this->lignes[$code]);
$this->nbproduits
=
$this->nbproduits
-
1;
}
}
}
php
:
panier
avancer
•
c’est
objet
panier
site
aller
manipuler
•
page
«
ctlpanier.php
»
aller
gérer
panier
•
pour
cela,
aller
devoir
garder
objet
panier
dans
$_session
ctlpanier
+
$_session
+
ajouterproduit
(code,
nom,
prix)
:
int
+
supprimerproduit
(code)
:
int
+
afficherpanier
()
+
terminersession
()
panier
+
nbproduits
:
int
+
ajouterproduit
(code,
nom,
prix)
+
supprimerproduit
(code)
+
calculertotal
()
:
float
+
getnbproduits
()
:
int
<?php
session_start();
include
"panier.php";
...
?>
<html>
...
</html>
php
:
panier
avancer
•
objet
panier
être
objet
complexe
•
pour
garder
dans
$_session,
aller
falloir
«
compacter
»
:
c’est
sérialisation
–
$_session["panier"]
=
serialize($panier)
–
unserialize
(
$_session["panier"]
)
pour
ajouter
supprimer
produit
panier,
aller
récupérer,
modifier
remettre
dans
session
function
ajouterproduit($produit,
$nom,
$prix)
{
...
$panier
=
unserialize($_session["panier"]);
$panier->ajouterproduit($produit,
$nom,
$prix);
$_session["panier"]
=
serialize($panier);
...
function
supprimerproduit($produit)
{
...
$panier
=
unserialize($_session["panier"]);
$panier->supprimerproduit($produit);
$_session["panier"]
=
serialize($panier);
...
