php
plan
1
généralité
sur
php
2
base
3
formulaire
4
fichier
5
cookies
6
session
7
perspectives
php
2
/
64
page
dynamiques
exemple
exemple
statique
<html>
<head><title>page
statique</title></head>
<body>
sommes
2/10/2008
</body>
</html>
problème
afficher
page
différente
en
fonction
de
l’utilisateur,
de
l’environnement,
...
solution
utiliser
langage
de
programmation
évolué,
par
exemple
php
php
présentation
langage
récent
(crée
en
1994)
verser
utiliser
:
i
4.3
(plus
répandue)
i
5.0
(avec
couche
objet)
langage
de
script
langage
interpréter
présence
d’un
interpréteur
côté
serveur
intégrer
code
html
syntaxe
proche
c
java
interface
simple
avec
de
sgbd
php
modeler
d’exécution
1
client
demander
page
php
2
serveur
web
exécuter
code
de
page
3
lancement
de
l’interpréteur
4
exécution
code
5
serveur
web
renvoyer
résultat
de
l’exécution
6
client
afficher
résultat
pour
client,
être
impossible
de
voir
code
php
seul
résultat
de
l’exécution
être
récupérer
par
client
php
premier
exemple
coder
côté
serveur
<html>
<head><title>page
dynamique</title></head>
<body>
<?php
echo
(
"nous
sommes
"
)
;
echo
(
date
(
"j/m/y"
)
);
?>
</body>
</html>
php
premier
exemple
résultat
côté
client
<html>
<head><title>page
statique</title></head>
<body>
sommes
23/10/2008
</body>
</html>
php
mélanger
html/php
php
s’intègre
dans
l’html
entre
<?php
?>
instruction
finir
par
;
commentaire
être
entre
/*
*/,
après
//
#
manuel
complet
en
français
:
http://www.php.net/manual/fr
php
plan
1
généralité
sur
php
2
base
3
formulaire
4
fichier
5
cookies
6
session
7
perspectives
php
variables
variables
être
préfixer
par
$
nom
suivre
règles
classiques
exemple
:
$my_var_03
nom
être
sensibles
à
casse
:
$var
=
$var
de
déclaration,
typage
implicite
exemple
:
$my_var_03
=
54
;
//
maintenant,
c’est
entier
$my_var_03
=
"pif"
;
//
maintenant,
c’est
chaine
attention
faute
de
frappe
dans
nom
de
variables
php
type
entiers
:
54
flottant
:
54.3
chaîne
:
”54”
’54’
booléens
:
false
true
tableau
fonction
de
test
isset($var)
:
renvoyer
true
$var
exister
unset($var)
:
détruire
$var
is_integer($var),
is_string($var),...
:
renvoyer
true
$var
être
entier,
chaîne,...
php
commentaire
constante
commentaire
après
//
:
sur
ligne
après
#
:
sur
ligne
entre
/*
*/
:
sur
ligne
constantes
définir
à
l’aide
de
commande
define
exemple
:
define("pi",
3.14)
utiliser
(sans
$)
:
echo(pi)
test
d’existence
:
defined("pi")
renvoyer
1,
defined("pi")
renvoyer
0
php
entrées/sorties
entrée
à
l’aide
de
formulaire
sortie
pouvoir
afficher
avec
commande
echo
(avec
sans
parenthèses)
print
être
équivalente
à
echo
pouvoir
faire
affichage
en
c
avec
printf
php
opérateur
arithmétiques
:
+
-
*
/
%
++
--
affectation
:
=
.=
+=
-=
*=
/=
%=
comparaison
:
==
<!
!=
>
===
<=!
!==
>=
logiques
:
and
&&
||
xor!
!
conditionnel
:
...
?
...
:
...
php
instruction
conditionnelles
if
if
(
cond
)
{
...
}
elseif
(
cond
)
{
...
}
else
{
...
}
php
instruction
conditionnelles
switch
switch
(
expr
)
{
case
valeur1
:
...
break
;
case
valeur2
:
...
break
;
default
:
...
break
;
}
php
instruction
itératives
for
for
(
init
;
cond
;
modif
)
{
...
}
while
while
(
cond
)
{
...
}
do
while
do
{
...
}
while
(
cond
)
;
php
tableau
élément
tableau
avoir
clé
valeur
de
déclaration
tableau
valeur
élément
être
même
type
exemple
remplissage
à
volée
:
$tab
[
0
]
=
54
;
$tab
[
1
]
=
"pif"
;
$tab
[
"paf"
]
=
false
;
exemple
remplissage
direct
:
$tab
=
array
(54
,
"pif"
)
;
$tab
=
array
(
"paf"
=>
false
)
;
php
parcours
de
tableau
parcours
(
classique
)
avec
for
parcours
spécifique
:
foreach
(
$tab
avoir
$value
)
{
...
}
foreach
(
$tab
avoir
$key
=>
$value
)
{
...
}
php
tableau
fonction
prédéfinies
count($tab)
:
compter
nombre
d’éléments
initialiser
current($tab)
:
retourner
valeur
de
l’élément
en
cours
key($tab)
:
retourner
l’indice
de
l’élément
en
cours
reset($tab)
:
déplacer
pointeur
vers
premier
élément
list($indice,$valeur)
avec
each($tab)
:
permettre
de
parcourir
couple
(indice,
valeur)
indice
être
consécutifs
next($tab)
:
déplacer
pointeur
vers
l’élément
suivant
prev($tab)
:
déplacer
pointeur
vers
l’élément
précédent
php
tableau
fonction
prédéfinies
sort($tab)
:
trier
valeur
réaffecter
indice
asort($tab)
:
trier
valeur
réaffecter
indice
rsort($tab)
:
id
sort
dans
l’ordre
inverse
arsort($tab)
:
id
asort
dans
l’ordre
inverse
ksort($tab)
:
trier
indice
krsort($tab)
:
id
ksort
dans
l’ordre
inverse
usort($tab,$critere),
uasort($tab,$critere),
uksort($tab,$critere)
:
trie
selon
citère
php
chaîne
de
caractère
délimiter
par
’
:
contenir
interpréter
délimiter
par
"
:
contenir
interpréter
un
pouvoir
contenir
autres
concaténation
avec
.
exemple
$pif
=
"toto"
;
//
contenir
"toto"
$paf
=
"comme
$pif"
;
//
contenir
"comme
toto"
$pouf
=
’pas
$pif’
;
//
contenir
"pas
$pif"
$bim
=
$pif.$paf
;
//
contenir
"toto
toto"
php
chaîne
de
caractère
accès
à
caractère
:
$bim[0]
strlen
(
$str
)
:
longueur
de
$str
comparaison
avec
==,
===
strcmp
php
chaîne
de
caractère
str_repeat(ch,
nb)
:
répétition
strtolower(ch)
:
minuscules
strtoupper(ch)
:
majuscules
ucwords(ch)
:
initiales
en
majuscules
ucfirst(ch)
:
1re
lettre
en
majuscule
ltrim(ch,
liste)
:
suppression
de
caractère
début
rtrim(ch,
liste)
:
suppression
de
caractère
à
fin
trim(ch,
liste)
:
suppression
de
caractère
début
à
fin
php
chaîne
de
caractère
strstr(ch,
ch2)
:
recherche
sensible
à
casse
(retourne
caractère
de
ch
depuis
1re
occurence
de
ch
jusqu’à
finn)
stristr(ch,
ch2)
:
recherche
insensible
à
casse
substr(ch,
indice,
n)
:
extraction
de
chaîne
de
caractère
substr_count(ch,
ssch)
:
décompte
nombre
d’occurences
d’une
sous-chaîne
str_replace(oldssch,
newssch,
ch)
:
remplacement
strpos(ch,
ssch)
:
position
php
fonction
function
ma_fonc
(
$param1
,
$param2
,
...
)
{
...
return
...
;
}
de
type
pour
paramètre
valeur
de
retour
nombre
fixer
de
paramètre
nom
commencer
par
$
nom
être
insensible
à
casse
résultat
être
renvoyer
avec
commande
return
seule
valeur
de
retour
passage
paramètre
par
valeur
(par
défaut)
passage
par
référence
:
&$param
php
fonction
example
function
double($n)
{
$n
*=
2;
return
$n;
}
$x
=
12
echo
"double
=
"
.
double($x)
.
"
valeur
=
"
.
$x
echo
"double
=
"
.
double(&$x)
.
"
valeur
=
"
.
$x
php
fonction
variables
utiliser
à
l’intérieur
d’une
fonction
être
détruire
à
fin,
sauf
:
définir
avec
static
définir
avec
global
php
fonction
exemple
function
ma_fonc
(
)
{
static
$appels
=
0
;
$appel
s++;
echo
(
"j’ai
ete
appellee
$appels
fois"
)
;
}
function
ma_fonc2
(
)
{
global
$var
;
$var
=
54
;
}
$var
=
0
;
ma_fonc2
(
)
;
echo
(
$var
)
;
php
inclusion
de
fichier
require
("
fichier
")
include
("
fichier
")
require_once("
fichier
")
include_once("
fichier
")
variantes
include
provoquer
warning
lieu
d’erreurs
en
cas
de
problème
variantes
_once
n’incluent
fichier
n’a
être
inclure
php
plan
1
généralité
sur
php
2
base
3
formulaire
4
fichier
5
cookies
6
session
7
perspectives
php
formulaire
entrée
l’élément
form
<form>...</form>
php
formulaire
attribut
de
l’élément
form
action
:
permettre
de
préciser
devoir
être
traiter
donnée
formulaire
côté
serveur
<form
action="traitement.php">
<form
action="http//www.site.com/script/traitement.php">
<form
action="mailto:thierry.lecroq@univ-rouen.fr">
traitement
par
fichier
<form
action="<?=$_server[’php_self’]?>">
method
:
méthode
d’envoi
donnée
vers
serveur
i
get
:
utiliser
par
défaut,
donnée
transmettre
visibles
par
l’utilisateur
http//www.site.com/script/traitement.php?prenom=thierry&nom=lecroq
i
post
:
donner
visibles
de
navigation
avec
précédent/suivant
php
élément
descendants
de
l’élément
form
<fieldset>
:
délimiter
groupe
de
composants
actifs,
contenir
l’élément
<legend>
bouton
d’envoi
<input
type="submit"
value="envoyer"
name="soumission1"
tabindex="5"
accesskey="e"
title="bouton
d’envoi"
/>
<button
type="submit"
name="soumission2"
tabindex="2"
accesskey="b"
title="bouton
d’envoi">
envoyer
</button>
php
élément
descendants
de
l’élément
form
avec
image
<button
type="submit"
name="soumission2"
tabindex="2"
accesskey="b"
title="bouton
d’envoi">
envoyer
</button>
php
élément
descendants
de
l’élément
form
bouton
de
remise
à
zéro
<input
type="reset"
value="effacer"
name="effacement"
/>
php
saisie
de
texte
saisie
de
texte
uniligne
<label>votre
nom
:
</label>
<input
type="text"
name="nom"
size="10"
maxlength="25"
value="lecroq"
onclick="this.value=’’"
/>
autres
attribut
:
disabled="disabled"
readonly="readonly"
onfocus="script"
onchange="script"
php
exemple.xhmtl
exemple
<form
method="post"
action="exemple.php">
<fieldset>
<legend>donn&eacute;es
personnelles</legend>
<label>nom
:
</label>
<input
type="text"
name="nom"
maxlength="25"
/>
</br></br>
<label>pr&eacute;nom
:
</label>
<input
type="text"
name="prenom"
value="votre
pr&eacute;nom"
maxlength="25"
onclick="this.value=’’"
/>
</br></br>
<label>adresse
:
</label>
<input
type="text"
name="adresse"
maxlength="60"
/>
<label>code
postal
:
</label>
<input
type="text"
name="codepostal"
size="5"
maxlength="5"
/>
<label>ville
:
</label>
<input
type="text"
name="ville"
maxlength="25"
/>
<input
type="submit"
name="envoi"
value="envoyer"
/>
</fieldset>
</form>
php
exemple.php
exemple
<table>
<?php
foreach
($_post
avoir
$cle
=>
$valeur)
{
echo
"<tr><td>".$cle."</td><td>".$valeur."</td></tr>";
}
?>
</table>
php
saisies
saisir
de
mot
de
passe
type="password"
saisir
de
texte
long
élément
<textarea>
attribut
cols="n"
:
largeur
de
zone
rows="n"
:
hauteur
visible
de
zone
exemple
<textarea
name="commentaires"
cols="70"
rows="10"
onclick="this.value=’’">
taper
commentaire
ici...
</textarea>
php
bouton
radio
case
à
cocher
<input
type="radio"
name="nom1"
value="valeur1"
checked="checked"
/>
<input
type="radio"
name="nom2"
value="valeur2"
/>
<input
type="checkbox"
name="nom3"
value="valeur3"
checked="checked"
/>
<input
type="checkbox"
name="nom4"
value="valeur4"
/>
php
liste
de
sélection
<select
name="nom">
<option
value="valeur1">option
1</option>
<option
value="valeur2">option
2</option>
.
.
.
<option
value="valeurn">option
n</option>
</select>
attribut
size="n"
:
nombre
de
ligne
visibles
de
l’affichage
(1
par
défaut)
multiple="multiple"
:
choix
possibles
dans
liste
(maintenir
touche
ctrl
enfoncée)
php
grouper
d’option
exemple
<select
name="nom">
<optgroup
label="groupe
1">
<option
value="valeur1">valeur
1</option>
<option
value="valeur2">valeur
2</option>
</optgroup>
<optgroup
label="groupe
2">
<option
value="valeur3">valeur
3</option>
<option
value="valeur4">valeur
4</option>
<option
value="valeur5">valeur
5</option>
</optgroup>
</select>
php
transfert
de
fichier
<form
action="fichier.php"
method="post"
enctype="multipart/form-data">
<input
type="file"
name="fichier"
accept="type
mime">
côté
serveur
en
php
:
$_files
(tableau)
php
récapitulatif
différents
type
pour
balise
input
:
text
:
zone
de
texte
sur
seule
ligne
password
:
idem,
avec
affichage
d’étoiles
file
:
permettre
sélection
d’un
fichier
checkbox
:
case
à
cocher
button
:
bouton
simple
(pas
d’action
sans
javascript)
hidden
:
champ
texte
cacher
radio
:
bouton
d’option
reset
:
bouton
de
remise
à
zéro
submit
:
bouton
de
soumission
php
plan
1
généralité
sur
php
2
base
3
formulaire
4
fichier
5
cookies
6
session
7
perspectives
php
fichier
ouverture
$fd=fopen(chemin,
mode)
mode
r
:
lecture
(read)
w
:
écriture
(write)
avoir
:
ajout
(append)
+
:
lecture/écriture
lecture
caractère
par
caractère
$car=fgetc($fd)
php
fichier
lecture
de
ligne
$ligne=fgets($fd,
[longueur])
lecture
d’octets
$v=fread($fd,
nboctets)
tailler
d’un
fichier
filesize(chemin)
php
fichier
écriture
fwrite($fd,
message,
[longueur-maximale])
fputs
fin
de
fichier
feof($fd)
fermeture
fclose($fd)
existence
d’un
fichier
file-exists(chemin)
php
plan
1
généralité
sur
php
2
base
3
formulaire
4
fichier
5
cookies
6
session
7
perspectives
php
cookies
concevoir
par
netscape
fichier
texte
courts
stocker
par
navigateur
(côté
client)
analogie
:
carte
d’identité
cookie
sans
durée
d’expiration
:
mémoire
vive
cookie
avec
durée
d’expiration
:
mémoire
secondaire
php
exemple
<?php
setcookie(’truc’,
’machin’);
?>
<html>
<head>
<title>titre</title>
</head>
<body>
<p>un
cookie
avoir
&eacute;t&eacute;
envoy&eacute;</p>
</body>
</html>
php
exemple
<html>
<head>
<title>titre</title>
</head>
<body>
<?php
if
(isset($_cookie[’truc’]))
{
echo
’<p>un
cookie
avoir
&eacute;t&eacute;
envoy&eacute;</p>’;
echo
’<p>son
contenir
être
:
’;
echo
$_cookie[’truc’];
echo
’</p>’;
}
else
{
echo
"<p>aucun
cookie
nom
de
truc
n’a
&eacute;t&eacute;
re&ccedil;u</p>";
}
?>
</body>
</html>
php
cookies
suppression
d’un
cookie
setcookie(’nom’)
modification
de
valeur
d’un
cookie
setcookie(’nom’,
nouvelle
valeur)
validité
date
d’expiration
setcookie(’nom’,
valeur,
timestamp)
timestamp
:
nombre
de
secondes
depuis
1er
janvier
1970
mktime(heures,
minutes,
secondes,
mois,
jour,
an)
php
plan
1
généralité
sur
php
2
base
3
formulaire
4
fichier
5
cookies
6
session
7
perspectives
php
persistence
donnée
vouloir
garder
de
l’information
entre
page
:
login
/
password
préférence
de
navigation
sélection
de
produit
à
acheter
(panier,
...)
utiliser
session
php.
cookies
permettre
de
stocker
information
côté
client.
session
permettre
de
stocker
information
côté
serveur.
être
identifier
par
numéro
rester
valide
visiteur
rester
connecté.
numéro
être
transmettre
serveur
dans
l’url,
dans
un
cookie.
donnée
placer
récupérer
dans
$_session,
pour
formulaires.
php
utilisation
session
session
exister
dès
qu’elle
être
créer
jusqu’à
qu’elle
être
détruire
création
(et
réouverture)
:
session_start
()
destruction
:
session_destroy
()
noter
:
session
s’autodétruisent
après
temps
(généralement
30
min)
php
php
exemple
d’utilisation
<html>
<head>
<title>connexion
site</title>
</head>
<body>
<form
method="post"
action="veriflogin.php">
<label>login</label>
<input
type="text"
name="login">
<br/>
<label>mot
de
passe</label>
<input
type="password"
name="password">
<br/>
<input
type="submit"
name="submit"
value="login">
</form>
</body>
</html>
php
<?php
//
démarrer
session
session_start();
//
n’effectue
traitement
qu’à
condition
//
information
avoir
être
postées
if
(
isset($_post)
&&
(!
!empty($_post[’login’]))
&&
(!
!empty($_post[’password’]))
)
{
extract($_post);
//
création
variables
$login,
$mdp
$submit
//
aller
chercher
mot
de
passe
afférent
à
login
//
établir
connexion,
sélectionner
base
$connexion=mysql_connect("localhost","","");
mysql_select_db("nom_de_la_base");
$sql
=
"select
pseudo,
age,
sexe,
ville,
mdp
from
user
where
login
=
’$login’";
$req
=
mysql_query($sql)
or
die(’erreur
sql
:
<br
/>’.$sql);
//
vérifier
l’utilisateur
exister
if
(mysql_num_rows($req)
>
0)
{
php
$data
=
mysql_fetch_assoc($req);
//
vérifier
mot
de
passe
être
correct
if
($password
==
$data[’mdp’])
{
$loginok
=
true;
}
else
{
$loginok
=
false;
}
}
//
fermeture
de
connexion
mysql_close($connexion);
}
//
login
avoir
être
valider
mettre
donnée
en
session
if
($loginok)
{
$_session[’pseudo’]
=
$data[’pseudo’];
$_session[’age’]
=
$data[’age’];
$_session[’sexe’]
=
$data[’sexe’];
$_session[’ville’]
=
$data[’ville’];
}
else
{
echo
’une
erreur
être
survenue,
veuillez
réessayer!
!’;
}
?>
utilisation
<?php
//
appeler
session
session_start();
//
afficher
phrase
résumer
infos
sur
l’utilisateur
courir
echo
’pseudo
:
’,$_session[’pseudo’],’<br/>’,
’age
:
’,$_session[’age’],’<br/>’,
’sexe
:
’,$_session[’sexe’],’<br/>’,
’ville
:
’,$_session[’ville’],’<br/>’;
?>
php
déconnexion
coder
de
page
logout.php
<?php
//
appeler
session
session_start();
//
écraser
tableau
de
session
$_session
=
array();
//
détruire
session
session_destroy();
?>
php
plan
1
généralité
sur
php
2
base
3
formulaire
4
fichier
5
cookies
6
session
7
perspective
php
xhtml
2.0
href
pouvoir
être
attribut
de
élément
acronym,
b,
i,
small,
big,
tt
disparaître
hr
être
remplacer
par
separator
l’attribut
role
permettre
d’ajouter
information
sémantiques
élément
(incorporation
rdf
(ressource
description
format))
<section><h>
<hn>
en
concurrence
avec
x/html
5
php
