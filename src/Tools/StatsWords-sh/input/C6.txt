php,
initiation
php,
initiation
tabler
matière
i.
cours
1.
?
1.1.
introduction
1.2.
pourquoi
document
?
1.3.
comment
a-t-il
être
construire
?
1.4.
trouver
document
?
1.5.
qbullets
généralité
sur
langage
informatiques
2.1.
qu’appelle-t-on
langage
informatique?
2.2.
langage
interpréter
2.3.
langage
compiler
2.4.
langage
intermédiaires
3.
langage
particuliers
:
langage
web
3.1.
pourquoi
programmer
?
3.2.
langage
?
3.3.
avantage
inconvénient
3.4.
choisir
4.
faq
élémentaire
sur
php
4.1.
qu’est
php
?
4.2.
différence
avec
javascript
?
4.3.
pourquoi
choisir
php
lieu
de
javascript
?
4.4.
passe-t-il
à
l’affichage
d’une
page
php
?
4.5.
intégrer
php
dans
html
?
premier
exemple
en
php
5.1.
premier
programme
5.2.
deuxième
programme
5.3.
rappel
(?)
d’algorithmique
5.4.
variables
expression
5.5.
fonction
5.6.
à
@ord@
formulaire
en
html
6.1.
présentation
6.2.
principaux
contrôle
6.3.
exemple
traitement
d’un
formulaire
en
php
7.1.
traitement
donnée
d’un
formulaire
en
php
7.2.
exercice
chaîne
de
caractère
8.1.
qu’est-ce
qu’une
chaîne
de
caractère
?
8.2.
choisir
?
guillemet
apostrophe
?
8.3.
principales
utilisation
backslash
8.4.
principales
opération
sur
chaîne
8.5.
principales
fonction
8.6.
conversion
de
type
8.7.
exercice
9.
tableau
9.1.
qu’est-ce
qu’un
tableau
?
9.2.
exemple
d’utilisation
9.3.
tableau
associatifs
9.4.
parcours
d’un
tableau
associatif
9.5.
exercice
10.
pdo
10.1.
qu’est-ce
pdo
10.2.
utilité
?
10.3.
connecter
à
base
de
donnée
10.4.
exécuter
requête
10.5.
nombre
de
ligne
colonne
d’une
requête
select
10.6.
accéder
résultat
d’une
requête
select
10.7.
gestion
erreur
programmation
séparer
en
php
11.1.
programmation
séparer
11.2.
fonction
require
include
identification
en
php
12.1.
préliminaire
:
fonction
header
12.2.
contrôle
mot
de
passe
12.3.
amélioration
:
utilisateur
12.4.
séparer
donnée
traitement
12.5.
cacher
mot
de
passe
12.6.
crypter
mot
de
passe
13.
session
13.1.
préambule
13.2.
application
:
identification
visiteur
ii.
hors
programme
14.
utiliser
php
sur
base
de
données
postgresql
14.1.
connexion
à
base
14.2.
exécution
d’une
requête
14.3.
obtention
résultat
d’une
requête
14.4.
exemple
14.5.
requête
autres
select
14.6.
suppression
message
d’erreurs
14.7.
gestion
erreur
message
peardb,
présentation
15.1.
qu’est-ce
pear
15.2.
utilité
?
15.3.
utiliser
peardb
15.4.
connecter
à
base
de
donnée
15.5.
gestion
erreur
15.6.
exécuter
requête
15.7.
accéder
résultat
d’une
requête
select
15.8.
setfetchmode()
15.9.
peardb,
information
sur
requête
dbx
16.1.
qu’est-ce
dbx
16.2.
utilité
?
16.3.
connecter
à
base
de
donnée
16.4.
exécuter
requête
16.5.
nombre
de
ligne
colonne
d’une
requête
select
16.6.
accéder
résultat
d’une
requête
select
exploration
contenu
d’un
répertoire
17.1.
notion
nécessaires
en
php
17.2.
notion
nécessaires
en
html
17.3.
exercice
18.
news
18.1.
présentation
18.2.
travail
18.3.
avoir
temps
19.
fichier
19.1.
manipulation
de
base
19.2.
exemple
19.3.
exercice
iii.
corriger
exercice
premier
exercice
d’algorithmique,
corriger
premier
formulaire
en
php,
corriger
chaîne
de
caractères,
corriger
exercice
sur
tableaux,
corriger
exercice
sur
fichiers,
corriger
exploration
d’un
répertoire,
corriger
news...,
corriger
26.1.
accueil
26.2.
liste
nom
de
fichier
de
nouvelle
26.3.
liste
lien
vers
fichier
de
nouvelle
26.4.
affichage
de
nouvelle
26.5.
affichage
titre
nouvelle
26.6.
affichage
titre
faire
lien
vers
nouvelle
26.7.
affichage
de
nouvelles,
26.8.
choix
sujet
iv.
étude
de
cas
étude
de
cas
28.
projet
disque
2009
28.1.
présentation
28.2.
base
de
donnée
29.
projet
inscription
29.1.
présentation
29.2.
base
de
donnée
30.
projet
teniraq
30.1.
présentation
30.2.
base
de
donnée
31.
projet
camping
31.1.
présentation
31.2.
information
à
conserver
31.3.
traitement
31.4.
base
de
donnée
32.
projet
association
32.1.
contenu
site
web
32.2.
condition
de
travail
32.3.
base
de
donnée
32.4.
mld
projet
association
32.5.
création
table
de
base
association
32.6.
évaluation
32.7.
dernier
conseil
33.
projet
généalogie
33.1.
généralité
33.2.
donnée
à
conserver
33.3.
traitement
donnée
33.4.
optimisation
33.5.
import-export
33.6.
mcd
projet
généalogie
33.7.
différentes
table
33.8.
différentes
contrainte
34.
projet
brazil
34.1.
description
34.2.
table
entité
34.3.
table
relation
34.4.
contrainte
projet
service
35.1.
but
de
projet
35.2.
fonctionnement
35.3.
information
techniques
35.4.
question
subsidiaire
:
gérer
l’historique
de
base
?
35.5.
vocabulaire
utiliser
35.6.
premier
ébauche
de
structure
35.7.
structure
table
35.8.
création
table
35.9.
remplir
table
de
paramètre
36.
projet
disque
36.1.
approche
naïve
36.2.
analyse
36.3.
dernières
remarque
36.4.
autre
analyse
projet
disque
36.5.
création
table
36.6.
travail
index
i.
cours
chapitrer
@ord@
?
1.1.
introduction
page
être
destiner
à
personne
avoir
programmé.
s’agit
d’un
cours
d’algorithmique.
en
particulier:
notion
de
base
de
l’algorithmique
(séquence,
alternative,
itération)
être
supposer
connaître
comprises.
traiter
de
traduction
en
php.
notion
aborder
seront:
•
langage
informatiques,
en
particulier
langage
web,
en
répondant
à
question
«
programmer
pour
web
?
».
•
notion
classiques
en
programmation,
aborder
sous
l’angle
php
:
structure
de
contrôle,
chaîne
de
caractères,
tableaux,
etc.
•
particularité
de
programmation
pour
web:
formulaire
traitement,
l’identification.
•
terminer
par
mise
en
relation
de
page
web
avec
base
de
donnée
(postgresql).
1.2.
document
?
page
avoir
pour
origine
cours
destiner
étudiant
de
2ème
année
de
l’iup
iies
de
l’université
de
lille
iii-charles
de
gaulle,
à
villeneuve
d’ascq,
pour
année
universitaires
2002-2003
2003-2004.
avoir
être
à
remanier
augmenter
à
l’occasion
d’un
courir
destiner
étudiant
de
3ème
année
de
licence
miashs.
page
être
destiner
à
être
cours
autonome
:
être
qu’un
support
de
cours,
de
choses,
être
transmettre
à
l’oral
pendant
cours,
être
écrites.
l’environnement
technique
cours
être
constituer
de
machine
sous
linux.
l’installation
de
logiciel
être
aborder
faire
partir
contenu
cours.
1.3.
a-t-il
été
construire
?
polycopié
avoir
être
rédiger
format
docbook
:
•
texte
source
avoir
être
écrire
format
xml
avec
emacs
quanta,
en
respecter
dtd
de
docbook.
•
code
source
avoir
être
compiler
format
pdf
avec
openjade
format
html
avec
xsltproc.
•
version
avoir
devant
il
avoir
être
compiler
mercredi
25
novembre
2009
à
13h58
.
1.4.
trouver
document
?
document
être
disponible
sous
format
sur
web:
•
seul
document
html
:
http://grappa.univ-lille3.fr/polys/php/php.html
(lourd
à
charger,
facile
à
sauvegarder
à
imprimer)
•
page
html
:
http://grappa.univ-lille3.fr/polys/php/index.html
(plus
faciles
à
consulter)
•
version
html
sans
feuille
de
style
:
http://grappa.univ-lille3.fr/polys/php/book1.htm
(quelle
idée
?
tenez...)
•
pdf
:
http://grappa.univ-lille3.fr/polys/php/php.pdf
chapitre
1.
?
1.5.
qbullets
petites
image
animer
illustrer
lien
de
version
web
de
document
provenir
de
qbullets
1
1.
http://www.matterform.com/
chapitre
généralité
sur
langage
informatiques
noter
:
document
issu
de
commentcamarche.net
1
être
soumettre
à
licence
gnu
fdl.
permission
être
donner
de
distribuer,
modifier
copie
de
page
note
apparaître
clairement.
2.1.
qu’appelle-t-on
langage
informatique?
appeler
langage
informatique
langage
destiner
à
décrire
l’ensemble
action
consécutives
qu’un
or-
dinateur
devoir
exécuter.
langage
naturels
(l’anglais,
français)
représenter
l’ensemble
façon
qu’ont
groupe
d’individu
de
communiquer.
langage
servir
ordinateur
à
communiquer
n’ont
à
voir
avec
langage
informatiques,
parler
dans
cas
de
protocoles,
être
deux
notion
différentes.
langage
informatique
être
façon
pratique
(humains)
de
donner
instruction
à
un
ordinateur.
langage
informatique
être
rigoureux
:
à
instruction
correspondre
action
processeur.
langage
utiliser
par
processeur,
c’est-à-dire
donnée
qu’elles
arrivent,
être
appeler
langage
machine.
s’agit
d’une
suite
de
0
de
1
(du
binaire)
pour
de
«
clarté
»
pouvoir
être
décrire
en
hexadécimal.
langage
machiner
n’est
compréhensible
par
l’humain
moyen.
être
pratique
de
trouver
langage
intermédiaire,
compréhensible
par
l’homme,
être
transformer
en
langage
machiner
pour
être
exploitable
par
processeur.
l’assembleur
être
premier
langage
informatique
avoir
être
utilisé.
celui-ci
être
proche
langage
machiner
permettre
d’être
compréhensible.
langage
être
proche
langage
machiner
qu’il
dépendre
type
de
processeur
utiliser
(chaque
type
de
processeur
pouvoir
avoir
propre
langage
machine).
programme
développer
pour
machine
pouvoir
être
porter
sur
autre
type
de
machine
(on
désigner
par
portable
programme
pouvoir
être
utiliser
sur
grand
nombre
de
machines).
pour
pouvoir
l’utiliser
sur
autre
machine
falloir
réécrire
programme!
!
langage
informatique
avoir
avantage
:
•
être
compréhensible
langage
machine,
•
permettre
grande
portabilité,
c’est-à-dire
grande
faciliter
d’adaptation
sur
machine
de
type
différents.
langage
informatiques
pouvoir
classer
en
deux
catégorie
:
langage
interpréter
langage
compilés.
2.2.
langage
interpréter
langage
informatique
être
par
définition
différent
langage
machine.
falloir
traduire
pour
rendre
intelligible
point
de
vue
processeur.
programme
écrire
dans
langage
interpréter
avoir
besoin
d’un
programmer
auxiliaire
(l’interpréteur)
pour
traduire
fur
à
mesure
instruction
programme.
2.3.
langage
compiler
programme
écrire
dans
langage
dire
«
compiler
»
aller
être
traduire
fois
pour
par
programme
annexe
(le
compilateur)
de
générer
nouveau
fichier
être
autonome,
c’est-à-dire
n’aura
besoin
d’un
programmer
autre
pour
s’exécuter
(on
dire
d’ailleurs
fichier
être
exécutable).
programme
écrire
dans
langage
compiler
avoir
avantage
de
avoir
besoin,
fois
compilé,
de
programme
annexe
pour
s’exécuter.
de
plus,
traduction
être
faire
fois
pour
toute,
être
rapide
à
l’exécution.
être
souple
programme
écrire
avec
langage
interpréter
à
modification
fichier
source
(fichier
intelligible
par
l’homme
:
aller
être
compilé)
falloir
recompiler
programme
modification
prendre
effet.
d’autre
part,
programme
compiler
avoir
pour
avantage
de
garantir
sécurité
code
source.
en
effet,
langage
interprété,
être
intelligible
(lisible),
permettre
à
n’importe
de
connaître
secret
de
http://www.commentcamarche.net/
chapitrer
généralité
sur
langage
informatiques
fabrication
d’un
programme
de
copier
code
de
modifier.
avoir
risque
de
non-respect
droit
d’auteur.
d’autre
part,
application
sécuriser
nécessiter
confidentialité
code
pour
éviter
piratage
(transaction
bancaire,
paiement
en
ligne,
communication
sécurisées,
etc.).
2.4.
langage
intermédiaires
langage
appartenir
en
sorte
deux
catégorie
(lisp,
java,
python,
etc.)
pro-
grammer
écrire
avec
langage
pouvoir
dans
condition
subir
phase
de
compilation
intermédiaire
vers
fichier
écrire
dans
langage
n’est
intelligible
(donc
différent
fichier
source)
exé-
cutable
(nécessité
d’un
interpréteur).
applets
java,
petits
programme
insérer
dans
page
web,
être
fichier
être
compiler
l’on
pouvoir
exécuter
qu’à
partir
d’un
navigateur
internet
(ce
être
fichier
l’extension
être
«
»).
chapitre
langage
particuliers
:
langage
web
3.1.
pourquoi
programmer
?
réponse
générale
s’impose
:
pour
obtenir
page
web
dynamiques.
attention,
parler
de
«
page
web
dynamiques
»
signifier
qu’on
parler
de
page
bouge
dans
sens.
s’agit
de
page
n’ont
d’existence
statique,
être
construire
à
volée,
momment
être
demander
serveur.
utilité
faire
sentir
devoir
écrire
page
devoir
s’adapter
(besoin
de
l’heure,
accès
à
base
de
données,
réponse
personnalisée,
traitement
de
formulaire,
etc.),
pour
faciliter
gestion
d’un
site
(de
grande
tailler
par
exemple),
séparation
contenu
(la
structure)
traitement
(la
présentation).
3.2.
langage
?
beaucoup.
langage
de
programmation
pouvoir
être
utilisés,
exister
langage
spécifiques
à
programmation
web.
classe
en
deux
catégorie
:
•
exécution
côté
serveur
:
php
(syntaxe
de
type
c),
asp
(serveur
microsoft),
jsp
(syntaxe
java),
cgi
(tout
langage,
plateforme),
etc.
•
exécution
côté
client
:
javascript
(syntaxe
java),
applet
java,
flash,
etc.
3.3.
avantage
inconvénients
exécution
côté
serveur
exécution
côté
client
coder
source
visible
:
n’obtient
résultat
pour
javascript
:
code
source
visible
de
l’exécution
dans
source
de
page
(ne
confier
à
javascript
contrôle
mot
de
passe
:
devoir
être
écrire
en
dans
code
source
de
page
web).
pour
applet
:
précompilé,
lisible.
rapidité
dans
dépendre
de
vitesse
de
charge
dépendre
de
vitesse
de
charge
l’exécution
serveur.
client.
compatibilité
totale
:
client
recevoir
html.
problématique
:
client
devoir
posséder
logiciel
capable
d’exécuter
script
(par
exemple
bonne
version
de
flash
de
java).
désactivation
par
impossible,
client
n’a
contrôle
simple,
suffire
de
désactiver
clientt
serveur.
logiciel.
contrôle
de
sécurité
parfaire
:
passer
sur
serveur
inexistants
:
passer
sur
client
(ne
confier
seul
javascript
contrôle
de
validité
donnée
d’un
formulaire,
quelconque
contrôle
de
sécurité).
3.4.
choisir
choisir
?
bof!
!ça
dépendre
de
qu’on
vouloir
faire.
seule
chose
c’est
fonction
importantes
(vitales
pour
l’affichage
mettre
en
jeu
sécurité
site)
devoir
être
confier
à
script
chapitrer
@ord@
langage
particuliers
:
langage
web
s’exécute
côté
client.
à
ressembler
?
trouver
de
tester
dans
page
de
fabien
torre1.
@ord@
http://grappa.univ-lille3.fr/~torre/guide.php?id=tpprogweb
chapitrer
@ord@
faq
élémentaire
sur
php
noter
:
suivre
être
extrait
condenser
provenir
de
deux
source
:
•
faq
php,
maintenir
par
armand
delcros1
•
a
brief
php
tutorial2
4.1.
qu’est
php
?
php
être
langage
de
scripting
embarquer
dans
page
html
traiter
par
serveur.
php
permettre
de
construire
page
html
contenir
résultat
de
calcul
de
requête
sql
adresser
à
système
de
gestion
de
base
de
donnée
(sgbd).
4.2.
différence
avec
javascript
?
javascript
être
en
effet
intégrer
dans
page
html
javascript
être
intéprété
par
client
web
php
être
interpréter
par
serveur
web
(s’il
être
inclure
être
module
serveur
web).
client
web
recoit
html
voir
apparaître
code
php.
4.3.
choisir
php
lieu
de
javascript
?
n’y
avoir
à
choisir
entre
php
javascript.
en
réalité
utilisation
être
différente
:
javascript
être
adapter
à
l’aspect
présentation
manipulation
client
web.
php
être
adapter
à
création
de
page
html
dynamique
rapide.
php
permettre
de
faire
page
html
dynamiques,
dans
sens
deux
appel
consécutifs
à
url
pouvoir
donner
deux
page
html
différentes.
de
page
être
statique.
pouvoir
dire
qu’au
niveau
serveur
page
être
dynamique
qu’elle
apparaître
être
statique
niveau
client
web.
javascript
permettre
de
générer
page
dynamique
pour
client
web,
c’est
un
principales
différence
entre
deux
outil
de
développement.
4.4.
passe-t-il
à
l’affichage
d’une
page
php
?
l’interpréteur
intégrer
fonctionner
de
manière
suivante
:
•
serveur
http
reconnaître
fichier
intégrer
code
php
parcourir
avant
de
l’expédier
client.
•
s’il
rencontrer
instruction
php,
transmettre
à
l’interpréteur
.
•
l’interpréteur
exécuter
l’instruction
transmettre
sortie
serveur.
•
redirige
sortir
vers
client.
importer
de
signaler
programme
php
être
transmettre
client
exécuter
sur
serveur.
poste
client
faire
de
différence
entre
page
statiques
générer
dynamiquement.
n’y
avoir
lieu
de
configurer
navigateur
pour
supporter
php.
4.5.
intégrer
php
dans
html
?
serveur
http
reconnaître
code
php
falloir
:
•
nom
document
html
terminer
par
suffixe
«
php
»
«
html
».
1.
http://perso.cybercable.fr/adelcros/docs/php/php.html
2.
http://www.linux-france.org/article/devl/php3/tut/php3_tut.html
chapitre
4.
faq
élémentaire
sur
php
•
code
php
être
délimiter
par
balise
«
<?php
»
«
?>
».
possibilité
langage
php
être
étendues,
suffire
d’une
connaissance
élémentaire
langage
pour
réaliser
application
web
courantes.
langage
disposer
d’une
bibliothèque
de
fonction
étendue.
fournir
en
particulier
interface
avec
principaux
système
de
gestion
de
base
de
donnée
avec
système
de
gestion
de
fichier
serveur.
reporter
à
documentation
langage3
pour
description
de
fonctions.
http://php.net
chapitrer
@ord@
premier
exemple
en
php
corriger
exercice
de
chapitre
trouver
chapitre
20.
5.1.
premier
programme
<html><body>
<?php
echo
"hello
world!
!";
?>
</body></html>
remarquer
«
echo1
»
servir
à
produire
affichage.
remarque
«
echo
»
afficher
texte
quel,
texte
devoir
être
entourer
de
guillemet
«
"
».
«
echo
»
essayer
de
comprendre.
par
exemple
«
echo
1+2;
»
provoquer
l’affichage
de
«
3
».
«
echo
"1+2";
»
provoquer
l’affichage
de
«
1+2
».
pour
voir
résultat
produire
:
helloworld.php2
en
aller
voir
code
source
de
page
produire
(sur
navigateur)
voir
:
<html><body>
hello
world!
!
</body></html>
c’est
normal
:
souvenez-vous
serveur
exécuter
programme
n’envoie
client
résultat,
programme
lui-même.
5.2.
deuxième
programme
<html><body>
<?php
phpinfo();
?>
</body></html>
remarque
obtenir
renseignement
possibles
sur
version
de
php
installer
sur
machine.
remarque
«
phpinfo3
»
être
fonction
:
seule
instruction
permettre
à
php
d’effectuer
de
choses.
voir
écrire
propres
fonctions.
reconnaître
fonction
parenthèse
suivent.
pour
voir
résultat
produire
:
phpinfo.php4
http://grappa.univ-lille3.fr/polys/php/exemples/helloworld.php
http://grappa.univ-lille3.fr/polys/php/exemples/phpinfo.php
chapitrer
@ord@
premier
exemple
en
php
5.3.
rappel
(?)
d’algorithmique
1.
structure
de
base
d’un
programme
être
séquence
:
instruction
être
exécuter
un
après
autres,
dans
l’ordre
être
écrites.
intructions
être
terminer
par
point-virgule
(«
;
»).
n’est
séparateur
d’instructions.
exister
structure
permettre
de
rompre
séquence.
trouver
princi-
pales.
avoir
d’autres...
@ord@
l’alternative5
:
test
être
exécuter
;
selon
résultat
oui
non,
partie
programme
autre
être
exécutée.
syntaxe
en
php
être
:
if
(test)
{
instruction
à
exécuter
réponse
être
oui
}
else
{
instruction
à
exécuter
réponse
être
}
l’itération6
(tant
que)
:
partie
programme
être
exécuter
résultat
d’un
test
être
oui
(le
calcul
être
faire
avant
entrée
dans
boucle).
syntaxe
en
php
être
:
while
(test)
{
instruction
à
exécuter
réponse
être
oui
}
5.
boucle
pour7
:
n’est
qu’un
cas
particulier
de
boucle
que.
forme
générale
être
:
for
(avant
d’entrer
;
test
;
action
de
fin
de
boucle)
{
instruction
à
exécuter
rréponse
test
être
oui
}
«
avant
d’entrer
»
«
action
de
fin
de
boucle
»
être
action
quelconques.
forme
être
équivalente
à
celle-ci
:
avant
d’entrer
;
while
(test)
{
instruction
à
exécuter
réponse
test
être
oui
;
action
de
fin
de
boucle
;
}
l’utilisera
sous
forme
:
for
(initialiser
compteur;test
compteur;incrémenter
compteur)
{
instruction
à
exécuter
réponse
test
être
oui
}
dans
l’exemple
suivant
provoquer
l’affichage
:
«
357911131517
»
:
for
($i=3
;
$i<19
;
$i=$i+2)
{
echo
$i;
}
5.4.
variables
expression
1.
nom
variables
être
préfixer
par
$.
n’est
nécessaire
de
déclarer
variables
avant
de
utiliser.
contrôle
type
être
souple...
2.
l’affectation
être
noter
«
=
».
3.
opérateur
classiques
sur
nombre
être
disponibles
:
«
+
»
(addition),
«
-
»
(soustraction),
«
*
»
(multiplication),
«
/
»
(division).
4.
seul
opérateur
sur
chaîne
être
concaténation,
symboliser
par
point
(«
.
»).
5.
http://fr.php.net/manual/fr/language.control-structures.php#control-structures.if
http://fr.php.net/manual/fr/control-structures.while.php
http://fr.php.net/manual/fr/control-structures.for.php
chapitrer
@ord@
premier
exemple
en
php
5.
opérateur
de
comparaison
être
(presque
tous)
classiques
:
«
<
»
(inférieur),
«
<=
»
(inférieur
égal),
«
>
»
(supérieur),
«
>=
»
(supérieur
égal),
«
==
»
(égal),
«!
!=
»
(différent).
6.
opérateur
logiques
de
base
être
«
||
»
(ou)
«
&&
»
(et).
5.5.
fonction
fonction
sans
paramètre
définir
par
:
function
nom_de_la_fonction
()
{
corps_de_la_fonction
}
fonction
avec
paramètre
définir
par
:
function
nom_de_la_fonction
(paramètres)
{
corps_de_la_fonction
}
paramètre
être
passer
par
valeur.
résultat
de
fonction
être
valeur
trouver
derrière
premier
instruction
return
rencontrée.
par
exemple
«
return
5;
».
n’y
avoir
de
procédure
:
vouloir
qu’une
de
fonction
comporter
procédure,
suffire
de
faire
renvoyer
valeur,
par
exemple
avec
«
return;
».
5.6.
à
dans
exercice
suivre
faire
en
sorte
résultat
être
présenter
(je
laisser
libre
choix
sur
sens
exact
de
mot...).
@ord@
écrire
programme
php
affiche
nombre
impairs
entre
0
15000,
par
ordre
croître
:
«
1
3
5
7
...
14995
14997
14999
».
exemple
:
impair.php8
2.
écrire
programme
écrire
500
fois
«
devoir
faire
sauvegarde
régulières
de
fichiers.
»
exemple
:
punition.php9
3.
écrire
programme
afficher
table
de
multiplication
par
exemple
:
multiplication.php10
:
multiplicationbis.php11.
@ord@
écrire
programme
calculer
30!
!.
exemple
:
factorielle.php12
5.
écrire
programme
affiche
:
12345678910111213
12345678910111213
12345678910111213
12345678910111213
exemple
:
4lignes.php13
6.
écrire
programme
afficher
table
de
multiplication
totale
de
{1,...,12}
par
{1,...,12}.
exemple
:
multiplicationtotale.php14
http://grappa.univ-lille3.fr/polys/php/exemples/impair.php
http://grappa.univ-lille3.fr/polys/php/exemples/punition.php
http://grappa.univ-lille3.fr/polys/php/exemples/multiplication.php
http://grappa.univ-lille3.fr/polys/php/exemples/multiplicationbis.php
http://grappa.univ-lille3.fr/polys/php/exemples/factorielle.php
http://grappa.univ-lille3.fr/polys/php/exemples/4lignes.php
http://grappa.univ-lille3.fr/polys/php/exemples/multiplicationtotale.php
chapitrer
@ord@
premier
exemple
en
php
@ord@
écrire
fonction
renvoyer
n!
!.
utiliser
fonction
pour
construire
table
factorielles.
exemple
:
tablefact.php15.
@ord@
écrire
fonction
afficher
triangle
admettre
paramètre
nombre
de
ligne
triangle
:
*
**
***
utiliser
fonction
pour
dessiner
demi-sapin
(de
2
en
2)
:
*
**
*
**
***
****
*
**
***
****
*****
******
exemple
:
demisapin.php16
coefficient
binôme
:
a.
écrire
fonction
renvoyer
n!
!.
b.
utiliser
fonction
précédente
pour
écrire
fonction
renvoyer
c.
utiliser
fonction
précédentes
dans
programme
afficher
coefficient
binôme
pour
valeur
de
n
dans
{0,1,..,20}
:
exemple
:
binome.php17
10.
suite
de
fibonnacci
être
définir
par
relation
suivantes
:
•
f
=0,
0
•
f
=1,
1
•
f
=f
+
f
pour
n>1.
n
n-1
n-2
f
=0,
f
=1,
f
=0+1=1,
f
=1+1=2,
f
=2+1=3,
f
=3+2=5,
f
=5+3=8,
f
=8+5=13...
0
1
2
3
4
5
6
7
écrire
programme
afficher
50
premier
valeur
de
f
.
n
exemple
:
fibonnacci.php18
11.
fibonnacci,
retour
:
afficher
rapport
différence
avec
nombre
http://grappa.univ-lille3.fr/polys/php/exemples/tablefact.php
http://grappa.univ-lille3.fr/polys/php/exemples/demisapin.php
http://grappa.univ-lille3.fr/polys/php/exemples/binome.php
http://grappa.univ-lille3.fr/polys/php/exemples/fibonnacci.php
chapitrer
@ord@
premier
exemple
en
php
exemple
:
fibonnacci-retour.php19
12.
afficher
cadre
10x10.
exemple
:
cadre-pre.php20
cadre-table.php21
13.
tableau
d’additions
:
faire
réaliser
par
page
php
tableau
d’additions
à
compléter
(pour
l’entraînement
d’un
enfant
calcul).
exemple
:
tableauadditionsfixe.php22
tableauadditionsvariable.php23
http://grappa.univ-lille3.fr/polys/php/exemples/fibonnacci-retour.php
http://grappa.univ-lille3.fr/polys/php/exemples/cadre-pre.php
http://grappa.univ-lille3.fr/polys/php/exemples/cadre-table.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsfixe.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsvariable.php
chapitrer
@ord@
premier
exemple
en
php
chapitrer
formulaire
en
html
6.1.
présentation
formulaire
de
saisie
permettre
à
l’utilisateur
de
fournir
information
d’obtenir
réponse
personnalisée.
information
contenir
dans
champ
remplir
par
l’utilisateur
être
transmettre
par
programme
client
serveur
transmettre
à
tour
à
programme
de
traitement,
cgi
(common
gateway
interface),
script
de
type
php.
structure
d’un
formulaire
de
saisie
être
simple,
composer
d’un
élément
form
contenir
essentielle-
mentir
suite
de
contrôle
(éléments
input,
textarea,
select,
button,
etc.)
élément
de
structuration
de
document
d’aligner
champ
d’entrée.
formulaire
présenter
sous
forme
:
<form
method="(1)"
action="(2)">
texte,
boutons,
zone
de
saisie
...
<input
type="submit"
value="(3)"
/>
</form>
:
(1)
désigner
méthode
à
utiliser
pour
envoyer
information
;
c’est
«
get
»
(par
défaut
;
donnée
formulaire
être
envoyer
dans
l’url)
«
post
»
(les
données
être
envoyer
dans
corps
message,
être
visibles
dans
l’url).
(2)
désigner
l’url
programme
(cgi,
php,
etc.)
aller
traiter
données.
(ce
pouvoir
être
mail,
c’est
déconseillé...
marcher
navigateur
de
l’utilisateur
être
configuré.
de
façon
falloir
traiter
données
après,
stocker
dans
boîte
lettre
faciliter
l’automatisation
de
tâche.)
(3)
désigner
texte
aller
apparaître
dans
bouton
d’envoi.
dans
l’affichage
de
page,
rien
distinguer
formulaire
reste
texte.
être
conseiller
de
séparer
reste
par
balise
«
<hr
/>
»
avant
après,
mettre
dans
tableau
bordure
visibles.
6.2.
principaux
contrôle
principaux
contrôle
être
:
•
input
:
zone
de
saisie,
bouton
radio
case
à
cocher
être
définir
par
contrôle
;
syntaxe
(simplifiée)
être
:
<input
type="type"
name="nom"
value="valeur"
/>
:
•
type
pouvoir
être
:
text
pour
zone
de
saisie
sens
habituel
terme
(une
zone
rectangulaire
l’utilisateur
écrire
don-
nées,
sur
seule
ligne)
;
c’est
être
dans
zone
être
envoyer
programme
de
traitement
;
password
pour
zone
de
saisie
de
mot
de
passe
(identique
à
text,
texte
saisi
n’apparaît
à
l’écran
sous
forme
d’astérisques,
pour
éviter
d’être
lisible
par
tierce
personne)
;
checkbox
pour
case
à
cocher
;
chapitre
formulaire
en
html
radio
pour
bouton
radio
(des
bouter
radio
de
même
nom
être
exclusifs)
;
submit
pour
bouton
d’envoi
;
c’est
clic
sur
bouton
envoyer
contenu
formulaire
programme
de
traitement
;
hidden
pour
variable
cacher
;
permettre
de
cacher
valeur
nécessaires
traitement
qu’on
vouloir
voir
afficher
à
l’écran
;
attention,
cacher
vouloir
dire
secret
:
valeur
être
visibles
dans
code
source
de
page
;
reset
pour
remettre
zone
de
saisie
à
valeur
par
défaut
(les
valeur
qu’elles
avoir
chargement
de
page)
;
•
nom
être
nom
de
variable
être
envoyer
programme
;
n’a
avoir
de
sens
pour
bouton
submit
reset,
c’est
nécessaire
pour
autres
;
zone
devoir
en
principe
avoir
nom
différents,
sauf
pour
bouton
radio
:
bouton
radio
de
même
nom
être
exclusifs
;
•
valoir
être
valeur
contrôle
:
•
pour
text
password
s’agit
d’une
valeur
permettre
de
pré-remplir
zone
;
•
pour
checkbox
radio
c’est
valeur
être
donner
à
variable
case
être
sélectionner
;
•
pour
submit
reset
c’est
texte
être
écrire
dans
bouton
;
•
pour
hidden
c’est
valeur
être
donner
à
variable.
•
select
:
pour
créer
liste
déroulantes
;
exemple
d’utilisation
:
<select
name="menu">
<option>premier
choix</option>
<option>deuxième
choix</option>
<option>troisième
choix</option>
</select>
zone
permettre
d’envoyer
variable
de
nom
menu
avoir
pour
valeur
choix
sélectionné.
pour
pré-sélectionner
choix
dans
liste
suffire
d’ajouter
l’attribut
selected="selected"
dans
balise
<option>
correspondante.
pouvoir
avoir
besoin
d’envoyer
valeur
différente
de
être
afficher
(par
exemple
demander
à
l’utilisateur
de
choisir
personne
par
nom
prénom,
envoyer
l’identifiant
de
personne
dans
table
d’une
base
de
données).
utiliser
l’attribut
valoir
dans
balise
<option>
par
exemple
:
<select
name="responsable">
<option
value="1">
marcel
durand</option>
<option
value="2">
georges
dupont</option>
<option
value="3">
pierre
martin</option>
</select>
dans
exemple
choisir
georges
dupont
variable
responsable
avoir
valeur
•
textarea
:
pour
zone
de
saisie
grandes
qu’avec
input
;
exemple
d’utilisation
:
<textarea
name="nom"
rows="4"
cols="40">texte
par
défaut...</textarea>
6.3.
exemple
pouvoir
trouver
deux
exemple
(presque
identiques,
sauf
pour
méthode
d’envoi
:
get
pour
l’un,
post
pour
l’autre)
adresse
suivantes
:
http://grappa.univ-lille3.fr/~gonzalez/prog/test01.html
http://grappa.univ-lille3.fr/~gonzalez/prog/test02.html
pouvoir
tester
propres
formulaire
en
suivre
instruction
de
page
:
chapitre
formulaire
en
html
http://grappa.univ-lille3.fr/~torre/enseignement/tps/formulaires
formulaire
devoir
contenir
attribut
cacher
identifier
champ
action
devoir
contenir
valeur
:
http://grappa.univ-lille3.fr/~torre/enseignement/tps/formulaires/universel.php
chapitre
formulaire
en
html
chapitrer
traitement
d’un
formulaire
en
php
corriger
exercice
de
chapitre
trouver
chapitre
7.1.
traitement
donnée
d’un
formulaire
en
php
programme
php
pouvoir
recevoir
variables.
connaître
par
avance
nom
variables
être
passer
programme,
suffire
de
appeler
par
nom
(avec
syntaxe
php,
c’est-à-dire
précéder
d’un
$).
par
exemple
l’appel
de
l’url
suivante
http://grappa.univ-lille3.fr/~gonzalez/prog/form01.php3?x=5&y=7
autoriser
l’emploi
variables
«
$x
»
(qui
valoir
5)
«
$y
»
(qui
valoir
7)
dans
programme
«
form01.php3
».
attention!
!
être
de
en
courant
de
rencontrer
serveur
configurer
en
safe
mode,
c’est-à-dire
avec
réglage
destiner
à
protéger
détournement
de
page
par
d’éventuels
pirates.
c’est
cas
avoir
accès
paramètre
truc
par
$truc
par
:
•
$_get["truc"]
$http_get_vars["truc"]
pour
envoi
par
méthode
get
:
•
$_post["truc"]
(au
choix)
par
$http_post_vars["truc"]
pour
envoi
par
méthode
post.
dans
suite
supposer
être
en
safe
mode.
question
être
:
variables
(avec
valeurs)
être
transmettre
par
formulaire
?
nom
variables
être
champ
formulaire.
pour
zone
de
saisies,
texte
tapé
être
transmettre
quel.
pour
case
à
cocher,
valeur
être
«
»
case
avoir
être
cochée,
chaîne
vide
sinon.
pour
bouton
radio
c’est
valeur
affecter
à
«
value
»
pour
bouton
sélectionné.
pour
liste
déroulantes,
c’est
valeur
affecter
à
«
option
»
pour
choix
sélectionné.
7.2.
exercice
1.
écrire
formulaire
demander
nom
l’âge
de
l’utilisateur.
bouton
submit
de
formulaire
provoquer
l’affichage
d’une
page
saluer
l’utilisateur
avec
phrase
:
«
bonjour
machin,
avoir
xx
ans...
»
(avec
bonnes
valeurs,
entendu).
exemple
:
traitement-01.html1
deux
vacancier
avoir
abandonner
à
montpellier
bébé
de
9
mois,
n’avait
être
sage.
être
surprise
6
mois
tard,
rentrer
chez
à
lille,
avoir
voir
arriver
enfant
avoir
faire
à
quatre
patte
trajet
montpellier-lille
par
l’autoroute.
écrire
formulaire
php
permettre
de
saisir
distance
parcourir
par
bébé,
nombre
d’heures
marcher
par
jour,
nombre
de
jour
qu’il
avoir
passer
sur
route.
formulaire
afficher
vitesse
bébé.
exemple
:
traitement-02.html2
3.
écrire
formulaire
demander
nom
sexe
de
l’utilisateur
(m
mme).
formulaire
appeler
page
afficher
«
bonjour
monsieur
truc
»
«
bonjour
madame
bidule
»
suivre
cas
(avec
vrai
nom
de
personne,
entendu!
!)
:
exemple
:
traitement-03.html3
4.
permis
de
chasse
à
point
remplacer
permis
de
chasse
traditionnel.
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-01.html
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-02.html
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-03.html
chapitre
traitement
d’un
formulaire
en
php
chasseur
posséder
départ
capital
de
100
points.
s’il
tuer
poule
perdre
1
point,
3
point
pour
chien,
5
point
pour
vache
10
point
s’il
tuer
meilleur
ami.
permis
coûter
1000
francs.
écrire
formulaire
php
permettre
de
saisir
liste
victime
chasseur
calculer
prix
à
payer
pour
permis
supplémentaires
nécessaires.
exemple
:
traitement-04.html4
5.
écrire
formulaire
«
calculatrice
»
:
2
case
pour
saisie
opérandes,
groupe
de
4
case
à
cocher
(ou
liste
déroulante)
pour
choix
de
l’opération,
affichage
résultat
de
l’opération.
exemple
:
traitement-05.php5
6.
écrire
formulaire
demander
deux
nombre
avoir
b.
afficher
table
de
multiplication
par
avoir
sur
b
lignes.
formulaire
devoir
souvenir
valeur
choisies.
exemple
:
traitement-06.php6
7.
écrire
formulaire
demander
mot
de
passe.
deux
mot
de
passe
différents
être
acceptés.
saluer
l’utilisateur
en
fonction
mot
de
passe
utilisé.
exemple
:
traitement-07.php7
addition
à
compléter
:
formulaire
proposer
addition
incomplète
l’utilisateur
devoir
terminer.
exemple
:
addition.php8
devinette
n◦1
:
devoir
deviner
nombre
programme
avoir
choisi.
proposer
solution,
programme
répondre
«
petit
»
«
grand
»
suivre
cas,
jusqu’à
trouver
bon
nombre.
exemple
:
devinette01.php9
devinette
n◦2
:
même
chose
l’exercice
précédent,
rôle
être
inverser
(c’est
programme
devine).
exemple
:
devinette02.php10
11.
pipotron
:
l’ordinateur
aider
à
écrire
n’importe
quoi.
exemple
:
pipotron.php11
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-04.html
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-05.php
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-06.php
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-07.php
http://grappa.univ-lille3.fr/polys/php/exemples/addition.php
http://grappa.univ-lille3.fr/polys/php/exemples/devinette01.php
http://grappa.univ-lille3.fr/polys/php/exemples/devinette02.php
http://grappa.univ-lille3.fr/polys/php/exemples/pipotron.php
chapitrer
chaîne
de
caractère
corriger
exercice
de
chapitre
trouver
chapitre
22.
création
de
page
web
nécessiter
plupart
temps
manipulation
de
chaîne
de
caractères.
aller
en
explorer
principales
fonction
disponibles
en
php.
8.1.
qu’est-ce
qu’une
chaîne
de
caractère
?
trois
chose
à
savoir
:
@ord@
mot
anglais
désigner
chaîne
de
caractère
être
«
string
»
(utile,
documentation
être
en
anglais).
avoir
à
portée
de
main
documentation
de
php.
et,
d’après
point
précédent,
aller
voir
chapitre
string1.
3.
chaîne,
c’est
n’importe
entourer
de
guillemet
(«
"
»)
d’apostrophes
(«
’
»).
deux
exemple
:
"je
suis
chaîne
de
caractères."
’je
suis
chaîne
de
caractères.’
8.2.
choisir
?
guillemet
apostrophe
?
c’est
pareil,
sauf
:
•
commencer
par
l’un,
finir
par
même.
deux
exemple
être
chaîne
de
caractère
:
"je
suis
chaîne
de
caractères.’
’je
suis
chaîne
de
caractères."
•
chaîne
contenir
apostrophes,
utiliser
guillemets,
chaîne
contenir
guillemets,
utiliser
apostrophes.
par
exemple
:
"j’en
révais..."
’il
avoir
dire
"bonjour".’
remarque
chaîne
devoir
contenir
deux,
pouvoir
utiliser
caractère
backslash
(«
\
»)
:
’j\’en
révais...
m\’a
dire
"bonjour".’
"j’en
révais...
m’a
dire
\"bonjour\"."
•
variables
être
interpréter
dans
guillemets,
dans
apostrophes.
par
exemple
variable
$a
valoir
5,
l’instruction
«
echo
"$a";
»
afficher
«
5
»,
«
echo
’$a’;
»
afficher
«
$a
».
être
de
caractère
précéder
caractère
backslash
(sauf
«
\’
»).
8.3.
principales
utilisation
backslash
caractère
backslash
(«
\
»)
permettre
d’introduire
dans
chaîne
caractère
pouvoir
être
(par
exemple
guillemet
dans
chaîne
entourer
de
guillemets,
retour
à
ligne,
etc...).
être
de
fait
caractère
spécial,
falloir
façon
particulière
de
noter
pour
qu’il
être
inclure
dans
chaîne.
être
«
\\
».
tableau
récapituler
principales
utilisation
backslash
:
http://fr.php.net/manual/fr/ref.strings.php
chapitrer
chaîne
de
caractère
tableau
8-1.
principales
utilisation
backslash
coder
signification
\n
retour
à
ligne
\t
tabulation
\\
backslash
(«
\
»)
\"
guillemet
(«
"
»)
dans
chaîne
entourer
de
guillemet
\’
apostropher
(«
’
»)
dans
chaîne
entourer
d’apostrophes
\$
dollar
(«
$
»)
8.4.
principales
opération
sur
chaîne
affectation
:
variable,
l’affectation
d’une
variable
chaîne
faire
par
symbole
«
=
»
:
$a="bla
bla
bla
bla...";
affichage
:
valeur,
l’affichage
faire
par
l’instruction
«
echo
».
concaténation
:
l’opérateur
de
concaténation
être
point
(«
.
»).
8.5.
principales
fonction
s’agit
fonction
principales,
être
expliquées,
signifier
qu’il
falloir
aller
voir
dans
documentation
de
php2
par
propre
moyens.
conversion
majuscules-minuscules
:
«
strtolower3
».
conversion
minuscules-majuscules
:
«
strtoupper4
».
découper
chaîne
:
«
explode5
»
«
split6
»
(renvoient
tableau).
fonction
inverses
être
«
implode7
»
«
join8
»
enlever
espace
en
début
fin
d’une
chaîne
:
«
ltrim9
»,
«
chop10
»,
«
trim11
».
longueur
d’une
chaîne
:
«
strlen12
»
http://fr.php.net/manual/fr/ref.strings.php
http://fr.php.net/manual/fr/function.strtolower.php
http://fr.php.net/manual/fr/function.strtoupper.php
http://fr.php.net/manual/fr/function.explode.php
http://fr.php.net/manual/fr/function.split.php
http://fr.php.net/manual/fr/function.implode.php
http://fr.php.net/manual/fr/function.join.php
http://fr.php.net/manual/fr/function.ltrim.php
http://fr.php.net/manual/fr/function.chop.php
http://fr.php.net/manual/fr/function.trim.php
http://fr.php.net/manual/fr/function.strlen.php
chapitrer
chaîne
de
caractère
position
d’une
chaîne
dans
autre
:
«
strpos13
»
remplacer
partie
d’une
chaîne
par
autre
:
«
str_replace14
»
«
substr_replace15
»
extrait
d’une
chaîne
:
«
substr16
»
8.6.
conversion
de
type
php
être
extrémement
tolérer
sur
conversion
de
type
essayer
de
faire
possible.
n’en
profiter
prévoir
(et
comprenez)
comportement,
éviter
sans
doute
déconvenues...
exemple
de
qu’on
pouvoir
faire
(mais
éviter
d’en
abuser...)
:
<?php
$truc
=
"5";
echo
$truc."
".gettype($truc)."<br
/>\n";
$truc
=
$truc."2";
echo
$truc."
".gettype($truc)."<br
/>\n";
$truc
=
$truc*5;
echo
$truc."
".gettype($truc)."<br
/>\n";
$truc
=
$truc."2";
echo
$truc."
".gettype($truc)."<br
/>\n";
$truc
=
$truc/100;
echo
$truc."
".gettype($truc)."<br
/>\n";
?>
programme
afficher
:
5
string
52
string
260
integer
2602
string
260.2
double
remarquer
commande
«
echo
$truc."
".gettype($truc)."<br
/>\n";
»
provoquer
l’affichage
de
valeur
de
$truc,
suivre
de
type,
étant
terminer
par
passage
à
ligne.
8.7.
exercice
écrire
formulaire
devoir
vérifier
l’identité
de
l’utilisateur
en
demander
nom,
prénom
mot
de
passe
(ce
dernier
devoir
apparaître
à
l’écran
pendant
frappe).
l’utilisateur
n’est
reconnu,
seul
s’affiche
formulaire.
l’utilisateur
être
reconnu,
seul
s’affiche
message
d’accueil.
casse
valeur
devoir
être
prendre
compter
(c’est-à-dire
fait
être
taper
en
majuscule
en
minuscule
devoir
changer
comportement
pages).
espace
taper
en
début
en
fin
de
mot
de
passe,
de
nom
de
prénom
devoir
être
éliminés.
http://fr.php.net/manual/fr/function.strpos.php
http://fr.php.net/manual/fr/function.str-replace.php
http://fr.php.net/manual/fr/function.substr-replace.php
16.
http://fr.php.net/manual/fr/function.substr.php
23
chapitre
chaîne
de
caractère
trouver
exemple
sur
page
identite.php17
17.
http://grappa.univ-lille3.fr/polys/php/exemples/identite.php
chapitre
9.
tableau
corriger
exercice
de
chapitre
trouver
chapitre
23.
stockage
manipulation
d’un
grand
nombre
de
donnée
nécessiter
l’utilisation
de
tableaux.
9.1.
qu’est-ce
qu’un
tableau
?
pour
simplifier,
3
définition
équivalentes
:
•
c’est
variable
pouvoir
stocker
valeur
à
fois,
étant
numéroter
;
•
:
c’est
ensemble
de
variables
différentes,
regrouper
sous
même
nom,
étant
différencier
autres
par
numéro
;
•
:
c’est
représentation
informatique
d’un
vecteur
(ou
d’une
matrice),
composante
être
connaître
par
indice.
d’une
maniérer
générale
:
•
tableau
être
d’abord
variable,
nom
commencer
par
dollar
(«
$
»).
•
syntaxe
pour
accéder
case
d’un
tableau
être
même
dans
plupart
langage
:
«
$x[5]
»
désigner
5ème
élément
tableau
«
$x
».
remarque
en
php
numérotation
élément
d’un
tableau
commencer
à
zéro.
9.2.
exemple
d’utilisation
9.2.1.
remplir
afficher
contenu
tableau
pouvoir
remplir,
par
exemple,
case
d’un
tableau
un
par
un
:
$t[0]="bonjour";
$t[1]="bonsoir";
$t[2]="bla
bla
bla";
pouvoir
utiliser
boucle
for
pour
remplir
série
de
case
:
for
($i=3
;
$i<8
;
$i++)
{
$t[$i]=$i*5;
}
pour
de
l’affichage,
être
obliger
de
passer
par
case
un
par
un
:
l’utilisation
de
«
echo
$t;
»
permettre
d’afficher
contenu
tableau.
echo
"case
numéro
2
:
".$t[2]."<br
/>\n";
for
($i=2
;
$i<6
;
$i++)
{
echo
"case
numéro
$i
:
".$t[$i]."<br
/>\n";
}
chapitre
9.
tableau
9.2.2.
exemple
complet
en
regrouper
ligne
précédentes
(et
en
habiller
peu)
obtenir
programme
suivant
(tableau-01.php1)
:
<html><body>
<h2>remplissage
tableau</h2>
(il
passer
à
l’écran
dans
partie
:
normal,
c’est
travail
sur
modification
variables,
par
sur
affichage.)
<?php
$t[0]="bonjour";
$t[1]="bonsoir";
$t[2]="bla
bla
bla";
for
($i=3
;
$i<8
;
$i++)
{
$t[$i]=$i*5;
}
?>
<h2>affichage
de
case
particulières</h2>
<?php
echo
"case
numéro
2
:
".$t[2]."<br
/>\n"
."case
numéro
5
:
".$t[5]."<br
/>\n";
?>
<h2>affichage
d’une
suite
de
cases</h2>
<?php
for
($i=2
;
$i<6
;
$i++)
{
echo
"case
numéro
$i
:
".$t[$i]."<br
/>\n";
}
?>
</body></html>
9.3.
tableau
associatifs
s’agit
d’une
généralisation
tableaux,
lieu
d’utiliser
nombre
pour
indice
pouvoir
utiliser
n’importe
quoi...
programme
(tableau-04.php2)
permettre
de
choisir
prénom
dans
liste
déroulante
d’afficher
renseignement
correspondants.
<html><body>
<form
action="tableau-04.php">
<select
name="prenom">
<option
value="thècle">thècle</option>
<option
value="édith">édith</option>
<option
value="kelly">kelly</option>
<option
value="mélusine">mélusine</option>
<option
value="elmer">elmer</option>
</select>
<input
type="submit"
value="renseignements"
/>
</form>
<?php
$nom["thècle"]="assicmonpote";
$nom["édith"]="avuleur";
$nom["kelly"]="diocy";
$nom["mélusine"]="enfaillite";
$nom["elmer"]="hitmieux";
$adresse["thècle"]="123
rue
alex
kuzbidon";
$adresse["édith"]="951
rue
ondin
oucesoir";
$adresse["kelly"]="5
boulevard
roser
remecitoyens";
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-01.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-04.php
chapitrer
@ord@
tableau
$adresse["mélusine"]="7
rue
jean
tanlamer";
$adresse["elmer"]="99
avenu
dino
zore";
$ville["thècle"]="rennes";
$ville["édith"]="douarnenez";
$ville["kelly"]="auchel";
$ville["mélusine"]="chamonix";
$ville["elmer"]="langres";
if
(isset($prenom))
{
echo
"prénom
:
$prenom<br
/>\nnom
:
".$nom[$prenom]
."<br
/>\nadresse
:
".$adresse[$prenom]
."<br
/>\nville
:
".$ville[$prenom];
}
?>
</body></html>
9.4.
parcours
d’un
tableau
associatif
travailler
avec
tableau
classique
(à
indice
numérique),
être
facile
d’en
parcourir
case
avec
boucle
for.
pour
parcourir
tableau
associatif,
c’est
direct.
méthode
classique
marcher
:
fonction
count3
donner
résultat
exploitable
dans
cas
d’un
tableau
associatif.
être
difficile
d’imaginer,
par
exemple
pour
l’exemple
précédent,
boucle
construire
suite
«
thècle,
édith,
kelly,
mélusine,
elmer
».
valeurs,
falloir
aller
chercher
dans
tableau
lui-même.
énerver
pas,
php
fournir
qu’il
faut.
structure
foreach4
permettre
de
parcourir
tableau
associatif,
dans
programme
suivant
(tableau-05bis.php5).
programme
tableau-05bis.php6
parcourir
tableau
$nom,
afficher
contenu,
ligne
d’affichage
contenir
couple
clef-valeur
(la
clef
correspondre
à
qu’on
avoir
l’habitude
d’appeler
indice
s’agit
d’un
nombre)
:
<html><body><table
border="border">
<?php
$nom["thècle"]="assicmonpote";
$nom["édith"]="avuleur";
$nom["kelly"]="diocy";
$nom["mélusine"]="enfaillite";
$nom["elmer"]="hitmieux";
foreach
($nom
avoir
$clef
=>
$valeur)
{
echo
"<tr><td>$clef</td><td>$valeur</td></tr>\n";
}
?>
</table></body></html>
.
9.5.
exercice
disposer
fichier
suivre
contenir
adresse
web
(rien
empêcher
d’en
choisir
d’autres).
écrire
programme
(tableau-06.php7)
lire
fichier
pour
construire
page
web
contenir
liste
de
lien
hypertextes
(tableau-06.txt8).
http://www.hoaxbuster.com/
http://fr.php.net/manual/fr/function.count.php
http://fr.php.net/foreach
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-05bis.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-05bis.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-06.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-06.txt
chapitre
9.
tableau
http://www.gazel.nu/faqs/virus.htm#e-mail
http://www.electriccafe.org/jbt/
http://www.zetetique.ldh.org/
http://perso.wanadoo.fr/jean.brissonnet/
http://www.thejackytouch.com/
http://www.multimania.com/lepoulpe
même
exercice
(tableau-07.php9),
fois
ligne
comprendre
description
site
pointé,
séparation
être
assurer
par
chaîne
«
"**"
»
(tableau-07.txt10)
:
http://www.hoaxbuster.com/**hoaxbuster,
première....
http://www.gazel.nu/faqs/virus.htm#e-mail**est-il....
http://www.electriccafe.org/jbt/**nemo
joe
bar
team
spirit
http://www.zetetique.ldh.org/**le
cercle
zététique
http://perso.wanadoo.fr/jean.brissonnet/**éthique
toc
http://www.thejackytouch.com/**the
jacky
touch
http://www.multimania.com/lepoulpe**le
poulpe
sur
toile
même
exercice
(tableau-08.php11),
fois
description
l’adresse
correspondante
être
sur
deux
ligne
consécutives
(tableau-08.txt12)
:
hoaxbuster,
premier
ressource
francophone
sur
hoax
http://www.hoaxbuster.com/
est-il
possible
d’attraper
virus
en
ouvrant
e-mail
?
http://www.gazel.nu/faqs/virus.htm#e-mail
nemo
joe
bar
team
spirit
http://www.electriccafe.org/jbt/
cercle
zététique
http://www.zetetique.ldh.org/
éthique
toc
http://perso.wanadoo.fr/jean.brissonnet/
the
jacky
touch
http://www.thejackytouch.com/
poulpe
sur
toile
http://www.multimania.com/lepoulpe
donner
liste
de
personne
(tableau-09.txt13)
premier
ligne
:
19;thor;aipaleur;tata
30;dick;sionnaire;dsds
35;debbie;zoudanlkou;dzdz
47;mélanie;zaitofrai;mzmz
48;helmut;ardelpic;haha
49;jacques-andré;lejouré-lanuit;jljl
68;phil;alapate;papa
ligne
être
composée,
dans
l’ordre,
d’un
identifier
(un
nombre),
prénom,
nom,
mot
de
passe.
écrire
page
web
(tableau-09.php14)
donner
à
sélectionner
personne
afficher
mot
de
passe.
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-07.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-07.txt
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-08.php
12.
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-08.txt
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-09.txt
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-09.php
chapitrer
10.
pdo
10.1.
qu’est-ce
pdo
texte
être
extraire
de
«
xxvii.
fonction
pdo1
»,
chapitre
manuel
php
sur
sur
php
net2.
l’extension
php
dater
objects
(pdo)
définir
excellente
interface
pour
accéder
à
base
de
donnée
depuis
php.
pilote
de
base
de
donnée
implémenté
dans
l’interface
pdo
pouvoir
utiliser
fonctionnal-
ités
spécifiques
de
base
de
donnée
en
utiliser
extension
de
fonctions.
noter
pouvoir
exécuter
fonction
de
base
de
donnée
en
utiliser
l’extension
pdo
par
;
devoir
utiliser
driver
pdo
spécifique
à
base
de
données3
pour
accéder
serveur
de
base
de
données.
pdo
fournir
interface
d’abstraction
à
l’accès
de
données,
signifier
utiliser
mêmes
fonction
pour
exécuter
requête
récupérer
donnée
base
de
donnée
utilisée.
pdo
fournir
abstraction
de
base
de
donnée
:
réécrire
sql,
n’émule
fonctionnalité
manquantes.
devoir
utiliser
interface
d’abstraction
complète
avoir
besoin
de
cela.
pdo
être
fournir
avec
php
5.1
être
disponible
en
qu’extension
pecl
pour
php
5.0
;
pdo
requérir
nouvelles
fonctionnalité
oo
fournir
par
php
5
donc,
fonctionner
avec
version
antérieures
de
php.
10.2.
utilité
?
l’hétérogénéité
moyens
d’accès
base
de
donnée
avoir
être
un
problème
gênants
en
php.
problème
venir
fait
que,
par
exemple,
fonction
permettre
l’accès
à
base
postgresql
être
différentes
de
pour
mysql,
être
différentes
de
pour
sqlite,
etc.
avoir
pour
effet
de
rendre
difficile
migration
d’un
système
vers
autre
:
avoir
écrire
(par
exemple
en
cours)
site
utiliser
base
postgresql
vouloir
transférer
chez
hébergeur
n’offre
mysql
(comme
c’était
par
exemple
cas
pour
free
avoir
de
temps)
:
seule
solution
être
de
reprendre
(et
corriger)
dans
page
appel
à
fonction
concernant
postgresql.
pouvoir
en
avoir
beaucoup...
couche
d’abstraction4
permettre
d’éviter
problème
:
accès
à
base
de
donnée
passer
par
(avec
même
syntaxe,
base
de
données)
c’est
débrouiller
pour
s’adapter
à
base
de
donnée
utilisée.
pour
changer
de
base
de
donnée
(passer
de
postgresql
à
mysql
par
exemple)
n’avez
en
général
qu’à
modifier
ligne,
donner
paramètre
de
base
de
donnée
utilisée.
10.3.
connecter
à
base
de
donnée
texte
être
extraire
de
«
fonction
pdo5
»,
chapitre
manuel
php
sur
sur
php
net6.
connexion
être
établir
en
créer
instance
de
classe
de
base
de
pdo.
pouvoir
importer
driver
vouloir
utiliser
;
utiliser
nom
de
classe
pdo.
constructeur
accepter
paramètre
pour
spécifier
source
de
base
de
donnée
(connue
en
dsn)
optionnellement,
nom
d’utilisateur
mot
de
passe
(s’il
avoir
un).
suffire
d’exécuter
commande
$dbh
=
new
pdo("type_de_base:host=machine_qui_héberge_la_base;dbname=nom_de_la_base",
"nom_d_utilisateur",
"mot_de_passe)
;
nom
de
variable
$dbh
être
sans
importance.
n’est
qu’une
variable,
pouvoir
donner
nom
plaît.
falloir
garder
à
l’esprit
qu’il
falloir
conserver
variable
(quelque
nom),
c’est
permettre
d’accéder
à
base
de
donnée
avec
fonction
section
suivants.
http://fr.php.net/manual/fr/ref.pdo.php
http://fr.php.net/
http://fr.php.net/manual/fr/ref.pdo.php#pdo.drivers
exister
d’autres
couche
d’abstraction
:
dbx,
phplib,
adodb,
metadata,
pear-db,
etc.
5.
http://fr.php.net/manual/fr/ref.pdo.php
6.
http://fr.php.net/
chapitre
10.
pdo
type_de_base
quant
à
être
valeur
parmi
:
•
mssql
(freetds/microsoft
sql
server/sybase),
•
firebird
(firebird/interbase
6),
•
informix
(ibm
informix
dynamic
server),
•
mysql
(mysql
3.x/4.x/5.x),
•
oci
(oracle
call
interface),
•
odbc
(odbc
v3
--ibm
db2
unixodbc
win32
odbc--)),
•
pgsql
(postgresql),
•
sqlite
(sqlite
3
sqlite
2).
reporter
à
page
«
fonction
pdo7
»
pour
gestion
erreur
de
connexion.
connexion
à
base
de
donnée
avoir
réussi,
instance
de
classe
pdo
être
retourner
à
script.
connexion
être
active
l’objet
pdo
l’est.
pour
clore
connexion,
devoir
détruire
l’objet
en
assurer
référence
être
effacées.
pouvoir
faire
assigner
null
à
variable
gérant
l’objet.
faire
explicitement,
php
fermer
connexion
script
arriver
à
fin.
10.4.
exécuter
requête
trouver
d’information
sur
page
pdo->query()8
manuel
php.
en
avoir
obtenir
identifier
de
connexion
$dbh
(instance
de
classe
de
base
de
pdo)
précédemment,
syntaxe
être
simple
:
$res
=
$dbh->query(votre_requête)
;
valeur
renvoyer
(rangée
dans
variable
$res)
n’est
résultat
de
l’exécution
de
requête,
identifier
(propre
système,
valeur
réelle
intéresser
pas9)
permettre
d’accéder
résultat
grâce
fonction
décrire
ci-dessous.
10.5.
nombre
de
ligne
colonne
d’une
requête
select
pouvoir
obtenir
nombre
de
ligne
de
colonne
résultat
d’une
requête
de
type
select
:
$result
=
$dbh->query(’select
id
from
table’)
;
echo
$result->rowcount()
;
//
nombre
de
ligne
echo
$result->columncount()
;
//
nombre
de
champ
avertissement
avec
gestionnaire
de
base
de
donnée
(en
particulier
sqlite)
arriver
méthode
rowcount()
fonctionner
pas.
dans
cas-là,
remplacer
$res->rowcount()
par
count($data)
(où
$data
être
égal
à
count($result->fetchall()),
voir
section
10.6),
produire
même
effet.
d’informations
sur
php
net
pour
rowcount()10
columncount()11.
http://fr.php.net/manual/fr/ref.pdo.php
http://fr.php.net/manual/fr/function.pdo-query.php
faire
c’est
un
objet.
@ord@
http://fr.php.net/manual/fr/function.pdostatement-rowcount.php
11.
http://fr.php.net/manual/fr/function.pdostatement-columncount.php
chapitre
10.
pdo
10.6.
accéder
résultat
d’une
requêter
select
$result
être
résultat
valide
renvoyer
par
$dbh->query(),
$result->fetchall()
renvoyer
tableau
à
2
dimension
contenir
résultat
:
premier
indice
concerner
lignes,
deuxième
concerner
colonnes.
d’informations
sur
php
net
pour
fetchall()12.
10.6.1.
accès
par
nom
colonne
exemple
:
$result
=
$dbh->query("select
*
from
villes");
$data
=
$result->fetchall();
foreach
(
$data
avoir
$row
)
{
echo
$row["codepostal"]."
-
".$row["ville"]."<br
/>\n";
}
10.6.2.
accès
par
numéro
colonne
exemple
:
$result
=
$dbh->query("select
*
from
villes");
$data
=
$result->fetchall();
foreach
(
$data
avoir
$row
)
{
for
($i=0
;
$i<$result->columncount()
;
$i++)
{
echo
$row[$i]."
**
";
}
echo
"<br
/>\n";
}
10.6.3.
accès
par
numéro
ligne
numéro
colonne
exemple
:
$result
=
$dbh->query("select
*
from
villes");
$data
=
$result->fetchall();
for
($l=0;$l<$result->rowcount();$l++)
{
for
($i=0;$i<$result->columncount();$i++)
{
echo
$data[$l][$i]."
**
";
}
echo
"<br
/>\n";
}
10.7.
gestion
erreur
instruction
pdo
échoue,
message
n’est
affiché.
pouvoir
croire
à
tort
s’est
passé.
être
important
de
savoir
obtenir
information
sur
d’éventuelles
erreurs.
pour
avoir
information
précises
lignes,
aller
voir
page
être
extraites13
sur
php.net14.
pour
suite
continuer
à
placer
dans
cas
avoir
obtenir
identifier
de
connexion
$dbh
(instance
de
classe
de
base
de
pdo).
12.
http://fr.php.net/manual/fr/function.pdostatement-fetchall.php
13.
http://fr.php.net/manual/fr/pdo.error-handling.php
14.
http://fr.php.net/
chapitre
10.
pdo
10.7.1.
code
d’erreur
méthode
$db->errorcode()
renvoyer
code
d’erreur
associer
avec
dernière
opération
effectuer
sur
base
de
données.
valeur
être
0
(zéro)
n’y
avoir
avoir
d’erreur.
10.7.2.
information
associer
à
l’erreur
méthode
$db->errorinfo()
renvoyer
information
associer
à
l’erreur
survenir
de
dernière
opération
sur
base
de
données.
s’agit
d’un
tableau
contenir
champ
décrire
tableau
10-1.
tableau
10-1.
champs
de
$db->errorinfo()
élément
information
0
code
erreur
sqlstate
(un
identifier
alphanumérique
de
cinq
caractère
définir
dans
standard
ansi
sql).
1
code
erreur
spécifique
driver.
2
message
d’erreur
spécifique
driver.
code
erreur
sqlstate
n’est
défini
s’il
n’y
avoir
d’erreur
spécifique
driver,
l’élément
suivant
l’élément
0
être
définir
à
null.
10.7.3.
exemple
de
traitement
d’erreur
pour
gérer
éventuelles
erreurs,
méthode
précédentes
pouvoir
être
utiliser
de
façon
(ici
exé-
cute
requête
$req
définir
par
ailleurs)
:
$db->query($req);
//
exécution
de
reqête
if
($db->errorcode()!
!=0)
{
//
avoir
erreur
echo
"<b>erreur</b>
sur
requête
<tt>$req</tt><br
/>\n";
$t=$db->errorinfo();
//
récupération
information
sur
l’erreur
echo
"<b>code
erreur
sqlstate
:</b>
".$t[0]."<br
/>\n";
echo
"<b>code
erreur
spécifique
driver
:</b>
".$t[1]."<br
/>\n";
echo
"<b>message
d’erreur
:</b><blockquote><p>".$t[2]."</p></blockquote>\n";
echo
"<b>le
programme
avoir
être
interrompu</b>";
die();
}
chapitrer
programmation
séparer
en
php
11.1.
programmation
séparer
programmation
séparer
c’est
écrire
programme
en
petits
fichier
lieu
d’un
seul
gros.
avantage
:
•
fichier
petits
être
faciles
à
relire,
comprendre,
modifier,
tester
corriger.
•
permettre
de
faire
travailler
personne
sur
même
programme
en
temps.
•
permettre
de
regrouper
fonction
être
dans
même
domaine
(chaque
fichier
avoir
propre
cohérence).
•
être
facile
de
réutiliser
travail
fait.
11.2.
fonction
require
include
fonction
«
require1
»
«
include2
»
permettre
d’inclure
fichier
dans
autre.
être
dire
par
exemple
:
commande
require
remplacer
par
contenu
fichier
spécifié.
différentes
façon
d’utiliser
fonction
:
@ord@
pour
rendre
homogène
présentation
d’un
site,
écrire
seule
fois
début
(avec
partie
head,
couleur
de
fond,
couleur
de
texte,
présentation
grand
titre,
etc.)
fin
de
page
(avec
par
exemple
signature
adresse
mail)
dans
fichier
séparer
contenter
d’ajouter
dans
feuille
require
début
un
à
fin
sur
fichiers.
2.
partie
de
code
être
identique
dans
pages,
l’écrit
seule
fois
dans
fichier
séparer
l’inclut
par
require
à
fois
qu’elle
être
nécessaire.
façon
de
faire
n’ont
l’avantage
de
permettre
de
taper
fois
même
chose
pour
éviter
fatigue
inutile
(surtout
copier-coller
marche
bien).
utilité
être
de
rendre
modification
faciles
à
répercuter
:
décider
de
changer
présentation
globale
de
site,
n’y
avoir
qu’un
seul
fichier
à
modifier
;
décider
de
modifier
partie
de
code
commune
(une
façon
de
faire
calcul,
façon
de
connecter,
etc.),
n’y
avoir
qu’un
seul
fichier
à
modifier.
@ord@
http://fr.php.net/manual/fr/function.require.php
2.
http://fr.php.net/manual/fr/function.include.php
chapitre
programmation
séparer
en
php
chapitrer
identification
en
php
n’aborderons
l’identification
gérer
par
navigateur.
12.1.
préliminaire
:
fonction
header
fonction
header1
permettre
de
spécifier
en-tête
http
de
l’envoi
fichier
html.
reportez-vous
à
http
1.1
specification2
pour
d’informations
sur
en-tête
http.
remarque
fonction
header
devoir
être
appeler
avant
premier
balise
html,
avant
n’importe
envoi
de
com-
mande
php.
aller
utiliser
fonction
pour
demander
vérification
d’une
identité.
pour
suffire
de
faire
commencer
programme
php
par
commande
:
header("www-authenticate:
basic
realm=’private’");
avoir
pour
effet
de
faire
demander
(et
retenir)
nom
mot
de
passe
par
navigateur.
pouvoir
tester
programme
élémentaire
suivant
(ident-exple01.php3)
:
<?php
if
(!
!isset($php_auth_user)
||!
!isset($php_auth_pw))
{
header("www-authenticate:
basic
realm=’private’");
}
else
{
echo
"<html><body>";
echo
"les
donner
connaître
être
$php_auth_user
$php_auth_pw\n";
echo
"</body></html>";
}
?>
pouvoir
remarquer
demande
n’est
faire
de
premier
exécution
de
page.
seule
façon,
avec
programme
qu’il
être
écrit,
de
devoir
répondre
à
nouveau
à
question
être
de
sortir
de
navigateur
(fermer
fenêtre
navigateur,
oui!
!)
de
relancer.
attention!
!
serveur
être
configurer
en
safe
mode
n’aurez
accès
variables
$php_auth_user
$php_auth_pw
à
$_server["php_auth_user"]
à
$_server["php_auth_pw"]
serveur
être
configurer
en
safe
mode,
voir
section
7.1.
c’est
propriété
aller
utiliser
pour
gérer
l’identification
utilisateurs.
12.2.
contrôle
mot
de
passer
manquer
qu’une
seule
choser
(ou
presque!
!)
programme
précédent
pour
être
parfait
:
tester
valeur
variables
$php_auth_user
(qui
contenir
nom)
$php_auth_pw
(qui
contenir
mot
de
passe)
pour
vérifier
qu’on
avoir
affaire
à
bonne
personne.
version
simple
pouvoir
ressembler
à
(ident-exple02.php4)
:
<?php
if
(($php_auth_user=="marcel")
&&
($php_auth_pw=="bidule"))
{
echo
"<html><body>";
echo
"bravo,
identification
réussie.\n";
echo
"</body></html>";
}
else
{
http://fr.php.net/manual/fr/function.header.php
http://www.w3.org/protocols/rfc2616/rfc2616
http://grappa.univ-lille3.fr/polys/php/exemples/ident-exple01.php
http://grappa.univ-lille3.fr/polys/php/exemples/ident-exple02.php
chapitrer
identification
en
php
header("www-authenticate:
basic
realm=’private’");
}
?>
12.3.
amélioration
:
utilisateur
être
rare,
l’accès
à
page
être
contrôler
par
mot
de
passe,
utilisateur
avoir
mêmes
droits.
falloir
pouvoir
détecter
l’identité
de
personne
concerner
moment
de
saisie
mot
de
passe.
pour
donner
mot
de
passe
différent
à
utilisateur.
permettre
d’avoir
l’exemple
suivant
(ident-exple03.php5)
dans
renseignement
être
ranger
dans
tableau
de
chaîne
de
caractères,
chaîne
par
personne,
présenter
sous
forme
«
vrai
nom/nom
d’utilisateur/mot
de
passe
»
:
<?php
//
liste
information
$liste=array("jean
némar/nemar/jjjj",
"sophie
fonfec/fonfec/ssss",
"yves
adrouille-toultan/adrouille/yyyy");
//
création
tableau
for
($i=0;$i<count($liste);$i++)
{
$l=explode("/",trim($liste[$i]));
$nom[$i]=$l[0];
//
identité
réelle
de
l’utilisateur
n◦i
$user[$i]=$l[1];
//
identifier
de
l’utilisateur
n◦i
sur
système
$pass[$i]=$l[2];
//
mot
de
passe
de
l’utilisateur
n◦i
}
$nbusers=count($liste);
//
contrôle
de
l’identité
$ok=-1;
//
démarrer
sans
connaître
l’utilisateur
for
($i=0;$i<$nbusers;$i++)
{
if
(($php_auth_user==$user[$i])
&&
($php_auth_pw==$pass[$i]))
{
//
avoir
reconnaître
utilisateur
->
garder
numéro
$ok=$i;
}
}
//
l’identification
avoir
raté,
$ok
contenir
-1
//
demander
nom
mot
de
passe
if
($ok==-1)
{
header("www-authenticate:
basic
realm=’private’");
return;
//
noter
l’utilisation
de
l’instruction
return
//
pour
sortir
programme.
}
//
arriver
ici,
c’est
l’identification
avoir
réussir
//
$ok
contenir
numéro
de
l’utilisateur
echo
"<html><body>";
echo
"bravo,
identification
réussie.<br
/>\n";
echo
"vous
être
<em>nom[$ok]</em>,\n";
echo
"votre
identifier
être
<em>$user[$ok]</em>,\n";
echo
"votre
mot
de
passe
être
<em>$pass[$ok]</em>.<br
/>\n";
//
à
d’ajouter
concerner
l’utilisateur
//
...
//
...
echo
"</body></html>";
?>
http://grappa.univ-lille3.fr/polys/php/exemples/ident-exple03.php
chapitrer
identification
en
php
12.4.
séparer
donnée
traitement
être
à
fait
raisonnable
d’imaginer
qu’on
aller
avoir
besoin
de
changer
mot
de
passe,
qu’ajouter
nouveaux
utilisateur
en
supprimer
anciens.
n’est
par
contre
raisonnable
d’imaginer
aller
faire
aura
envier
d’aller
manipuler
à
fois
fichier
programme.
(ce
n’est
même
d’ailleurs
souhaitable...)
être
préférable
de
garder
information
dans
fichier
séparé.
qu’est-ce
change
?
grand
chose
:
suffire
par
exemple
de
remplacer
premier
ligne
:
//
liste
information
$liste=array("jean
némar/nemar/jjjj",
"sophie
fonfec/fonfec/ssss",
"yves
adrouille-toultan/adrouille/yyyy");
par
lecture
d’un
fichier
contenir
mêmes
information
:
//
lire
liste
information
$liste=file("mettre
chemin
d’accès
fichier");
reste
programme
changer
pas.
fichier
à
lire
être
simple
fichier
texte,
contenir
dans
cas
présent
:
jean
némar/nemar/jjjj
sophie
fonfec/fonfec/ssss
yves
adrouille-toultan/adrouille/yyyy
12.5.
cacher
mot
de
passe
solution
précédente
avoir
gros
inconvénient
placer
fichier
de
mot
de
passe
n’importe
où...
n’oubliez
page
web
(html
php)
être
faire
pour
être
voir
par
monde,
depuis
n’importe
où.
pour
permettre
droits
d’accès
de
l’arborescence
web
être
positionner
à
lisible
par
(«
chmod
a+r*
»)
falloir
changer
cela.
poser
problème,
n’y
entreposer
de
donnée
confidentielles.
mot
de
passe,
c’est
confidentiel!
!
alors,
faire
?
suffire
de
mettre
fichier
de
mot
de
passe
dans
l’arborescence
web,
de
choisir
emplacement
quelconque
seule
obligation
être
d’être
accessible
pour
l’utilisateur
apache
(c’est
exécuter
programme
php).
chemin
d’accès
dans
l’instruction
$liste=file("mettre
chemin
d’accès
fichier");
devoir
être
absolu,
c’est-à-dire
partir
de
racine
commencer
par
slash
(/).
12.6.
crypter
mot
de
passe
de
rendre
vie
facile
à
éventuel
pirate,
pouvoir
être
intéressant
de
crypter
mot
de
passe
être
dans
fichier.
faire
avec
fonction
crypt.
n’y
avoir
d’algorithme
de
décryptage.
falloir
croire
pouvoir
être
protection
suffisante.
en
effet
mot
de
passe,
cryptés,
être
accessibles,
suffire
de
recopier
chez
version
cryptées,
de
décoder
par
force
brute.
pouvoir
trouver
exemple
de
signifier
en
exécuter
programme
suivant
decrypt.php6
:.
http://grappa.univ-lille3.fr/polys/php/exemples/decrypt.php
chapitrer
identification
en
php
décrypter
mot
de
passe
fournir
version
cryptée
d’une
manière
inintelli-
gente,
bestiale
:
essayer
chaîne
de
caractère
possibles
(en
commencer
par
1
caractère,
2,
etc.)
en
énumérer
systématiqument
(par
exemple
pour
2
caractère
:
aa,
ab,
ac,
ad,
ae,
...
,
az,
ba,
bc,
...).
pour
chaîne
calculer
version
cryptée
(avec
fonction
crypt)
comparer
à
qu’on
avoir
fournie.
être
identiques,
savoir
qu’il
venir
de
trouver
mot
de
passe.
idiot,
d’accord,
marche.
remarquer
pour
encombrer
serveur
temps
de
calcul
avoir
être
limité,
permettre
de
trouver
à
coup
sûr
(si
serveur
n’a
de
travail
par
ailleurs)
n’importe
mot
de
passe
de
4
lettre
plus.
avec
programme
n’est
optimisé,
dans
langage
n’est
rapide...
falloir
cacher
mot
de
passe...
chapitre
13.
session
13.1.
préambule
texte
suivre
être
partie
de
page
consacrer
sessions1
sur
site
de
http://fr.php.net
:
support
session
de
php
être
moyen
de
préserver
donnée
entre
accès.
permettre
de
créer
application
personnalisées,
d’augmenter
l’attrait
de
site.
visiteur
accéder
à
page
web
voir
assigner
identifier
unique,
appelé
«
identifier
de
session
».
pouvoir
être
stocker
dans
cookie,
être
propager
dans
l’url.
support
session
permettre
d’enregistrer
nombre
illimiter
de
variables
devoir
être
préserver
entre
requêtes.
lorsqu’un
visiteur
accéder
à
site,
php
aller
vérifier
(si
session.auto_start
être
activé)
sur
demande
(explicitement
avec
session_start()
avec
session_register())
s’il
exister
session
même
nom.
c’est
cas,
l’environnement
sauver
être
recréé.
seule
fonction
nécessaire
pour
usage
simple
session
être
session_start()3,
pouvoir
encourager
à
aller
voir
autres4
13.2.
application
:
identification
visiteur
principe
:
•
deux
variables
de
session
contenir
login
mot
de
passe
visiteur
(variables
vides
visiteur
n’est
identifié).
•
visiteur
n’est
identifié,
menu
proposer
choix
connecter
envoyer
sur
formulaire
de
saisie
(on
pouvoir
inclure
formulaire
dans
menu).
visiteur
être
identifié,
menu
proposer
choix
déconnecter
vider
variables
de
session
contenir
login
mot
de
passe
visiteur.
•
page
commencer
par
chose
ressembler
à
:
if
(le
visiteur
n’a
bon
niveau
d’autorisation
pour
page)
{
message
de
refus
fin
de
page
return
;
}
•
l’évaluation
niveau
d’autorisation
pouvoir
faire
de
manière
:
•
(cette
solution
être
mauvaise,
compliquer
modifications.)
coder
en
dur
test
sur
possibilité
:
if
((nom=="bidule")
&&
(mot
de
passe=="truc"))
{
...
}
elseif
((nom=="chose")
&&
(mot
de
passe=="n’importe
quoi"))
{
...
}
else
etc.
•
(mieux.)
ranger
nom
mot
de
passe
dans
tableau,
parcourir
tableau
pour
faire
vérifi-
cation.
•
(parfait.)
même
chose,
créer
table
spéciale
dans
base
de
donnée
lieu
d’utiliser
tableau.
•
pour
être
parfait
être
être
fonction
afficher
menu,
fonction
décider
d’elle-même
choix
disponibles
en
fonction
niveau
d’autorisation
visiteur.
•
exemple
d’utilisation
session
:
http://grappa.univ-lille3.fr/~gonzalez/session_php.
@ord@
http://fr.php.net/manual/fr/ref.session.php
http://fr.php.net/manual/fr/function.session-start.php
http://fr.php.net/manual/fr/ref.session.php#session.customhandler
chapitre
13.
session
ii.
hors
programme
chapitrer
utiliser
php
sur
base
de
données
postgresql
chapitre
figurer
qu’en
guise
de
témoignage
:
être
préférable
d’utiliser
pdo
pour
accès
base
de
données
(chapitre
10).
14.1.
connexion
à
base
fonction
à
utiliser
être
«
pg_connect1
».
syntaxe
résumer
:
$www
=
pg_connect
("host=xxx
dbname=ddd
user=yyy
password=zzz")
;
:
$www
variable
être
utiliser
identifier
de
connexion
à
exécution
d’une
requête
sur
base.
ddd
base
de
donnée
à
essayer
de
connecter.
xxx
nom
(l’adresse)
de
machine
sur
trouver
base
de
données.
yyy
nom
de
l’utilisateur.
zzz
mot
de
passe
de
l’utilisateur.
14.2.
exécution
d’une
requêter
fonction
à
utiliser
être
«
pg_query2
».
syntaxe
résumer
:
$rrr
=
pg_query
($www,
$requete)
;
:
$rrr
variable
être
utiliser
identifier
vouloir
obtenir
résultat
de
l’exécution
de
requête.
$www
identifier
de
connexion
obtenir
par
pg_connect
(voir
ci-dessus).
$requete
chaine
de
caractère
contenir
requête
à
exécuter
(ce
pouvoir
être
chaîne
littérale,
variable).
http://fr.php.net/manual/fr/function.pg-connect.php
http://fr.php.net/manual/fr/function.pg-query.php
chapitrer
utiliser
php
sur
base
de
données
postgresql
14.3.
obtention
résultat
d’une
requêter
fonction
à
utiliser
être
:
•
«
pg_numrows3
»
:
syntaxe
résumer
:
$nnn
=
pg_numrows
($rrr)
;
:
$nnn
variable
contenir
nombre
de
ligne
résultat.
$rrr
identifier
d’exécution
de
requête
obtenir
par
pg_query
(voir
ci-dessus).
•
«
pg_fetch_array4
»
:
syntaxe
résumer
:
$lll
=
pg_fetch_array
($rrr,
$iii)
;
:
$rrr
identifier
d’exécution
de
requête
obtenir
par
pg_query
(voir
ci-dessus).
$iii
numéro
de
ligne
vouloir
obtenir.
$lll
variable
contenir
table
constituer
de
champ
de
ligne
demandée.
s’agit
d’un
tableau
associatif
clef
être
titre
colonnes.
14.4.
exemple
programme
<?php
$c=pg_connect
("dbname=****
user=****
password=****");
$r=pg_query
($c
,
"select
nom,prenom
from
emp
order
by
nom");
for
($i=0;
$i<pg_numrows($r);
$i++)
{
$l=pg_fetch_array($r,$i);
echo
$l["prenom"]."
<em>".$l["nom"]."</em>.\n";
}
?>
produire
résultat
suivre
:
yves
adrouille-toultan.
tex
ajerre.
quentin
amartakaldire.
yvon
anchier.
helmut
ardelpic.
terry
blaireur.
thierry
chmonfisse.
mélusine
enfaillite.
odile
eurktumeme.
teddy
fairant.
sophie
fonfec.
olaf
hotdeugou.
xavier
kaécouté.
alex
kuzbidon.
pacôme
odlavieille.
adhémar
patamob.
humphrey
peursconla.
thomas
phototetedemort.
elsa
riven-busse.
armand
teutmaronne.
samira
traibien.
héléna
vrante.
agathe
zeublouze.
debbie
zoudanlkou.
@ord@
http://fr.php.net/manual/fr/function.pg-numrows.php
http://fr.php.net/manual/fr/function.pg-fetch-array.php
chapitrer
utiliser
php
sur
base
de
données
postgresql
14.5.
requête
autres
select
requête
de
type
insert,
update,
delete
être
exécuter
de
même
manière
requête
de
type
select,
avec
fonction
«
pg_query5
».
être
important
de
contrôler
résultat
de
exécution.
c’est
aller
étudier
dans
chapitre.
14.6.
suppression
message
d’erreurs
pouvoir
avoir
envie
de
gérer
vous-même
erreur
requête
(par
exemple
éviter
l’affichage
«
warning
»
autres
«
query
failed
»).
pour
suffire
de
préfixer
fonction
utiliser
avec
«
@
»
(opérateur
de
contrôle
d’erreur6)
:
opérateur
être
ajouter
en
préfixe
d’une
expression
php,
message
d’erreur
pouvoir
être
générer
par
expression
être
ignorés.
par
exemple
lieu
d’écrire
$res
=
pg_query
($c,$req)
;
écrire
$res
=
@pg_query
($c,$req)
;
remarque
l’opérateur
@
fonctionner
qu’avec
expressions.
règle
générale
de
fonctionnement
être
suivante
:
pouvoir
prendre
valeur
de
chose,
pouvoir
préfixer
avec
@.
par
exemple,
pouvoir
ajouter
@
variables,
fonctions,
à
include,
constantes,
etc.
pouvoir
faire
avec
élément
de
langage
classes,
if
foreach,
etc.
14.7.
gestion
erreur
message
être
impératif,
supprimer
avertissements,
de
gérer
vous-même
erreur
pouvoir
survenir.
dans
cas
d’accès
à
base
postgresql
exister
nombre
de
fonctionnalité
pour
cela.
14.7.1.
résultat
renvoyer
par
pg_query
en
cas
d’échec
«
pg_query7
»
retourne
false
en
cas
d’échec
(c’est-à-dire
résultat
réel
pouvoir
exister).
pouvoir
traiter
l’échec
éventuel
de
requête
:
if
(
$r=@pg_query($c,$req)
)
{
//
traitement
cas
de
succès
.
.
.
}
else
{
//
traitement
cas
d’échec
.
.
.
}
14.7.2.
obtenir
texte
de
dernière
erreur
fonction
«
pg_last_error8
»
renvoyer
éventuel
message
d’erreur
correspondre
à
dernière
exécution
d’une
requête.
http://fr.php.net/manual/fr/function.pg-query.php
http://fr.php.net/manual/fr/language.operators.errorcontrol.php
http://fr.php.net/manual/fr/function.pg_query.php
http://fr.php.net/manual/fr/function.pg-last-error.php
chapitrer
utiliser
php
sur
base
de
données
postgresql
14.7.3.
obtenir
statut
de
connexion
pouvoir
connaître
l’état
de
connexion
en
utiliser
fonction
«
pg_result_status9
».
valeur
re-
tournée
possibles
être
:
•
pgsql_empty_query
(0)
•
pgsql_command_ok
(1)
•
pgsql_tuples_ok
(2)
•
pgsql_copy_to
(3)
•
pgsql_copy_from
(4)
•
pgsql_bad_response
(5)
•
pgsql_nonfatal_error
(6)
•
pgsql_fatal_error
(7)
14.7.4.
obtenir
nombre
de
ligne
affecter
par
requête
«
pg_affected_rows10
»
retourner
nombre
de
ligne
affecter
par
requête
de
type
insert,
update,
delete,
exécuter
par
fonction
pg_query.
ligne
n’a
être
affectée,
pg_affected_rows
retourner
@ord@
http://fr.php.net/manual/fr/function.pg-connection-status.php
http://fr.php.net/manual/fr/function.pg-affected-rows.php
chapitrer
peardb,
présentation
chapitre
figurer
qu’en
guise
de
témoignage
:
être
préférable
d’utiliser
pdo
pour
accès
base
de
données
(chapitre
10).
15.1.
qu’est-ce
pear
texte
être
extraire
de
présentation
de
pear1,
sur
jdn2
(journal
net).
pear
(php
extension
and
application
repository)
être
archiver
de
composants
php
réutilisables
projet
majeur
de
communauté
php.
c’est
un
archiver
stocker
de
façon
exhaustive
possible
programmes,
macros
de
doc-
umentation.
but
être
de
fournir
développeurs
de
bibliothèques/modules
php
moyen
d’organiser
code
php
c
d’une
maniérer
définir
partager
par
autres
développeurs,
d’offrir
à
communauté
php
seule
source
ressources.
en
bref,
c’est
architecture
système
de
dis-
tribution
pour
composants
php
réutilisables.
15.2.
utilité
?
pear
être
utile
pour
développeur
php.
aller
l’utiliser
pour
module
db
(database)
être
couche
d’abstraction
pour
accès
base
de
données.
l’hétérogénéité
moyens
d’accès
base
de
donnée
avoir
être
un
problème
gênants
en
php3.
problème
venir
fait
que,
par
exemple,
fonction
permettre
l’accès
à
base
postgresql
être
différentes
de
pour
mysql,
être
différentes
de
pour
sqlite,
etc.
avoir
pour
effet
de
rendre
difficile
migration
d’un
système
vers
autre
:
avoir
écrire
(par
exemple
en
cours)
site
utiliser
base
postgresql
vouloir
transférer
chez
hébergeur
n’offre
mysql
(free,
par
exemple)
:
seule
solution
être
de
reprendre
(et
corriger)
dans
page
appel
à
fonction
concernant
postgresql.
pouvoir
en
avoir
beaucoup...
couche
d’abstraction4
permettre
d’éviter
problème
:
accès
à
base
de
donnée
passer
par
(avec
même
syntaxe,
base
de
données)
c’est
débrouiller
pour
s’adapter
à
base
de
donnée
utilisée.
pour
changer
de
base
de
donnée
(passer
de
postgresql
à
mysql
par
exemple)
n’avez
en
général
qu’à
modifier
ligne,
donner
paramètre
de
base
de
donnée
utilisée.
trouver
sur
web
de
documentation
en
français
sur
pear5,
en
particulier
module
peardb6.
15.3.
utiliser
peardb
fonction
de
peardb
être
utilisables
dans
programme,
devoir
commencer
par
:
require_once
’db.php’;
15.4.
connecter
à
base
de
donnée
trouver
de
détail
sur
page
«
introduction
-
dsn7
».
premier
action,
avant
d’utiliser
base
de
données,
être
de
s’y
connecter.
http://developpeur.journaldunet.com/tutoriel/php/021017php_pear1.shtm
http://developpeur.journaldunet.com/
sembler
php5
avoir
régler
problème,
utiliser
php4...
exister
d’autres
couche
d’abstraction
:
phplib,
adodb,
metatdata,
etc.
http://pear.php.net/manual/fr/
http://pear.php.net/manual/fr/package.database.php
http://pear.php.net/manual/fr/package.database.db.intro-dsn.php
chapitrer
peardb,
présentation
pour
falloir
définir
dsn
(data
source
name)
donner
renseignement
sur
base
de
donnée
à
utiliser
:
nom,
utilisateur,
mot
de
passe,
machine
héberger
serveur,
type
de
sgbd,
etc.
syntaxe
(légèrement
simplifiée)
être
suivante
:
type_de_bd://utilisateur:mot_de_passe@machine/base_de_données?option=valeur
par
exemple
:
•
pour
base
postgresql
:
pgsql://utilisateur:mot_de_passe@localhost/base
•
pour
base
sqlite,
sous
linux
:
sqlite:////chemin_complet_vers_fichier.db?mode=0666
•
pour
base
sqlite,
sous
windows
:
sqlite:///c:/chemin_complet_vers_fichier.db?mode=0666
suffire
d’exécuter
commande
$db
=&
db::connect(votre_dsn);
nom
de
variable
$db
être
sans
importance.
n’est
qu’une
variable,
pouvoir
donner
nom
plaît.
falloir
garder
à
l’esprit
qu’il
falloir
conserver
variable
(quel
nom),
c’est
permettre
d’accéder
à
base
de
donnée
avec
fonction
chapitre
suivants.
15.5.
gestion
erreur
15.5.1.
en
cas
d’erreur...
après
utilisation
d’une
fonction
de
peardb,
comprendre
tentative
de
connexion,
pouvoir
être
utile
de
vérifier
qu’aucune
erreur
s’est
produire
:
if
(pear::iserror($db))
{
echo
"<hr
/>"
."message
standard
:
"
.
$db->getmessage()
.
"<hr
/>\n"
."message
dbms/utilisateur
:
"
.
$db->getuserinfo()
.
"<hr
/>\n""
."message
dbms/débogage
:
"
.
$db->getdebuginfo()
.
"<hr
/>\n";
exit;
}
(à
de
choisir
message
qu’il
paraître
intéresser
d’afficher...)
15.5.2.
application
pouvoir
utiliser
gestion
erreur
pour
écrire
programme
portable.
écrire
programme
php
vouloir
utiliser
à
endroit
condition
être
dif-
férentes
(en
salle
de
tp,
chez
vous,
chez
hébergeur,
etc.),
devoir
en
principe
modifier
programme
à
fois
transférer
d’un
site
à
l’autre.
même
l’utilisation
de
peardb
réduire
nombre
de
modification
à
faire,
rester
dsn
à
adapter.
pouvoir
oublier
manipulation
en
utiliser
gestion
erreur
:
$db
=&
db::connect(dsn_pour_les_salles_de_tp,
$options);
if
(pear::iserror($db))
{
$db
=&
db::connect($dsn_pour_votre_machine,
$options);
if
(pear::iserror($db))
{
$db
=&
db::connect(dsn_pour_votre_hébergeur,
$options);
if
(pear::iserror($db))
{
chapitre
15.
peardb,
présentation
echo
"<hr
/>connexion
impossible<hr
/>\n";
exit;
}
}
}
15.6.
exécuter
requête
syntaxe
être
simple
:
$res
=&
$db->query(votre_requête);
valeur
renvoyer
(rangée
dans
variable
$res)
n’est
résultat
de
l’exécution
de
requête,
identifier
(propre
système,
valeur
réelle
intéresser
pas)
permettre
d’accéder
résultat
grâce
fonction
décrire
ci-dessous.
15.7.
accéder
résultat
d’une
requêter
select
peardb
fournir
deux
fonction
pour
traiter
ligne
résulter
d’une
requête
:
fetchrow()8
fetchinto()9.
15.7.1.
fetchrow()
fetchrow()
retourner
rangée.
exemple
d’utilisation
en
supposer
mode
par
défaut
de
récupération
être
db_fetchmode_ordered
(voir
setfetchmode())
:
while
($row
=&
$res->fetchrow())
{
echo
$row[0]
.
"\n";
}
15.7.2.
fetchinto()
fetchinto()
avoir
besoin
d’une
variable,
à
assigner
par
référence
contenu
de
rangée
résultat
retourner
db_ok.
exemple
d’utilisation
en
supposer
mode
par
défaut
de
récupération
être
db_fetchmode_ordered
(voir
setfetchmode())
:
while
($res->fetchinto($row))
{
echo
$row[0]
.
"\n";
}
15.8.
setfetchmode()
commande
setfetchmode()10
configurer
mode
de
récupération
par
défaut
utiliser
par
méthode
fetch*()
(et
get*()).
l’utiliserons
deux
manière
(mais
exister
d’autres,
aller
voir
page
être
consacrée11)
:
http://pear.php.net/manual/fr/package.database.db.db-result.fetchrow.php
http://pear.php.net/manual/fr/package.database.db.db-result.fetchinto.php
http://pear.php.net/manual/fr/package.database.db.db-common.setfetchmode.php
http://pear.php.net/manual/fr/package.database.db.db-common.setfetchmode.php
chapitrer
peardb,
présentation
•
setfetchmode(db_fetchmode_ordered)
:
rangée
être
mettre
en
tableau
ordonné,
accéder
par
numéro.
•
setfetchmode(db_fetchmode_assoc)
:
rangée
être
mettre
en
tableau
associatif,
accéder
par
titre
de
colonne.
pour
comprendre
différence
pouvoir
utiliser
fonction
php
«
print_r12
»
(qui
permettre
d’afficher
tableau
entier).
programme
$db->setfetchmode(db_fetchmode_ordered);
//
sortie
en
tableau
ordonner
$res
=&
$db->query("select
*
from
personne");
//
requête
$res->fetchinto($row);
//
récupération
de
1ère
ligne
echo
"<pre>";
//
affichage
«
préformaté
»
print_r
($row);
//
affichage
de
ligne
en
tableau
echo
"</pre>";
//
fin
de
l’affichage
«
préformaté
»
produire
affichage
array
(
[0]
=>
5
[1]
=>
kuzbidon
[2]
=>
ginette
[3]
=>
263
[4]
=>
393
[5]
=>
[6]
=>
[7]
=>
)
celui-ci
$db->setfetchmode(db_fetchmode_assoc);
//
sortir
en
tableau
associatif
$res
=&
$db->query("select
*
from
personne");
//
requête
$res->fetchinto($row);
//
récupération
de
1ère
ligne
echo
"<pre>";
//
affichage
«
préformaté
»
print_r
($row);
//
affichage
de
ligne
en
tableau
echo
"</pre>";
//
fin
de
l’affichage
«
préformaté
»
produire
affichage
array
(
[codepersonne]
=>
5
[nom]
=>
kuzbidon
[prenom]
=>
ginette
[numerodanslarue]
=>
263
[refrue]
=>
393
[tel]
=>
[fax]
=>
[email]
=>
)
pouvoir
utiliser
constantes
db_fetchmode_ordered
db_fetchmode_assoc
dans
fonction
fetchrow()
fetchinto()comme
par
exemple
:
$row
=&
$res->fetchrow(db_fetchmode_assoc);
$res->fetchinto($row,db_fetchmode_ordered);
http://fr.php.net/manual/fr/function.print-r.php
chapitrer
peardb,
présentation
15.9.
peardb,
information
sur
requête
chapitre
provenir
de
«
pear-db
-
résultats13
».
avoir
quatre
manière
de
récupérer
information
intéressantes
jeu
de
résultats.
15.9.1.
numrows()
numrows()14
retourner
nombre
de
ligne
disponibles
dans
jeu
de
résultat
issu
d’une
requête
select.
<?php
//
fois
avoir
objet
db
valider
nommer
$db
$res
=&
$db->query(’select
bla
bla’);
echo
$res->numrows();
?>
15.9.2.
numcols()
numcols()15
retourner
nombre
de
colonne
disponibles
dans
jeu
de
résultat
issu
d’une
requête
select.
<?php
//
fois
avoir
objet
db
valider
nommer
$db
$res
=&
$db->query(’select
bla
bla’);
echo
$res->numcols();
?>
15.9.3.
affectedrows()
affectedrows()16
retourner
nombre
de
ligne
affecter
par
requête
type
insert,
update
delete.
<?php
//
souvenez-vous
requête
retourner
d’objet
de
résultat
$db->query(’delete
bla
bla’);
echo
"j’ai
effacer
"
.
$db->affectedrows()
.
"
clients";
?>
15.9.4.
tableinfo()
tableinfo()17
retourner
tableau
associatif
contenir
information
sur
colonne
issues
d’un
résultat
de
requête
type
select.
<?php
//
fois
avoir
objet
db
valider
nommer
$db
$res
=&
$db->query(’select
bla
bla’);
print_r($res->tableinfo());
?>
http://pear.php.net/manual/fr/package.database.db.intro-fetch.php
http://pear.php.net/manual/fr/package.database.db.db-result.numrows.php
http://pear.php.net/manual/fr/package.database.db.db-result.numcols.php
http://pear.php.net/manual/fr/package.database.db.db-common.affectedrows.php
17.
http://pear.php.net/manual/fr/package.database.db.db-common.tableinfo.php
51
chapitre
15.
peardb,
présentation
chapitrer
dbx
chapitre
figurer
qu’en
guise
de
témoignage
:
être
préférable
d’utiliser
pdo
pour
accès
base
de
données
(chapitre
10).
16.1.
qu’est-ce
dbx
texte
être
extraire
de
«
xxvii.
fonction
dbx1
»,
chapitre
manuel
php
sur
sur
php
net2.
module
dbx
être
module
d’abstraction
de
base
de
données
(db
pour
database
(base
de
données)
’x’
pour
base
supportées).
fonction
dbx
permettre
d’accéder
à
base
supportées,
avec
même
convention.
fonction
dbx
s’interfacent
avec
base
de
données,
s’interfacent
avec
module
utiliser
pour
supporter
bases.
pour
pouvoir
utiliser
base
de
donnée
avec
module
dbx,
module
devoir
être
lié,
être
charger
dans
php
module
de
base
de
donnée
devoir
être
supporter
par
module
dbx.
base
suivantes
être
supportées,
d’autres
suivre
:
•
frontbase
(disponible
depuis
php
4.1.0),
•
microsoft
sql
server,
•
mysql,
•
odbc,
•
postgresql,
•
sybase-ct
(disponible
depuis
php
4.2.0),
•
oracle
(disponible
depuis
php
4.3.0),
•
sqlite
(php
5).
16.2.
utilité
?
l’hétérogénéité
moyens
d’accès
base
de
donnée
avoir
être
un
problème
gênants
en
php.
problème
venir
fait
que,
par
exemple,
fonction
permettre
l’accès
à
base
postgresql
être
différentes
de
pour
mysql,
être
différentes
de
pour
sqlite,
etc.
avoir
pour
effet
de
rendre
difficile
migration
d’un
système
vers
autre
:
avoir
écrire
(par
exemple
en
cours)
site
utiliser
base
postgresql
vouloir
transférer
chez
hébergeur
n’offre
mysql
(free,
par
exemple)
:
seule
solution
être
de
reprendre
(et
corriger)
dans
page
appel
à
fonction
concernant
postgresql.
pouvoir
en
avoir
beaucoup...
couche
d’abstraction3
permettre
d’éviter
problème
:
accès
à
base
de
donnée
passer
par
(avec
même
syntaxe,
base
de
données)
c’est
débrouiller
pour
s’adapter
à
base
de
donnée
utilisée.
pour
changer
de
base
de
donnée
(passer
de
postgresql
à
mysql
par
exemple)
n’avez
en
général
qu’à
modifier
ligne,
donner
paramètre
de
base
de
donnée
utilisée.
16.3.
connecter
à
base
de
donnée
trouver
de
détail
sur
page
dbx_connect4
manuel
php5.
premier
action,
avant
d’utiliser
base
de
données,
être
de
s’y
connecter.
suffire
d’exécuter
commande
$db
=
dbx_connect(type_de_base,
machine_qui_héberge_la_base,
nom_de_la_base,
http://fr.php.net/manual/fr/ref.dbx.php
http://fr.php.net/
exister
d’autres
couche
d’abstraction
:
phplib,
adodb,
metadata,
pear-db,
etc.
http://fr.php.net/manual/fr/function.dbx-connect.php
http://fr.php.net/manual/fr/index.php
chapitre
16.
dbx
nom_d_utilisateur,
mot_de_passe)
nom
de
variable
$db
être
sans
importance.
n’est
qu’une
variable,
pouvoir
donner
nom
plaît.
falloir
garder
à
l’esprit
qu’il
falloir
conserver
variable
(quel
nom),
c’est
permettre
d’accéder
à
base
de
donnée
avec
fonction
chapitre
suivants.
type_de_base
quant
à
être
valeur
parmi
dbx_mysql,
dbx_odbc,
dbx_pgsql,
dbx_mssql,
dbx_fbsql,
dbx_sybasect,
dbx_oci8,
dbx_sqlite.
16.4.
exécuter
requête
trouver
d’information
sur
page
dbx_query6
manuel
php.
syntaxe
être
simple
:
$res
=
dbx_query($db,
votre_requête);
valeur
renvoyer
(rangée
dans
variable
$res)
n’est
résultat
de
l’exécution
de
requête,
identifier
(propre
système,
valeur
réelle
intéresser
pas)
permettre
d’accéder
résultat
grâce
fonction
décrire
ci-dessous.
16.5.
nombre
de
ligne
colonne
d’une
requête
select
pouvoir
obtenir
nombre
de
ligne
de
colonne
résultat
d’une
requête
de
type
select
:
$result
=
dbx_query
($db,
’select
id
from
table’);
echo
$result->rows;
//
nombre
de
ligne
echo
$result->cols;
//
nombre
de
champ
16.6.
accéder
résultat
d’une
requêter
select
$result
être
résultat
valide
renvoyer
par
dbx_query(),
$result->data
être
tableau
à
2
dimension
contenir
résultat
:
premier
indice
concerner
lignes,
deuxième
concerner
colonnes.
16.6.1.
accès
par
nom
colonne
exemple
:
$result
=
dbx_query($db,
"select
*
from
ville");
foreach
(
$result->data
avoir
$row
)
{
echo
$row["codepostal"]."
-
".$row["ville"]."<br
/>\n";
}
16.6.2.
accès
par
numéro
colonne
exemple
:
$result
=
dbx_query($db,
"select
*
from
ville");
foreach
(
$result->data
avoir
$row
)
{
for
($i=0;$i<$result->cols;$i++)
{
echo
$row[$i]."
**
";
}
echo
"<br
/>\n";
6.
http://fr.php.net/manual/fr/function.dbx-query.php
chapitre
16.
dbx
}
16.6.3.
accès
par
numéro
ligne
numéro
colonne
exemple
:
$result
=
dbx_query($db,
"select
*
from
ville");
for
($l=0;$l<$result->rows;$l++)
{
for
($i=0;$i<$result->cols;$i++)
{
echo
$result->data[$l][$i]."
**
";
}
echo
"<br
/>\n";
}
chapitre
dbx
chapitrer
exploration
contenu
d’un
répertoire
corriger
exercice
de
chapitre
trouver
chapitre
25.
17.1.
notion
nécessaires
en
php
17.1.1.
exploration
d’un
répertoire
premier
fonction
à
connaître
être
«
opendir1
».
être
destiner
à
être
utiliser
avec
fonction
«
readdir2
»
«
closedir3
».
programme
suivant
(opendir.php)
afficher
contenu
répertoire
/mnt
:
<?php
$dir
=
opendir("/mnt");
while($file
=
readdir($dir))
{
echo
"$file\n";
}
closedir($dir);
?>
c’est
excellente
application
de
l’utilisation
de
structure
while.
17.1.2.
extraction
d’une
sous-chaîne
de
caractère
être
nécessaire
de
tester
partie
d’une
chaîne
de
caractère
;
falloir
pouvoir
l’isoler.
être
faire
avec
fonction
«
substr4
»,
exemple
de
résultat
pour
voir
résultat
produire
:
substr.php5
:
<?php
echo
substr("abcdef",
1)."<br
/>";
//
retourne
"bcdef"
echo
substr("abcdef",
1,
3)."<br
/>";
//
retourner
"bcd"
echo
substr("abcdef",
-1)."<br
/>";
//
retourner
"f"
echo
substr("abcdef",
-2)."<br
/>";
//
retourner
"ef"
echo
substr("abcdef",
-3,
1)."<br
/>";
//
retourne
"d"
echo
substr("abcdef",
1,
-1)."<br
/>";
//
retourner
"bcde"
?>
premier
paramètre
être
chaîne
devoir
extraire
partie.
deuxième
paramètre
indiquer
position
de
lettre
aller
commencer
l’extraction.
s’il
être
négatif,
indique
qu’on
compter
à
partir
de
fin
de
chaîne.
troisième
paramètre
n’est
mentionné,
aller
jusqu’à
fin
de
chaîne.
s’il
être
présent,
indiquer
nombre
de
lettre
à
prendre.
17.2.
notion
nécessaires
en
html
17.2.1.
image
cliquables
faire
en
sorte
qu’en
cliquer
sur
image
obtenir
même
résultat
qu’en
cliquer
mot
?
en
faire
même
chose
avec
l’image
qu’avec
texte...
http://fr.php.net/manual/fr/function.opendir.php
http://fr.php.net/manual/fr/function.readdir.php
http://fr.php.net/manual/fr/function.closedir.php
http://fr.php.net/manual/fr/function.substr.php
http://grappa.univ-lille3.fr/polys/php/exemples/substr.php
chapitrer
exploration
contenu
d’un
répertoire
pour
transformer
mot
en
lien
suffire
de
l’inclure
entre
<a
href="...">
</a>.
faire
même
chose
avec
un
image...
écrire
<a
href="simple.php"><img
src="mini/rpb.jpg"
/></a>
avoir
pour
effet
d’afficher
l’image
«
mini/rpb.jpg
»
en
faire
en
sorte
cliquer
arriver
sur
page.
17.2.2.
pour
qu’un
lien
afficher
image
qu’une
page
html
php
suffire
de
mettre
dans
lien
l’adresse
de
l’image
lieu
de
l’adresse
d’une
page.
17.3.
exercice
exercice
suivre
être
à
faire
dans
répertoire
contenir
image
(et
d’autres
chose
aussi,
pas),
qu’un
sous-répertoire
contenir
mêmes
image
en
réduction
(en
onglets,
thumbnails
en
anglais).
1.
premier
version
programme6
:
afficher
image
trouvées.
2.
deuxième
version
programme7
:
afficher
onglets,
faire
lien
vers
vraies
images.
troisième
version
programme8
:
afficher
onglets,
faire
lien
vers
page
contenir
vraies
image
dans
un
cadre.
@ord@
version
parfaire
programme9
:
afficher
onglet
en
tableau
régulier.
faire
lien
vers
page
contenir
vraies
image
dans
cadre.
http://grappa.univ-lille3.fr/polys/php/exemples/simple.php
http://grappa.univ-lille3.fr/polys/php/exemples/thumb.php
http://grappa.univ-lille3.fr/polys/php/exemples/thumbplus.php
http://grappa.univ-lille3.fr/polys/php/exemples/parfait.php
chapitre
18.
news...
corriger
exercice
de
chapitre
trouver
chapitre
aller
terminer
tour
d’horizon
de
php
avec
mini-projet
but
être
d’afficher
article
de
presse,
dans
différents
domaines.
pouvoir
trouver
exemple
sur
internet1.
18.1.
présentation
article
être
ranger
dans
un
fichier.
nom
fichier
être
composer
de
trois
partie
:
3
lettre
définir
domaine
:
•
inf
pour
informatique,
•
msc
pour
miscalaneous
(divers,
dire
n’entre
dans
autres
catégories),
•
sci
pour
science.
3
chiffre
former
en
fait
numéro
d’ordre
fichier
:
001,
002,
003,
004,
005,
etc.
3.
extension
jnl.
avoir
par
exemple
:
inf001.jnl,
inf002.jnl,
inf003.jnl,
inf004.jnl,
inf005.jnl,
msc001.jnl,
msc002.jnl,
sci001.jnl,
sci002.jnl,
sci003.jnl,
etc.
fichier
contenir
texte,
sans
code
html
php.
premier
ligne
devoir
être
titre
de
l’article.
un
fichier
(inf004.jnl)
contenir
par
exemple
:
xenux
site
simple
pour
débutant
xenux.fr.st
être
nouveau
site
pour
pressés
de
linux
sans
chichi
sans
blabla.
savoir
aller
dès
début
de
lecture
de
l’article.
intéresser
marche.....
à
18.2.
travail
site
à
réaliser
avoir
caractéristique
suivantes
:
@ord@
page
devoir
aller
chercher
fichier
nécessaires
dans
répertoire
:
de
liste
faire
articles,
suffire
de
copier
fichier
de
l’article
pour
qu’il
être
prendre
en
compte.
inspirez-vous
de
avoir
être
faire
dans
cours
sur
l’exploration
contenu
d’un
répertoire
(chapitre
17).
devoir
réaliser
page
listenoms.php2
afficher
nom
fichiers.
devoir
réaliser
page
identique
à
précédente
nom
fichier
être
lien
vers
l’affichage
fichier
eux-même
(listeliens.php3).
http://grappa.univ-lille3.fr/polys/php/exemples/news/
http://grappa.univ-lille3.fr/polys/php/exemples/news/listenoms.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/listeliens.php
chapitre
18.
news...
4.
devoir
réaliser
page
afficher
texte
de
article
un
sous
autres
(affichetout.php4).
n’êtes
obliger
de
soigner
présentation,
c’est
pour
un
exercice
suivants.
devoir
réaliser
page
affichetitre.php5
afficher
titre
articles.
@ord@
devoir
réaliser
page
identique
à
précédente,
dans
titre
afficher
être
lien
vers
article
correspondants
(affichetitrelien.php6).
@ord@
devoir
réaliser
page
afficher
article
(affichetout_br.php7)
:
•
article
être
séparer
(par
ligne
horizontale
par
exemple),
•
titre
être
visibles
(en
utiliser
par
exemple
construction
<h2>..</h2>),
•
fin
de
paragraphe
texte
original
être
respectés.
devoir
réaliser
page
permettre
de
choisir
sujet
intéresser
(informatique,
miscala-
neous,
divers
;
voir
section
description)
afficher
article
correspondants
(sujet.php8).
9.
page
de
menu9
permettre
d’aller
vers
de
pages,
d’en
revenir
facilement.
18.3.
avoir
temps...
avoir
temps
pouvoir
ajouter
fonction
à
travail
:
@ord@
formulaire
permettre
d’écrire
article
(qui
être
ajouter
autres),
2.
moyen
de
corriger
article
existant,
3.
moyen
de
supprimer
article
existant.
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetout.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetitre.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetitrelien.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetout_br.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/sujet.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/index.php
chapitrer
@ord@
fichier
corriger
exercice
de
chapitre
trouver
chapitre
24.
fichier
(ou
filer
en
anglais,
document
dans
monde
windows)
être
l’objet
permettre
à
système
d’exploitation
(donc
programme
qu’il
supporte)
d’enregister
information
sur
disque
dur
(ou
disquette).
19.1.
manipulation
de
base
pour
utiliser
fichier
falloir
savoir
écrire
relire.
19.1.1.
ouverture
(et
fermeture)
d’un
fichier
avant
accès
à
fichier
falloir
l’ouvrir,
faire
par
fonction
«
fopen1
»
syntaxe
être
:
int
fopen
(string
fichier,
string
mode)
:
•
int
signifier
fonction
renvoyer
valeur
entière.
•
fichier
être
nom
fichier
à
ouvrir.
•
mode
décrire
façon
fichier
être
utilisé.
valeur
courantes
être
:
•
’r’
:
ouvre
en
lecture
seule,
placer
pointeur
de
fichier
début
fichier.
•
’w’
:
ouvre
en
écriture
seule
;
placer
pointeur
de
fichier
début
fichier
réduire
taille
fichier
à
0.
fichier
n’existe
pas,
tenter
de
créer.
•
’a’
:
ouvre
en
écriture
seule
;
placer
pointeur
de
fichier
à
fin
fichier.
fichier
n’existe
pas,
tenter
de
créer.
fichier
ouvrir
par
«
fopen
»
être
fermer
par
«
fclose2
».
19.1.2.
écrire
dans
fichier
n’étudierons
fichier
de
texte.
trouver
d’information
sur
fichier
dans
l’aide
de
php3.
écrire
dans
fichier
de
texte
falloir
utiliser
fonction
«
fwrite4
»
(ou
fonction
«
fputs5
»
être
en
point
identique).
19.1.3.
lire
contenu
d’un
fichier
deux
solution
différentes
:
•
«
file6
»
qu’on
avoir
voir
dans
chapitre
sur
tableaux,
lire
fichier
en
seule
fois
en
ranger
dans
tableau.
•
«
fgets7
»
lire
fichier
ligner
par
ligne,
imposer
contrôle.
exister
d’autres
façon
de
lire
information
ranger
dans
fichier
aborder
pas.
trouver
d’information
sur
fichier
dans
l’aide
de
php8.
1.
http://fr.php.net/manual/fr/function.fopen.php
http://fr.php.net/manual/fr/function.fclose.php
http://fr.php.net/manual/fr/html/ref.filesystem.html
http://fr.php.net/manual/fr/function.fwrite.php
http://fr.php.net/manual/fr/function.fputs.php
http://fr.php.net/manual/fr/function.file.php
http://fr.php.net/manual/fr/function.fgets.php
http://fr.php.net/manual/fr/html/ref.filesystem.html
chapitre
19.
fichier
19.2.
exemple
aller
réaliser
mini-site
permettre
d’ajouter
ligne
à
fois
dans
fichier,
qu’une
page
permettre
d’afficher
contenu
fichier.
formulaire
:
fichier-01.php9
<html><body>
<form
action="fichier-02.php">
saisir
:
<input
name="ligne">
<input
type="submit">
</form>
</body></html>
s’agit
en
fait
d’une
simple
page
html
contenir
formulaire.
traitement
formulaire
(écriture
dans
fichier)
:
fichier-02.php10
<html><body>
<?php
//
ouverture
fichier
"fichier-04.txt
en
mode
"a"
(append=ajout)
//
l’identifiant
renvoyer
être
$fp
//
être
utiliser
pour
l’écriture
fermeture
$fp
=
fopen
("fichier-04.txt","a");
//
écriture
de
valeur
reçue
(plus
fin
de
ligne)
fputs
($fp,$ligne."\n");
//
fermeture
fichier
fclose
($fp)
?>
fichier
avoir
être
modifié.
</body></html>
remarque
programme
fonctionner
falloir
qu’il
avoir
droit
en
écriture
sur
fichier
fichier-04.txt.
remarque
programme
devoir
être
laisser
en
accès
libre
sur
réseau
:
n’importe
pouvoir
l’utiliser
remplir
disque
en
écrivant
dans
fichier
sans
contrôle.
(c’est
pour
version
proposer
en
exemple
être
désactivée.)
affichage
contenu
fichier
:
•
premier
solution,
avec
fonction
«
file11
»
:
fichier-03.php12
:
<html><body>
<?php
$f=file("fichier-04.txt");
for
($i=0;$i<count($f);$i++)
{
echo
$f[$i]."<br
/>";
}
?>
</body></html>
•
deuxième
solution,
avec
fonction
«
fgets13
»
:
fichier-04.php14
<html><body>
<?php
$fp
=
fopen
("fichier-04.txt","r");
while
($l=fgets($fp,500))
{
echo
$l."<br
/>";
}
fclose($fp);
http://grappa.univ-lille3.fr/polys/php/exemples/fichier-01.php
http://grappa.univ-lille3.fr/polys/php/exemples/fichier-02.php
http://fr.php.net/manual/fr/function.file.php
http://grappa.univ-lille3.fr/polys/php/exemples/fichier-03.php
http://fr.php.net/manual/fr/function.fgets.php
http://grappa.univ-lille3.fr/polys/php/exemples/fichier-04.php
chapitrer
@ord@
fichier
?>
</body></html>
19.3.
exercice
écrire
gestionnaire
d’annuaire
téléphonique.
minimum
à
atteindre
:
@ord@
page
(formulaire)
permettre
de
saisir
nom,
prénom
numéro
de
téléphone
d’une
per-
sonne.
2.
l’appui
sur
touche
d’envoi
enregistrer
coordonnées
dans
fichier.
3.
page
permettre
de
présenter
liste
contacts.
avoir
choix
sur
sens
à
donner
mot
«
»
:
en
tableau,
en
liste,
etc.
l’important
être
être
lisible.
@ord@
devoir
pouvoir
passer
d’une
page
à
l’autre
:
lien
entre
pages,
page
d’accueil.
amélioration
possibles,
être
prendre
en
compte
précéder
être
réaliser
:
@ord@
liste
afficher
pouvoir
être
mettre
dans
l’ordre
alphabétique
(voir
fonction
«
sort15
»).
pouvoir
offrir
possibilité
de
supprimer
contact.
@ord@
pouvoir
offrir
possibilité
de
modifier
un
contact.
@ord@
http://fr.php.net/manual/fr/function.sort.php
chapitrer
@ord@
fichier
iii.
corriger
exercice
chapitrer
@ord@
premier
exercice
d’algorithmique,
corriger
trouver
énoncé
de
exercice
chapitrer
@ord@
nombre
impairs
:
impair.php1
<html><body>
<?php
for
($i=1;
$i<15000;
$i=$i+2)
{
echo
"$i
";
}
?>
</body></html>
punition
:
punition.php2
<html><body>
<?php
for
($i=1;$i<=500;$i++)
{
echo
"$i.
devoir
faire
sauvegarde
régulières...<br
/>\n";
}
?>
</body></html>
30!
!:
factorielle.php3
<html><body>
<?php
$f=1;
for
($i=2;$i<=30;$i++){
$f=$f*$i;
}
echo
"30!
!=
$f\n";
?>
</body></html>
multiplication
par
13
:
multiplication.php4
<html><body>
<?php
for
($i=0;$i<14;$i++)
{
$r=$i*13;
echo
"$i*13=$r<br
/>\n";
}
?>
</body></html>
multiplicationbis.php5
<html><body>
<table>
<?php
for
($i=0;$i<14;$i++)
{
$r=$i*13;
echo
"<tr><td
align=\"right\">$i</td><td>*</td><td>13</td><td>=</td>";
echo
"<td
align=\"right\">$r</td></tr>\n";
}
?>
</table>
</body></html>
4
ligne
:
4lignes.php6
<html><body>
<?php
for
($l=1
;
$l<=4
;
$l++)
{
for
($n=1
;
$n<=13
;
$n++)
{
echo
$n;
http://grappa.univ-lille3.fr/polys/php/exemples/impair.php
http://grappa.univ-lille3.fr/polys/php/exemples/punition.php
http://grappa.univ-lille3.fr/polys/php/exemples/factorielle.php
http://grappa.univ-lille3.fr/polys/php/exemples/multiplication.php
http://grappa.univ-lille3.fr/polys/php/exemples/multiplicationbis.php
http://grappa.univ-lille3.fr/polys/php/exemples/4lignes.php
chapitrer
@ord@
premier
exercice
d’algorithmique,
corriger
}
echo
"<br
/>";
}
?>
</body></html>
table
de
multiplication
totale
:
multiplicationtotale.php7
<html><body>
<table
border="border">
<?php
//
1ère
ligne
echo
"<tr><td></td>";
for
($c=0;$c<13;$c++)
{
echo
"<th>$c</th>";
}
echo
"</tr>\n";
//
ligne
for
($l=0;$l<13;$l++)
{
//
1
ligne
echo
"<tr><th>$l</th>";
for
($c=0;$c<13;$c++)
{
$r=$c*$l;
echo
"<td
align=\"right\">$r</td>";
}
echo
"</tr>\n";
}
?>
</table>
</body></html>
table
factorielles
:
tablefact.php8
<html><body>
<?php
//
fonction
factorielle
function
fact($n)
{
$f=1;
//
initialisation
de
variable
d’accumulation
for
($i=1;$i<=$n;$i++)
{
$f
*=
$i;
}
return
$f;
}
for
($x=0;$x<=10;$x++)
{
echo
"$x!
!=
".fact($x)."<br
/>\n";
}
?>
</body></html>
8.
demi-sapin
:
demisapin.php9
<html><body>
<?php
function
triangle($n)
{
for
($l=1
;
$l<=$n
;
$l++)
{
for
($i=1
;
$i<=$l
;
$i++)
{
echo
"*";
}
echo
"<br
/>";
}
}
for
($n=2;$n<=10;$n+=2)
triangle($n);
?>
</body></html>;
coefficient
binôme
:
binome.php10
<html><body>
<?php
http://grappa.univ-lille3.fr/polys/php/exemples/multiplicationtotale.php
http://grappa.univ-lille3.fr/polys/php/exemples/tablefact.php
http://grappa.univ-lille3.fr/polys/php/exemples/demisapin.php
http://grappa.univ-lille3.fr/polys/php/exemples/binome.php
chapitrer
@ord@
premier
exercice
d’algorithmique,
corriger
function
fact($n)
{
$f=1;
for
($i=1;$i<=$n;$i++)
{
$f*=$i;
}
return
$f;
}
function
cnp($n,$p)
{
return
fact($n)/(fact($p)*fact($n-$p));
}
function
binome
($n)
{
echo
"<tr>";
for
($i=0;$i<=$n;$i++)
{
echo
"<td
align=\"right\">".cnp($n,$i)."</td>";
}
echo
"</tr>\n";
}
echo
"<table>\n";
for
($i=0;$i<=20;$i++)
{
binome
($i);
}
echo
"</table>\n";
?>
</body></html>
10.
fibonnacci
:
fibonnacci.php11
<html><body>
<?php
function
fibonnacci($n)
{
if
($n<2)
return
$n;
$fmoins1=1;
$fmoins2=0;
for
($i=2;$i<=$n;$i++)
{
$f=$fmoins1+$fmoins2;
$fmoins2=$fmoins1;
$fmoins1=$f;
}
return
$f;
}
for
($i=0;$i<50;$i++)
{
echo
"$i
:
".fibonnacci($i)."<br
/>\n";
}
?>
</body></html>
pouvoir
version
récursive,
belle,
sans
doute
facile
à
programmer,
efficace
(pourquoi
?)
:
fibonnacci-rec.php12
<html><body>
<?php
function
fibonnacci($n)
{
if
($n<2)
return
$n;
return
(fibonnacci($n-1)+fibonnacci($n-2));
}
for
($i=0;$i<20;$i++)
{
echo
"$i
:
".fibonnacci($i)."<br
/>\n";
}
?>
</body></html>
11.
fibonnacci,
retour
:
fibonnacci-retour.php13
<html><body>
<?php
function
fibonnacci($n)
{
...
l’exercice
précédent
...
}
http://grappa.univ-lille3.fr/polys/php/exemples/fibonnacci.php
http://grappa.univ-lille3.fr/polys/php/exemples/fibonnacci-rec.php
http://grappa.univ-lille3.fr/polys/php/exemples/fibonnacci-retour.php
chapitrer
@ord@
premier
exercice
d’algorithmique,
corriger
$or=(sqrt(5)-1)/2;
echo
"<table
border=\"border\"><tr><th>ordre</th><th>rapport</th>";
echo
"<th>différence</th></tr>\n";
for
($i=0;$i<50;$i++)
{
$r=fibonnacci($i)/fibonnacci($i+1);
echo
"<tr><td>$i</td><td>$r</td><td>".($r-$or)."</td></tr>\n";
}
?>
</body></html>
12.
afficher
cadre
10x10.
a.
avec
<pre>
cadre-pre.php14
<html><body><pre><tt>
<?php
$k="*";
$max=10;
for
($i=1;$i<=$max;$i++)
{
echo
$k;
}
echo
"\n";
for
($i=2;$i<$max;$i++)
{
echo
$k;
for
($j=2;$j<$max;$j++)
{
echo
"
";
}
echo
$k."\n";
}
for
($i=1;$i<=$max;$i++)
{
echo
$k;
}
echo
"\n";
?>
</tt></pre></body></html>
b.
avec
tableau
:
cadre-table.php15
<html><body>
<blockquote><table
border="border"><tr>
<?php
$k="*";
$max=10;
for
($i=1;$i<=$max;$i++)
{
echo
"\t<td>$k</td>\n";
}
echo
"</tr>\n";
for
($i=2;$i<$max;$i++)
{
echo
"<tr>\n\t<td>$k</td>\n";
for
($j=2;$j<$max;$j++)
{
echo
"\t<td></td>\n";
}
echo
"\t<td>$k</td>\n</tr>\n";
}
echo
"<tr>\n";
for
($i=1;$i<=$max;$i++)
{
echo
"\t<td>$k</td>\n";
}
?>
</tr>
</table></blockquote>
</body></html>
tableau
d’additions
à
compléter
:
a.
avec
total
fixe
:
tableauadditionsfixe.php16
<body><html>
<h2>additions
à
compléter,
total
fixe</h2>
<table>
http://grappa.univ-lille3.fr/polys/php/exemples/cadre-pre.php
http://grappa.univ-lille3.fr/polys/php/exemples/cadre-table.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsfixe.php
chapitrer
@ord@
premier
exercice
d’algorithmique,
corriger
<?php
$nombre=10;
//
nombre
de
ligne
$total=100;
//
total
à
atteindre
for
($i=0;$i<$nombre;$i++)
{
$connu=rand(1,$total);
//
nombre
afficher
echo
"\t<tr><th>n◦".($i+1)."
:
</td>";
echo
"<td
align=\"right\">$connu</td>";
echo
"<td>+</td>";
echo
"<td
align=\"center\">
_________
=
</td>";
echo
"<td
align=\"right\">$total</td></tr>\n";
}
?>
</table>
</body></html>
b.
avec
total
variable
:
tableauadditionsvariable.php17
<body><html>
<h2>additions
à
compléter,
total
variable</h2>
<table>
<?php
$nombre=10;
//
nombre
de
ligne
$min=80;
//
borner
inférieure
total
possibles
$max=120;
//
borner
supérieure
totaux
possibles
for
($i=0;$i<$nombre;$i++)
{
$total=rand($min,$max);
$connu=rand(1,$total);
echo
"\t<tr><th>n◦".($i+1)."
:
</td>";
echo
"<td
align=\"right\">$connu</td>";
echo
"<td>+</td>";
echo
"<td
align=\"center\">
_________
=
</td>";
echo
"<td
align=\"right\">$total</td></tr>\n";
}
?>
</table>
</body></html>
http://grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsvariable.php
chapitrer
@ord@
premier
exercice
d’algorithmique,
corriger
chapitre
premier
formulaire
en
php,
corriger
trouver
énoncé
de
exercice
chapitrer
@ord@
bonjour
machin,
avoir
xx
ans...
formulaire
:
traitement-01.html1
<html><body>
<form
method="get"
action="traitement-01.php">
<table>
<tr>
<td
align="right">votre
nom</td>
<td><input
name="nom"
/></td>
</tr><tr>
<td
align="right">votre
âge</td>
<td><input
name="age"
/></td>
</tr><tr>
<td
align="center"
colspan="2"><input
type="submit"
value="envoyer"
/>
</tr>
</table>
</form>
</body></html>
traitement
:
traitement-01.php2
<html><body>
<?php
echo
"bonjour
$nom,
avoir
$age
ans.\n";
?>
</body></html>
2.
montpellier.
formulaire
:
traitement-02.html3
<html><body><form
method="get"
action="traitement-02.php">
<table>
<tr>
<td
align="right">distance</td>
<td><input
name="distance"
/></td>
</tr><tr>
<td
align="right">heures/jour</td>
<td><input
name="heures"
/></td>
</tr><tr>
<td
align="right">jours</td>
<td><input
name="jours"
/></td>
</tr><tr>
<td
align="center"
colspan="2"><input
type="submit"
value="envoyer"
/>
</tr>
</table>
</form></body></html>
traitement
:
traitement-02.php4
<html><body>
<?php
echo
"le
bébé
avoir
parcourir
$distance
km,
"
."à
raison
de
$heures
heure
par
jour,
"
."pendant
$jours
jours.<br
/>\n"
."sa
vitesse
être
de
"
.($distance/$heures/$jours)."
km/h.\n";
?>
</body></html>
3.
bonjour
monsieur
truc.
formulaire
:
traitement-03.html5
<html><body><form
method="get"
action="traitement-03.php">
<table>
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-01.html
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-01.php
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-02.html
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-02.php
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-03.html
chapitre
premier
formulaire
en
php,
corriger
<tr>
<td
align="right">sexe</td>
<td>
<input
name="sexe"
type="radio"
value="m"
checked="checked"
/>masculin
<input
name="sexe"
type="radio"
value="f"
/>féminin
</td>
</tr><tr>
<td
align="right">nom</td>
<td><input
name="nom"
/></td>
</tr><tr>
<td
align="center"
colspan="2"><input
type="submit"
value="envoyer"
/>
</tr>
</table>
</form></body></html>
traitement
:
traitement-03.php6
<html><body>
<?php
if
($sexe=="m")
{
echo
"bonjour
monsieur
$nom.";
}
else
{
echo
"bonjour
madame
$nom.";
}
?>
</body></html>
permis
de
chasse
:
formulaire
:
traitement-04.html7
<html><body><form
method="get"
action="traitement-04.php">
<table><tr>
<td
align="right">poules</td>
<td><input
name="poules"
/></td>
</tr><tr>
<td
align="right">chiens</td>
<td><input
name="chiens"
/></td>
</tr><tr>
<td
align="right">vaches</td>
<td><input
name="vaches"
/></td>
</tr><tr>
<td
align="right">amis</td>
<td><input
name="amis"
/></td>
</tr><tr>
<td
align="center"
colspan="2"><input
type="submit"
value="envoyer"
/>
</tr></table></form>
</body></html>
traitement
:
traitement-04.php8
<html><body>
<?php
echo
"vous
avoir
tué:\n";
echo
"<ul>\n";
echo
"
<li>$poules
poules,</li>\n";
echo
"
<li>$chiens
chiens,</li>\n";
echo
"
<li>$vaches
vaches,</li>\n";
echo
"
<li>$amis
amis.</li>\n";
echo
"</ul>\n";
$perdu=$poules*1+$chiens*3+$vaches*5+$amis*10;
echo
"vous
avoir
perdu:
"
."$poules*1
+
$chiens*3
+
$vaches*5
+
$amis*10=$perdu
points."
."\n<br
/>\n";
$permis=floor($perdu/100);
if
($permis<1)
{
echo
"<b>votre
permettre
être
valide,
attention!
!</b>\n";
}
else
{
echo
"<b>vous
avoir
épuiser
$permis
permis,
devoir
payer
"
.($permis*1000)."
francs.\n"."</b>";
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-03.php
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-04.html
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-04.php
chapitrer
@ord@
premier
formulaire
en
php,
corriger
}
?>
</body></html>
5.
calculatrice,
formulaire
traitement
:
traitement-05.php9
<html><body>
avec
liste
déroulante:<br
/>
<form
method="get"
action="traitement-05.php">
<input
name="a"
size="5"
/>
<select
name="par">
<option
value="+">+</option>
<option
value="-">-</option>
<option
value="*">*</option>
<option
value="/">/</option>
</select>
<input
name="b"
size="5"
/>
<br
/>
<input
type="submit"
value="envoyer"
/>
</form><hr
/>
<!
!--
---------------------------------------------------
-->
avec
bouton
radios:<br
/>
<form
method="get"
action="traitement-05.php">
<table><tr>
<td>
<input
name="a"
size="5"
/>
</td><td>
<input
type="radio"
name="par"
value="+"
checked="checked"
/>+<br
/>
<input
type="radio"
name="par"
value="-"
/>-<br
/>
<input
type="radio"
name="par"
value="*"
/>*<br
/>
<input
type="radio"
name="par"
value="/"
/>/
</td><td>
<input
name="b"
size="5">
</td>
</tr><tr>
<td
colspan="3"
align="center">
<input
type="submit"
value="envoyer"
/>
</td>
</table>
</form><hr
/>
<!
!--
---------------------------------------------------
-->
<?php
if
(isset($par))
{
echo
"le
résultat
calcul
précédent
est:
$a$par$b=";
if
($par=="+")
{
echo
$a+$b;
}
elseif
($par=="-")
{
echo
$a-$b;
}
elseif
($par=="*")
{
echo
$a*$b;
}
else
{
echo
$a/$b;
}
}
?>
</body></html>
table
de
multiplication
à
demande
:
traitement-06.php10
<html><head>
<style
type="text/css">
td
{
text-align:right;
}
</style>
</head><body>
<form
action="traitement-06.php">
choisir
table
:
<select
name="table">
<?php
for
($i=1;$i<=20;$i++)
{
echo
"<option";
if
($table==$i)
echo
"
selected=\"selected\"";
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-05.php
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-06.php
chapitrer
@ord@
premier
formulaire
en
php,
corriger
echo
">$i</option>\n";
}
?>
</select><br
/>
choisir
nombre
de
ligne
:
<select
name="lignes">
<?php
for
($i=10;$i<=20;$i++)
{
echo
"<option";
if
($lignes==$i)
echo
"
selected=\"selected\"";
echo
">$i</option>\n";
}
?>
</select><br
/>
<input
type="submit"
value="afficher
table
choisie"
/>
</form>
<p
/>
<?php
if
(isset($table))
{
//
utiliser
formulaire...
echo
"<table>\n";
for
($l=0;$l<=$lignes;$l++)
{
//
afficher
ligne
de
table
echo
"<tr><td>$l</td><td>×</td><td>$table</td><td>=</td><td>"
.($l*$table)."</td></tr>\n";
}
echo
"</table>\n";
}
?>
</body></html>
mot
de
passe
:
traitement-07.php11
<html><body>
<form
action="exocontr.php">
taper
mot
de
passe
:<input
type="password"
name="pass"
/>
<input
type="submit"
/></form>
<?php
if
(isset($pass))
{
if
($pass=="un")
{
//
premier
mot
de
passer
autoriser
echo
"<h2>bienvenue.
être
l’utilisateur
principal.</h2>";
}
elseif
($pass=="deux")
{
//
deuxième
mot
de
passer
autoriser
echo
"<h4>bienvenue.
être
utilisateur
de
base.</h4>";
}
else
{
//
mot
de
passe
reconnaître
echo
"<h1
style=\"color:red;background:yellow;text-align:center;\">"
."accès
interdit</h1>";
}
}
?>
</body></html>
8.
compléter
addition
:
addition.php12
<html><body>
remplir
case
avec
bon
nombre
calcul
être
correct:
<?php
$ok=0;
if
(isset($a))
{
echo
"tu
venir
d’essayer
$a+$c=$b.<br
/>\n";
if
($a+$c==$b)
{
echo
"c’est
exact.
bravo!
!";
$ok=1;
}
else
{
echo
"c’est
faux,
essayer
encore.";
}
}
else
{
$b=rand(50,500);
$a=rand(0,$b);
}
if
($ok==0)
{
?>
<form
method="post">
<?php
echo
$a;?>+<input
size="4"
name="c"
/>=<?php
echo
$b;?>
http://grappa.univ-lille3.fr/polys/php/exemples/traitement-07.php
http://grappa.univ-lille3.fr/polys/php/exemples/addition.php
chapitrer
@ord@
premier
formulaire
en
php,
corriger
<input
type="submit"
value="verifier"
/>
<input
type="hidden"
name="a"
value="<?php
echo
$a;?>"
/>
<input
type="hidden"
name="b"
value="<?php
echo
$b;?>"
/>
</form>
<?php
}
echo
"<form
method=\"post\">"
."<input
type=\"submit\"
value=\"recommencer\"
/></form>";
?>
</body></html>
l’ordinateur
choisit,
deviner
:
devinette01.php13
<html><body>
<h1>devinette
n◦1</h1>
<h2>vous
devoir
deviner
nombre
programme
avoir
choisi</h2>
<?php
//
jeu
être
commencer
if
(isset($limite)){
//
c’est
premier
fois
if
(!
!isset($guess))
{
//
choisir
nombre
à
deviner
$guess=rand(0,$limite);
//
c’est
premier
essai
$nbessai=1;
}
echo
"le
nombre
j’ai
choisir
être
entre
0
$limite.<br
/>\n";
//
avoir
proposition
à
traiter
if
(isset($proposition)){
$proposition=$proposition*1;
echo
"vous
venir
de
proposer
$proposition:
";
//
joueur
avoir
trouver
if
($proposition==$guess)
{
echo
"\n<h3>bravo!
!trouvé
en
"
.($nbessai-1)."
essais</h3>\n";
echo
"<form
method=\"post\">\n";
echo
"<input
type=\"submit\"
value=\"recommencer\"
/>\n";
echo
"</form>\n";
}
else
{
//
$proposition!
!=$guess
:
trouver
if
($proposition<$guess)
{
//
proposition
petite
echo
"trop
petit.<p
/>\n";
}
if
($proposition>$guess)
{
//
proposition
grande
echo
"trop
grand.<p
/>\n";
}
}
//
fin
de
if($proposition==$guess)
}
if
(isset($guess)&&($proposition!
!=$guess))
{
echo
"c’est
".$nbessai."<sup>".($nbessai==1?"er":"ème")
."</sup>
essai.<p
/>\n";
?>
<table><tr><td>
<form
method="post">
proposez-vous?
<input
name="proposition"
size="4"
/>
<input
type="hidden"
name="guess"
value="<?php
echo
$guess;?>"
/>
<input
type="hidden"
name="limite"
value="<?php
echo
$limite;?>"
/>
<input
type="hidden"
name="nbessai"
value="<?php
echo
$nbessai+1;?>"
/>
<input
type="submit"
value="tester
proposition"
/>
</form></td><td><form
method="post">
<input
type="submit"
value="abandonner"
/>
</form>
</td></tr></table>
<?php
}
//
fin
de
if(isset($guess)&&($proposition!
!=$guess))
}
else
{
//
commencer
jeu
?>
<form
method="post">
choisir
limite
(donc
difficulté):
<select
name="limite">
<option
selected="selected">10</option>
13.
http://grappa.univ-lille3.fr/polys/php/exemples/devinette01.php
chapitre
premier
formulaire
en
php,
corriger
<option>100</option>
<option>1000</option>
<option>10000</option>
</select>
<input
typer
="submit"
value="commencer"
/>
</form>
<?php
}
?>
</body></html>
choisissez,
l’ordinateur
deviner
:
devinette01.php14
<html><body>
<h1>devinette
n◦2</h1>
<h2>le
programme
aller
deviner
nombre
avoir
choisi</h2>
<?php
//
c’est
premier
exécution
if
(!
!isset($_post["min"]))
{
//
demander
à
selectionner
limite
?>
sélectionner
limite
supérieure,
avoir
choisir
nombre
nul
devoir
deviner
(sans
dire)
cliquer
sur
<em>commencer</em>.
<p
/>
<form
method="post">
limiter
supérieure?
<select
name="max">
<option
selected="selected">10
<option>100</option>
<option>1000</option>
<option>10000</option>
</select>
<input
type="hidden"
name="min"
value="0"
/>
<input
type="hidden"
name="nbessai"
value="0"
/>
<input
typer
="submit"
value="commencer"
/>
</form>
<?php
}
else
{
$nbessai=$_get["nbessai"]+1;
if
($_post["result"]=="=")
{
//
nombre
être
trouver
echo
"<h3>gagné
en
."$_post["nbessai"]."
essais.</h3>\n";
}
elseif
($_post["result"]=="+")
{
//
grand,
réduire
borne
supérieure
$max=$_post["test"];
}
elseif
($_post["result"]=="-")
{
//
petit,
réduire
borne
inférieure
$min=$_post["test"];
}
//
n’a
trouver
if
($_post["result"]!
!="=")
{
if
($_post["min==$_post["max"]){
//
borne
être
égales
:
avoir
avoir
triche
echo
"<h3>vous
avoir
triché</h3>\n";
}
else
{
//
nouvelle
proposition
$test=floor(($_post["min"]+$_post["max"])/2);
if
($_post["max"]-$_post["min"]==1)
{
$test=$_post["max"];
}
echo
"<table><tr><td
align=\"center\"
colspan=\"3\">";
echo
"mon
".$_post["nbessai"]."<sup>".($_post["nbessai"]==1?"er":"ème")."</sup>
essai";
echo
"
être
nombre
<b>$_post["test"]</b></td></tr>\n";
?>
<td><form
method="post">
<input
type="hidden"
name="result"
value="-"
/>
<input
type="hidden"
name="test"
value="<?php
echo
$_post["test"];?>"
/>
<input
type="hidden"
name="min"
value="<?php
echo
$_post["min"];?>"
/>
<input
type="hidden"
name="max"
value="<?php
echo
$_post["max"];?>"
/>
<input
type="hidden"
name="nbessai"
value="<?php
echo
$_post["nbessai"];?>"
/>
<input
type="submit"
value="trop
petit"
/>
</form></td>
<td><form
method="post">
14.
http://grappa.univ-lille3.fr/polys/php/exemples/devinette01.php
chapitre
premier
formulaire
en
php,
corriger
<input
type="hidden"
name="result"
value="="
/>
<input
type="hidden"
name="test"
value="<?php
echo
$_post["test"];?>"
/>
<input
type="hidden"
name="min"
value="<?php
echo
$_post["min"];?>"
/>
<input
type="hidden"
name="max"
value="<?php
echo
$_post["max"];?>"
/>
<input
type="hidden"
name="nbessai"
value="<?php
echo
$_post["nbessai"];?>"
/>
<input
type="submit"
value="
g
a
g
n
é!!
!!"
/>
</form></td>
<td><form
method="post">
<input
type="hidden"
name="test"
value="<?php
echo
$_post["test"];?>"
/>
<input
type="hidden"
name="result"
value="+"
/>
<input
type="hidden"
name="min"
value="<?php
echo
$_post["min"];?>"
/>
<input
type="hidden"
name="max"
value="<?php
echo
$_post["max"];?>"
/>
<input
type="hidden"
name="nbessai"
value="<?php
echo
$_post["nbessai"];?>"
/>
<input
type="submit"
value="trop
grand"
/>
</form></td>
</tr></table>
<?php
}
}
}
if
(isset($_post["min"])){
?>
<form
method="post">
<input
type="submit"
value="recommencer"
/>
</form>
<?php
}
?>
</body></html>
11.
pipotron
:
pipotron.php15
<html><body>
<?php
if
(isset($_post["pipo1"]))
{
echo
stripslashes("<hr
/>
".$_post["$pipo1"]."
".$_post["$pipo2"]."
".$_post["pipo3"]."
"
.$_post["$pipo4"]."
$".$_post["pipo5"]."
".$_post["$pipo6"]."
".$_post["$pipo7"]."
$_post["$pipo8"]
.".<hr
/>");
}
?>
<form
method="post">
<select
name="pipo1">
<option>avec</option>
<option>considérant</option>
<option>où
mène</option>
<option>eu
égard
à</option>
<option>vu</option>
<option>en
concerne</option>
<option>dans
cas
particulier
de</option>
<option>quelle
soit</option>
<option>du
faire
de</option>
<option>tant
durera</option>
</select>
<select
name="pipo2">
<option>la
situation</option>
<option>la
conjoncture</option>
<option>la
crise</option>
<option>l’inertie</option>
<option>l’impasse</option>
<option>l’extrémité</option>
<option>la
dégradation
moeurs</option>
<option>la
sinistrose</option>
<option>la
dualité
de
situation</option>
<option>la
baisse
de
confiance</option>
</select>
<select
name="pipo3">
<option>présente</option>
<option>actuelle</option>
<option>qui
occupe</option>
http://grappa.univ-lille3.fr/polys/php/exemples/pipotron.php
chapitrer
@ord@
premier
formulaire
en
php,
corriger
<option>qui
être
nôtre</option>
<option>induite</option>
<option>conjoncturelle</option>
<option>contemporaine</option>
<option>de
fin
de
siècle</option>
<option>de
société</option>
<option>de
derniers
temps</option>
</select>
<select
name="pipo4">
<option>il
convient
de</option>
<option>il
faut</option>
<option>on
devoir
de</option>
<option>il
être
préférable
de</option>
<option>il
être
intéressant
de</option>
<option>il
falloir
négliger
de</option>
<option>on
pouvoir
passer
de</option>
<option>il
être
nécessaire
de</option>
<option>il
être
bon
de</option>
<option>il
falloir
de
urgence</option>
</select>
<select
name="pipo5">
<option>étudier</option>
<option>examiner</option>
<option>ne
négliger</option>
<option>prendre
en
considération</option>
<option>anticiper</option>
<option>imaginer</option>
<option>se
préoccuper
de</option>
<option>s’intéresser
à</option>
<option>avoir
à
l’esprit</option>
<option>se
remémorer</option>
</select>
<select
name="pipo6">
<option>toutes
les</option>
<option>chacune
des</option>
<option>la
majorité
des</option>
<option>toutes
les</option>
<option>l’ensemble
des</option>
<option>la
somme
des</option>
<option>la
totalité
des</option>
<option>la
globalité
des</option>
<option>toutes
les</option>
<option>certaines</option>
</select>
<select
name="pipo7">
<option>solutions</option>
<option>issues</option>
<option>problématiques</option>
<option>voies</option>
<option>alternatives</option>
<option>solutions</option>
<option>issues</option>
<option>problématiques</option>
<option>voies</option>
<option>alternatives</option>
</select>
<select
name="pipo8">
<option>envisageables</option>
<option>possibles</option>
<option>déjà
en
possession</option>
<option>s’offrant
à
nous</option>
<option>de
bon
sens</option>
<option>envisageables</option>
<option>possibles</option>
<option>déjà
en
possession</option>
<option>s’offrant
à
nous</option>
<option>de
bon
sens</option>
</select>
<input
type="submit"
/>
</form>
</body></html>
chapitrer
chaîne
de
caractères,
corriger
trouver
l’énoncé
de
exercice
chapitrer
identite.php1
:
<html><body>
<h2>premiers
essai
de
contrôle
d’identité</h2>
<?php
if
((trim(strtolower($nom))==trim(strtolower("atte")))
&&(trim(strtolower($prenom))==trim(strtolower("tom")))
&&(trim(strtolower($password))==trim(strtolower("rouge"))))
{
echo
"bienvenue
chez
vous,
tom
atte...<br
/>\n";
}
else
{
//
sortie
provisoire
mode
php
(pour
écrire
texte
html
pur)
?>
<hr
/>
veuillez
identifier
svp:<p
/>
<form
method="post"
action="identite.php"
/>
nom:
<input
name="nom"
/><br
/>
prénom:
<input
name="prenom"
/><br
/>
mot
de
passe:
<input
type="password"
name="password"
/><br
/>
<input
type="submit"
/><br
/>
</form>
<hr
/>
<?php
//
retour
dans
mode
php
(pour
fermer
"else")
}
?>
</body></html>
http://grappa.univ-lille3.fr/polys/php/exemples/identite.php
chapitrer
chaîne
de
caractères,
corriger
chapitrer
exercice
sur
tableaux,
corriger
trouver
énoncé
de
exercice
chapitrer
@ord@
1.
écrire
programme
lire
fichier
pour
construire
page
web
contenir
liste
de
lien
hypertextes
:
tableau-06.php1
<html><head>
<title>utilisation
tableaux-6</title>
</head><body><ul>
<?php
$liens=file("tableau-06.txt");
for
($i=0;$i<count($liens);$i++)
{
echo
"<li><a
href=\"".$liens[$i]."\">".$liens[$i]."</a></li>\n";
}
?>
</ul></body></html>
même
exercice,
fois
ligne
comprendre
description
site
pointé
(la
sépara-
tion
être
assurer
par
chaîne
«
"**"
»)
:
tableau-07.php2
<html><body><ul>
<?php
$liens=file("tableau-07.txt");
for
($i=0;$i<count($liens);$i++)
{
$parties=explode("**",$liens[$i]);
echo
"<li><a
href=\"".$parties[0]."\">".$parties[1]."</a></li>\n";
}
?>
</ul></body></html>
même
exercice,
fois
description
l’adresse
correspondante
être
sur
deux
ligne
consécutives
:
tableau-08.php3
<html><body><ul>
<?php
$liens=file("tableau-08.txt");
for
($i=0;$i<count($liens);$i=$i+2)
{
echo
"<li><a
href=\"".$liens[$i+1]."\">".$liens[$i]."</a></li>\n";
}
?>
</ul></body></html>
donner
liste
de
personne
ligne
être
composée,
dans
l’ordre,
d’un
identifier
(un
nombre),
prénom,
nom,
mot
de
passe.
écrire
page
web
donner
à
sélectionner
personne
afficher
mot
de
passe
:
tableau-09.php4
<html><body>
<?php
$personnes=file("tableau-09.txt");
for
($i=0;$i<count($personnes);$i++)
{
$parties=explode(";",$personnes[$i]);
$code=$parties[0];
$prenom[$code]=$parties[1];
$nom[$code]=$parties[2];
$password[$code]=$parties[3];
}
?>
<form
action="tableau-09.php"
method="post">
<select
name="qui">
<?php
reset($nom);
while
(list($code,$n)=each($nom))
{
echo
"<option
value=\"$code\">".$prenom[$code]."
".strtoupper($n)."</option>\n";
}
?>
</select>
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-06.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-07.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-08.php
http://grappa.univ-lille3.fr/polys/php/exemples/tableau-09.php
chapitrer
exercice
sur
tableaux,
corriger
<input
type="submit"
value="quel
mot
de
passe
?"
/>
</form>
<?php
if
(isset($qui))
{
echo
"<br
/><hr
/>le
mot
de
passe
de
".$prenom[$qui]."
"
.strtoupper($nom[$qui])."
être
".$password[$qui];
}
?>
</body></html>
chapitre
exercice
sur
fichiers,
corriger
trouver
énoncé
de
exercice
chapitrer
@ord@
index.php1
:
pager
d’accueil.
(il
s’agit
en
fait
d’une
page
en
html
pur,
sans
php.)
<html><<body>>
<h1>premier
projet
en
licence
aes</h1>
<h2>accueil</h2>
<ul>
<li><a
href="liste.php">liste</a>
contact
(ou
autre
<a
href="liste2.php">présentation</a>
contacts)</li>
<li>saisir
<a
href="saisie.php">nouveau
contact</a></li>
</ul>
</<body>></html>
liste.php2
:
liste
contacts.
<html><<body>>
<h1>premier
projet
en
licence
aes</h1>
<h2>liste
contacts</h2>
<ul>
<?php
//
lecture
fichier
$f=file("liste.txt");
//
pour
trier
sur
nom
sort($f);
//
parcours
de
liste
for
($i=0;$i<count($f);$i++)
{
//
découpage
d’1
ligner
suivant
";"
$l=explode(";",$f[$i]);
//
affichage
après
découpage
echo
"<li>nom:
$l[0]<br
/>prénom:
$l[1]<br
/>téléphone:
$l[2]\n";
}
?>
</ul>
<a
href="index.php">accueil</a>
</<body>></html>
liste2.php3
:
autre
liste
contact
<html><<body>>
<h1>premier
projet
en
licence
aes</h1>
<h2>liste
contacts</h2>
<table
border="border">
<tr><th>nom</th><th>prénom</th><th>téléphone</th></tr>
<?php
//
lecture
fichier
$f=file("liste.txt");
//
pour
trier
sur
nom
sort($f);
//
parcours
de
liste
for
($i=0;$i<count($f);$i++)
{
//
découpage
d’1
ligner
suivant
";"
$l=explode(";",$f[$i]);
//
affichage
après
découpage
echo
"<tr><td>$l[0]</td><td>$l[1]</td><td>$l[2]</td></tr>\n";
}
?>
</table>
<a
href="index.php">accueil</a>
</<body>></html>
saisie.php4
:
formulaire
de
saisie.
(il
s’agit
en
fait
d’une
page
en
html
pur,
sans
php.)
<html><<body>>
<h1>premier
projet
en
licence
aes</h1>
<h2>saisie
d’un
nouveau
contact</h2>
http://grappa.univ-lille3.fr/polys/php/exemples/index.php
http://grappa.univ-lille3.fr/polys/php/exemples/liste.php
http://grappa.univ-lille3.fr/polys/php/exemples/liste2.php
http://grappa.univ-lille3.fr/polys/php/exemples/saisie.php
chapitrer
exercice
sur
fichiers,
corriger
<form
action="enregistrer.php">
nom
:
<input
name="nom"
/><br
/>
prénom
:
<input
name="prenom"
/><br
/>
téléphone
:
<input
name="telephone"
/><br
/>
<input
type="submit"
/>
</form>
<a
href="index.php">accueil</a>
</<body>></html>
enregistrer.php5
:
enregistrer
nouveau
contact
<html><<body>>
<h1>premier
projet
en
licence
aes</h1>
<h2>enregistrement
d’un
nouveau
contact</h2>
<?php
//
ouverture
fichier
en
ajout
$fp=fopen("liste.txt","a");
//
écriture
de
nouvelle
ligne
fputs($fp,"$nom;$prenom;$telephone\n");
//
fermeture
fichier
fclose
($fp);
//
affichage
pour
vérification
echo
"le
nouveau
contact
avoir
être
enregistrer
:\n"
."<ul></li>\n"
."<li>nom:
$nom</li>\n"
."<li>prénom:
$prenom</li>\n"
."<li>téléphone:
$telephone</li>\n"
."</ul>\n";
?>
<a
href="index.php">accueil</a>
</<body>></html>
http://grappa.univ-lille3.fr/polys/php/exemples/enregistrer.php
chapitrer
exploration
d’un
répertoire,
corriger
trouver
énoncé
de
exercice
chapitrer
@ord@
simple.php1
:
<html><body>
<h2>on
afficher
image
trouvées</h2>
<?php
$dir
=
opendir(".");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jpg")
{
echo
"<img
src=\"$file\"
/>\n";
}
}
closedir($dir);
?>
</body></html>
thumb.php2
:
<html><body>
<h2>on
afficher
onglets,
faire
lien
vers
vraies
images</h2>
<?php
$dir
=
opendir("mini");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jpg")
{
echo
"<a
href=\"$file\"><img
src=\"mini/$file\"
/></a>\n";
}
}
closedir($dir);
?>
</body></html>
thumbplus.php3
:
<html><body>
<h2>on
afficher
onglets,
faire
lien
vers
page
contenir
vraies
image
dans
cadre</h2>
<?php
$dir
=
opendir("mini");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jpg")
{
echo
"<a
href=\"image.php?image=$file\">"
."<img
src=\"mini/$file\"
/></a>\n";
}
}
closedir($dir);
?>
</body></html>
parfait.php4
:
<html><body>
<h2>on
afficher
onglet
en
tableau
régulier.
faire
lien
vers
page
contenir
vraies
image
dans
cadre</h2>
<table
border="border">
<?php
$nb=4;
$i=0;
$dir
=
opendir("mini");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jpg")
{
if
($i==0)
{
echo
"<tr>";
}
echo
"<td><a
href=\"image.php?image=$file\">"
."<img
src=\"mini/$file\"
/></a></td>\n";
http://grappa.univ-lille3.fr/polys/php/exemples/simple.php
http://grappa.univ-lille3.fr/polys/php/exemples/thumb.php
http://grappa.univ-lille3.fr/polys/php/exemples/thumbplus.php
http://grappa.univ-lille3.fr/polys/php/exemples/parfait.php
chapitrer
exploration
d’un
répertoire,
corriger
$i++;
if
($i>=$nb)
{
echo
"</tr>\n";
$i=0;
}
}
}
closedir($dir);
?>
</table>
</body></html>
chapitrer
news...,
corriger
trouver
énoncé
de
exercice
chapitrer
@ord@
26.1.
accueil
index.php1
:
<html><body>
<h1>news...</h1>
<h2>menu</h2>
<ul>
<li>liste
<a
href="listenoms.php">noms</a>
de
fichier
de
nouvelles</li>
<li>liste
<a
href="listeliens.php">liens</a>
vers
fichier
de
nouvelles</li>
<li>affichage
de
<a
href="affichetout.php">toutes
nouvelles</a></li>
<li>affichage
<a
href="affichetitre.php">titres</a>
nouvelles</li>
<li>affichage
<a
href="affichetitrelien.php">titres
faisant</a>
vers
nouvelles</li>
<li>affichage
de
<a
href="affichetout_br.php">toutes
nouvelles
proprement</a></li>
<li><a
href="sujet.php">choix
sujet</a></li>
</ul>
</body></html>
26.2.
liste
nom
de
fichier
de
nouvelles
listenoms.php2
:
<html><body>
<h1>news...</h1>
<h2>liste
nom
de
fichier
de
nouvelles</h2>
<ul>
<?php
$dir
=
opendir(".");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jnl")
{
echo
"<li>$file;</li>\n";
}
}
closedir($dir);
?>
</ul>
</body></html>
26.3.
liste
lien
vers
fichier
de
nouvelles
listeliens.php3
:
<html><body>
<h1>news...</h1>
<h2>liste
lien
vers
fichier
de
nouvelles</h2>
<ul>
<?php
$dir
=
opendir(".");
while($file
=
readdir($dir))
{
http://grappa.univ-lille3.fr/polys/php/exemples/news/index.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/listenoms.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/listeliens.php
chapitre
news...,
corriger
if
(substr($file,-4)==".jnl")
{
echo
"<li><a
href=\"unenouvelle.php?f=$file\">$file</a></li>\n";
}
}
closedir($dir);
?>
</ul>
</body></html>
page
nécessiter
l’existence
d’une
page
unenouvelle.php
permettre
d’afficher
contenu
d’une
nou-
velle:
<html><body>
<?php
require($f);?>
</body></html>
26.4.
affichage
de
nouvelles
affichetout.php4
:
<html><body>
<h1>news...</h1>
<h2>affichage
de
nouvelles</h2>
<hr
/>
<?php
$dir
=
opendir(".");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jnl")
{
$f=file($file);
for
($i=0;$i<count($f);$i++)
{
echo
$f[$i];
}
echo
"<hr
/>";
}
}
closedir($dir);
?>
</ul>
</body></html>
26.5.
affichage
titre
nouvelles
affichetitre.php5
:
<html><body>
<h1>news...</h1>
<h2>affichage
titre
nouvelles</h2>
<ul>
<?php
$dir
=
opendir(".");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jnl")
{
$f=file($file);
echo
"<li>$f[0]</li>\n";
}
}
closedir($dir);
?>
</ul>
</body></html>
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetout.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetitre.php
chapitre
news...,
corriger
26.6.
affichage
titre
faire
lien
vers
nouvelles
affichetitrelien.php6
:
<html><body>
<h1>news...</h1>
<h2>affichage
titre
faire
lien
vers
nouvelles</h2>
<ul>
<?php
$dir
=
opendir(".");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jnl")
{
$f=file($file);
echo
"<li><a
href=\"$file\">$f[0]</a></li>\n";
}
}
closedir($dir);
?>
</ul>
</body></html>
page
nécessiter
l’existence
de
unenouvelle.php.
26.7.
affichage
de
nouvelles,
affichetout_br.php7
:
<html><body>
<h1>news...</h1>
<h2>affichage
de
nouvelles,
proprement</h2>
<hr
/>
<?php
$dir
=
opendir(".");
while($file
=
readdir($dir))
{
if
(substr($file,-4)==".jnl")
{
$f=file($file);
echo
"<h3>$f[0]</h3>\n";
for
($i=1;$i<count($f);$i++)
{
echo
$f[$i];
if
(trim($f[$i])=="")
{
echo
"<br
/>";
}
}
echo
"<hr
/>";
}
}
closedir($dir);
?>
</body></html>
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetitrelien.php
http://grappa.univ-lille3.fr/polys/php/exemples/news/affichetout_br.php
chapitre
news...,
corriger
26.8.
choix
sujet
sujet.php8
:
<html><body>
<h1>news...</h1>
<h2>choix
sujet</h2>
<form
action="sujet2.php">
<select
name="sujet">
<option
value="sci">sciences</option>
<option
value="inf">informatique</option>
<option
value="msc">divers</option>
</select>
<input
type="submit">
</form>
</body></html>
8.
http://grappa.univ-lille3.fr/polys/php/exemples/news/sujet.php
iv.
étude
de
cas
chapitrer
étude
de
cas
partie
contenir
étude
de
cas
à
réalistes,
n’est
réels...
être
projet
avoir
être
demander
étudiant
de
maîtrise
aes-teg,
2ème
année
d’iup
iies
de
3ème
année
de
licence
miashs.
être
pour
plupart
baser
sur
cas
réels,
avoir
être
modifier
dans
but
pédagogique
(pour
simplifier
situation
complexe,
contraire
pour
complexifier
situation
simpliste
pour
exercice
d’application
cours).
corriger
de
projet
n’est
être
disponible.
être
inutile
d’en
réclamer...
chapitre
étude
de
cas
chapitrer
projet
disque
2009
licence
miashs
3ème
année,
2009-2010.
pouvoir
consulter
page
originales1
sur
web.
28.1.
présentation
aller
devoir
créer
site
web
gére
contenu
d’une
discothèque.
manipuler
infor-
mater
nom
disques,
année
de
parution,
artistes,
texte
chansons,
etc.
information
être
accessibles
à
d’autres
personnes,
devoir
gérer
droits
d’accès
à
site
web.
28.1.1.
fonctionnalité
générales
•
liste
disques.
•
liste
chanson
pour
disque.
•
artiste/groupe
pour
disque,
possibilité
de
préciser
artistes/groupes
particuliers
pour
chanson
(compilations,
duos,
etc.).
•
genre
musicaux,
langue(s)
pour
artiste/groupe,
langue(s)
pour
chanson.
•
auteur(s)
chansons.
•
parole
chansons.
•
appartenance(s)
d’un
artiste
à
un
groupe.
28.1.2.
fonctionnalité
de
consultation
•
obtenir
liste
disque
(avec
caractéristiques)
liste
chansons.
•
obtenir
liste
artistes.
•
rechercher
chanson.
•
avoir
accès
à
statistique
de
base.
28.1.3.
modification
données,
accès
donnée
sensibles
être
indispensable
fonctionnalité
suivantes
être
protéger
par
authentification
de
l’utilisateur.
en
fonctionnalité
de
consultation
(voir
ci-dessus)
pouvoir
être
protéger
par
mot
de
passe
désirer
(le
site
être
d’accès
privé,
n’est
obligatoire),
distinguer
deux
niveau
d’autorisation,
qu’on
appelera
fort
faible
dans
suite.
28.1.3.1.
niveau
faible
c’est
niveau
être
accessibles
donnée
sensibles,
être
modifier
information
vitales.
plupart
membre
de
confiance
avoir
accès
à
niveau.
•
consultation
parole
chanson
(accés
priver
nécessaire
pour
raison
de
respect
droit
d’auteur).
•
insertion
d’information
dans
base
(créer
artiste,
genre
musical,
disque,
un
chanson,
etc.).
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2009-2010/bd/projetdisques/
chapitre
28.
projet
disque
2009
28.1.3.2.
niveau
fort
c’est
niveau
être
modifier
information
vitales
pour
fonctionnement
site.
seules
personnes,
responsables
site,
avoir
accès
à
niveau.
•
gérer
utilisateur
droit
(créer,
modifier,
supprimer).
•
modifier
supprimer
donnée
existantes
(paroles
de
chanson,
orthographe
noms,
etc.).
28.2.
base
de
donnée
l’analyse
être
présenter
ici.
contenter
de
donner
structure
de
base.
28.2.1.
table
•
table
artiste
:
create
table
artiste
(
art_num
integer
not
null
primary
key,
art_prenom
character
varying,
art_nom
character
varying,
art_groupe
character
varying,
art_modif
timestamp
without
time
zoner
default
current_timestamp);
•
table
etat
:
create
tabler
etat
(
eta_num
integer
not
null
primary
key,
eta_nom
character
varying);
•
table
genre
:
create
tabler
genre
(
gen_num
integer
not
null
primary
key,
gen_nom
character
varying,
gen_modif
timestamp
without
time
zoner
default
current_timestamp);
•
table
droits
:
create
tabler
droit
(
dro_num
integer
not
null
primary
key,
dro_nom
character
varying,
dro_niveau
integer);
•
table
langue
:
create
tabler
langue
(
lan_num
character
varying
not
null
primary
key,
lan_nom
character
varying);
•
table
langueartiste
:
create
table
langueartiste
(
laa_langue
character
varying
not
null
references
langue(lan_num),
laa_artiste
integer
not
null
references
artiste(art_num),
laa_maternelle
boolean
default
true,
primary
key
(laa_langue,
laa_artiste));
•
table
autorisation
:
create
tabler
autorisation
(
aut_login
character
varying
not
null
primary
key,
aut_motdepasse
character
varying,
aut_nom
character
varying,
aut_prenom
character
varying,
aut_droits
integer
references
droits(dro_num));
•
table
chanson
:
create
tabler
chanson
(
cha_num
integer
not
null
primary
key,
cha_titre
character
varying,
98
chapitre
28.
projet
disque
2009
cha_genre
integer
references
genre(gen_num),
cha_texte
character
varying,
cha_libre
boolean,
cha_modif
timestamp
without
time
zoner
default
current_timestamp);
•
table
languechanson
:
create
tabler
languechanson
(
lac_langue
character
varying
not
null
references
langue(lan_num),
lac_chanson
integer
not
null
references
chanson(cha_num),
lac_principale
boolean
default
true
not
null,
primary
key
(lac_langue,
lac_chanson,
lac_principale));
•
table
membre
:
create
tabler
membre
(
mem_membre
integer
not
null
references
artiste(art_num),
mem_groupe
integer
not
null
references
artiste(art_num),
mem_debut
character
varying
not
null,
mem_fin
character
varying
not
null,
primary
key
(mem_membre,
mem_groupe,
mem_debut,
mem_fin));
•
table
disquer
:
create
tabler
disque
(
dis_num
integer
not
null
primary
key,
dis_titre
character
varying,
dis_artiste
integer
references
artiste(art_num),
dis_annee
character
varying,
dis_cddb
character
varying,
dis_anneeachat
character
varying,
dis_prixachat
numeric(8,2),
dis_etat
integer
references
etat(eta_num),
dis_perdu
boolean
default
false,
dis_modif
timestamp
without
time
zoner
default
current_timestamp);
•
table
interprete
:
create
tabler
interprete
(
int_artiste
integer
not
null
(int_artiste)
references
artiste(art_num),
int_chanson
integer
not
null
references
chanson(cha_num),
int_disque
integer
not
null
references
disque(dis_num),
int_numero
integer
not
null,
primary
key
(int_artiste,
int_chanson,
int_disque,
int_numero));
•
table
ecrit
:
create
tabler
ecrit
(
ecr_artiste
integer
not
null
references
artiste(art_num),
ecr_chanson
integer
not
null
references
chanson(cha_num),
primary
key
(ecr_artiste,
ecr_chanson)
);
chapitre
28.
projet
disque
2009
28.2.2.
mld
chapitrer
projet
inscription
licence
miashs
3ème
année,
2008-2009.
pouvoir
consulter
page
originales1
sur
web.
29.1.
présentation
aller
travailler
pour
lille
3...
lille
3
numérique2
organiser
stage
de
familiarisation
étudiant
avec
ent3.
falloir
application
permettre
l’inscription
étudiant
lille
3
sur
créneau
horaires
précis.
aller
venir
en
aide
:
c’est
aller
réaliser
application.
29.1.1.
fonctionnalité
générales
•
calendrier
avec
créneau
horaires
sur
pouvoir
cliquer.
•
possibilité
de
s’inscrire
sur
créneau
de
choix
sans
authentification
nécessaire
(nom,
prénom,
ufr
formation,
numéro
étudiant).
•
de
possibilité
de
suppression
d’une
inscription
par
l’étudiant.
étudiant
pouvoir
s’inscrire
qu’à
seul
créneau
horaire.
en
cas
d’erreur
devoir
s’adresser
gestionnaire
l’adresse
figurer
sur
site.
(vérification
par
numéro
d’étudiant
qu’un
étudier
n’est
inscrire
sur
créneau
pour
éviter
inscription
multiples.)
•
notification
sur
calendrier
qu’un
créneau
être
complet.
29.1.2.
fonctionnalité
calendrier
•
étendre
calendrier
paramétrée
en
fonction
séance
existantes.
•
créneau
fermer
dès
seuil
être
atteindre
(seuil
paramétrable
par
gestionnaire).
29.1.3.
gestion
de
base
•
authentification
indispensable.
•
créer,
modifier
supprimer
séance.
•
lister
créneau
et/ou
imprimer.
•
lister
inscription
et/ou
imprimer.
•
pouvoir
fermer
créneau
(éventuellement
en
ouvrir
nouveau)
:
mention
«
groupe
complet
»
appa-
raît
sur
calendrier.
•
modifier
supprimer
inscription
d’un
étudier
à
créneau.
•
pouvoir
vider
créneau,
créneau
pour
utilisation
ultérieure
de
base.
•
visualiser
liste
de
créneau
avec
tri
par
:
créneau
/
nom
/
numéro
étudier
/
année
/
ufr.
•
possibilité
de
faire
export
sur
tableur.
29.2.
base
de
donnée
l’analyse
être
présenter
ici.
contenter
de
donner
structure
de
base.
1.
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2008-2009/technoweb/projetinscription/
2.
http://www.univ-lille3.fr/fr/lille3-numerique/
3.
http://www.univ-lille3.fr/fr/lille3-numerique/ent/
chapitre
29.
projet
inscription
29.2.1.
mld
29.2.2.
table
table
ufr
contenir
renseignement
sur
ufr
:
create
tabler
ufr
(
ufr_num
integer
primary
key,
ufr_nom
varchar(40)
not
null
);
table
moniteur
contenir
renseignement
sur
moniteur
encadrer
séance
:
chapitre
projet
inscription
create
tabler
moniteur
(
mon_num
integer
primary
key,
mon_nom
varchar(40)
not
null,
mon_prenom
varchar(40)
);
table
salle
contenir
renseignement
sur
salle
dérouler
séance
:
create
tabler
salle
(
sal_num
integer
primary
key,
sal_nom
varchar(40)
not
null,
sal_taille
integer
);
table
niveau
contenir
renseignement
sur
niveau
d’études
étudiants
(licence
1ère
année,
etc.)
:
create
tabler
niveau
(
niv_num
integer
primary
key,
niv_nom
varchar(40)
not
null,
niv_ordre
integer
not
null
);
table
seance
contenir
renseignement
sur
séance
:
create
tabler
seance
(
sea_num
integer
primary
key,
sea_jour
integer
not
null,
sea_mois
integer
not
null,
sea_annee
integer
not
null,
sea_debut_h
integer
not
null,
sea_debut_m
integer
not
null,
sea_fin_h
integer
not
null,
sea_fin_m
integer
not
null,
sea_moniteur
integer
references
moniteur(mon_num),
sea_salle
integer
references
salle(sal_num),
sea_remarque
varchar(200)
default
”
);
table
ville
contenir
renseignement
sur
ville
:
create
tabler
ville
(
vil_cp
varchar(10)
primary
key,
vil_nom
varchar(40)
not
null
);
table
typevoirie
contenir
renseignement
sur
type
de
voirie
(rue,
boulevard,
avenue,
etc.)
:
create
tabler
typevoirie
(
tvo_num
integer
primary
key,
tvo_nom
varchar(40)
not
null
);
table
voirie
contenir
renseignement
sur
voirie
:
create
tabler
voirie
(
voi_num
integer
primary
key,
voi_type
integer
not
null
references
typevoirie(tvo_num),
voi_nom
varchar(100)
not
null,
voi_cp
varchar(6)
not
null
references
ville(vil_cp)
);
table
etudiant
contenir
renseignement
sur
étudiant
:
create
table
etudiant
(
etu_carte
varchar
primary
key,
etu_nom
varchar(40)
not
null,
etu_prenom
varchar(40),
etu_ufr
integer
references
ufr(ufr_num),
etu_niveau
integer
references
niveau(niv_num),
etu_adressenum
varchar(10),
103
chapitre
29.
projet
inscription
etu_voirie
integer
not
null
references
voirie(voi_num),
etu_email
varchar(40),
etu_telfixe
varchar(20),
etu_telmobile
varchar(20)
);
table
inscription
contenir
renseignement
sur
inscription
étudiant
séance
:
create
tabler
inscription
(
ins_etudiant
varchar(20)
references
etudiant(etu_carte),
ins_seance
integer
references
seance(sea_num),
primary
key(ins_etudiant,ins_seance)
);
table
parametre
contenir
renseignement
sur
différents
paramètre
de
l’application
(mots
de
passe,
etc.)
:
create
table
parametre
(
par_num
integer
primary
key,
par_nom
varchar(20),
par_texte
varchar(100),
par_valeur
varchar(200),
par_ordre
integer
);
chapitre
30.
projet
teniraq
licence
miashs
3ème
année,
2007-2008.
pouvoir
consulter
page
originales1
sur
web.
30.1.
présentation
club
de
tennis
teniraq
(raq
raquette)
utiliser
base
de
donnée
pour
administrer
fonc-
tionnement
:
adhésions,
entrer
dans
locaux,
réservation
sur
3
courts
(deux
courts
couvrir
a
b
court
extérieur
c),
match
défaire
(matchs
internes
club
permettre
de
classer
joueurs).
adhérent
recevoir
dès
qu’il
être
inscrire
(c’est-à-dire
dès
qu’il
avoir
payer
cotisation
annuelle)
badge
posséder
numéro
(appelé
numéro
d’adhérent)
mot
de
passe
permettre
de
connecter
sur
base
de
donnée
club
par
internet.
30.1.1.
adhésion
adhésion
en
cours
être
mémoriser
dans
table
badge
contenir
pour
personne
numéro
de
badge,
mot
de
passe,
nom,
prénom,
etc.
lorsqu’un
adhérent
régulariser
situation,
date
limiter
de
validité
être
augmenter
d’une
année,
jour
pour
jour,
pour
badge
en
cours
de
validité.
pour
autres,
date
de
validité
être
date
d’inscription
augmenter
d’une
année,
jour
pour
jour.
en
joueurs,
autres
personne
recevoir
badge
de
catégorie
logistique
de
pouvoir
entrer
dans
club.
s’agit
de
l’adjoint
sport
de
commune,
responsable
association
chef
de
travaux.
s’agit
personne
assurer
l’entretien
matériel,
nettoyage
de
salle.
nettoyage
avoir
lieu
mardi
matin
entre
9h
12h.
durant
créneau,
réservation
de
terrain
n’est
autoriser
pour
joueurs.
personne
être
considérer
adhérent
à
vie.
cas
personnel
de
mairie
autoriser
être
joueur,
avoir
deux
badge
:
badge
logistique
badge
joueur.
badge
donner
droit
différents
à
propriétaire,
selon
catégorie
:
•
logistique
pour
joueur
:
d’entrer
dans
club,
droit
de
réserver.
•
jeune
pour
joueur
avoir
de
15
an
:
droit
d’entrée
(ils
devoir
être
accompagner
d’un
adhérent
âgé
pour
entrer,
problème
de
responsabilité
civile).
•
ado
pour
joueur
l’âge
être
comprendre
entre
15
18
ans.
avoir
droit
d’entrer
dans
club
de
réserver
excepté
soir
de
semaine
après
17h
(afin
de
permettre
travailleur
de
réserver
soir).
•
senior
pour
joueur
de
de
18
ans.
avoir
droit
d’entrer
de
réserver
à
moment.
30.1.2.
entrée
dans
salle
adhérent
devoir
saisir,
sur
clavier
situer
de
porte
d’entrée,
numéro
d’adhérent
mot
de
passe
pour
ouvrir
porte.
faisant,
l’évènement
être
enregistrer
par
l’ajout
d’une
ligne
dans
table
acces.
table
constituer
historique
entrée
dans
club.
permet,
en
cas
de
vol
de
dégradation
de
retrouver
trouver
dans
club
à
moment
là.
adhérent
n’a
renouveler
cotisation
annuelle
avoir
droit
de
rentrer
pendant
mois,
pouvoir
réserver
de
terrain.
30.1.3.
réservation
de
court
en
connecter
sur
base
de
données,
adhérent
joueur
avoir
possibilité
:
•
de
valider
réservation
pour
prouver
qu’il
être
venir
jouer
à
moment,
•
d’annuler
réservation
qu’il
avoir
faite,
•
de
réserver
court
(a
b
c)
pour
certaine
date,
à
certaine
heure
(par
exemple
b
jeudi
prochain
à
17h),
avec
un
partenaire.
@ord@
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2007-2008/technoweb/projetteniraq/
chapitrer
projet
teniraq
réservation
pouvoir
être
effectuer
pour
4
semaine
à
venir,
jour
pour
jour.
nouvelle
ligne
être
ajouter
à
table
reservations,
mémoriser
l’ensemble
réservation
(numéro
court,
date,
heure).
joueur
réserver
enregistrer
réservation
de
partenaire
de
jeu.
annulation
pouvoir
être
faire
qu’au
6
heure
avant
de
jouer,
pour
permettre
à
d’autres
joueur
de
prendre
place
libre.
validation
n’est
possible
dans
créneau
[réservation-15
mn,
réservation+15
min].
hors
de
créneau,
considérer
joueur
n’a
honorer
réservation,
n’a
occuper
créneau
au-
raire
pouvoir
être
occuper
avec
de
profit
par
autre
joueur.
être
mettre
en
prison
pour
4
jours,
c’est-à-dire
qu’il
pouvoir
effectuer
de
réservation
pendant
période.
date
d’entrée
en
prison
être
enregistrer
dans
table
badge.
seule
réservation
(à
venir)
par
badge
joueur.
badge
logistique
donner
droit
de
réserver
un
terrain.
30.1.4.
match
défaire
joueur
avoir
0
point
à
début
de
saison
(début
octobre).
dimanche,
match
défaire
dérouler
sur
créneau
d’une
heure.
a
fin
de
l’heure,
compter
nombre
de
jeu
gagner
par
deux
joueurs.
en
cas
d’égalité,
joueur
jeune
être
déclarer
vainqueur.
joueur
recevoir
point
de
participation.
vainqueur
recevoir
en
différence
entre
nombre
de
jeu
gagnés.
par
exemple,
joueur
avoir
gagner
8/3
recevoir
1
+
(8-3)
=
5
point
défis.
30.1.5.
paramétrage
valeur
être
modifiables
:
délai
d’annulation
d’une
réservation
(6
heures),
délai
pour
valider
réservation
(15
min),
nombre
de
jour
de
prison
validation
(4
jours),
nombre
de
semaine
de
réser-
vation
(4
semaines).
valeur
être
enregistrer
dans
table
parametres
être
modifiable
par
possesseur
badge
niveau
d’autorisation
être
suffisant.
30.2.
base
de
donnée
l’analyse
être
présenter
ici.
contenter
de
donner
structure
de
base.
chapitre
30.
projet
teniraq
30.2.1.
mld
30.2.2.
table
table
ville
contenir
renseignement
sur
ville
:
create
tabler
ville
(
codepostal
varchar(6)
primary
key,
ville
varchar(50)
chapitrer
projet
teniraq
);
table
typevoiries
contenir
renseignement
sur
type
de
voirie
(rue,
boulevard,
avenue,
etc.)
:
create
tabler
typevoiries
(
codetypevoirie
integer
primary
key,
typevoirie
varchar(20)
);
table
voirie
contenir
renseignement
sur
voirie
:
create
tabler
voirie
(
codevoirie
integer
primary
key,
reftypevoirie
integer
not
null,
nomvoirie
varchar(100),
codepostal
varchar(6)
not
null,
foreign
key
(reftypevoirie)
references
typevoiries(codetypevoirie),
foreign
key
(codepostal)
references
villes(codepostal)
);
table
niveauautorisations
contenir
renseignement
sur
niveau
d’autorisation
:
create
tabler
niveauautorisations
(
codeniveauautorisation
integer
primary
key,
niveau
integer,
autorisation
varchar(20)
);
table
badge
contenir
renseignement
sur
personne
posséder
badge
(joueurs
logistiques)
:
create
tabler
badge
(
numbadge
integer
primary
key,
motdepasse
varchar(20),
nom
varchar(50),
prenom
varchar(50),
refniveauautorisation
integer
not
null,
foreign
key
(refniveauautorisation)
references
niveauautorisations(codeniveauautorisation)
);
table
joueur
contenir
renseignement
sur
joueur
:
create
tabler
joueur
(
numbadge
integer
primary
key,
datenaiss
date,
sexe
varchar(1),
licence
varchar(10),
inscritjusque
date,
adressenum
varchar(10),
refvoirie
integer
not
null,
telfixe
varchar(20),
telmobile
varchar(20),
classementofficiel
varchar(20),
pointsdefis
integer,
dernieredateprison
date,
foreign
key
(refvoirie)
references
voiries(codevoirie),
foreign
key
(numbadge)
references
badges(numbadge)
);
table
acces
contenir
renseignement
sur
accès
salle
:
create
tabler
acces
(
refbadge
integer,
instantacces
timestamp,
primary
key
(refbadge,instantacces),
foreign
key
(refbadge)
references
badges(numbadge)
);
table
reservations
contenir
renseignement
sur
réservation
de
court
:
create
table
reservations
(
chapitre
projet
teniraq
codereservations
integer
primary
key,
refreservant
integer
not
null,
refinvite
integer
not
null,
courir
varchar(4),
datereservation
date,
heurereservation
integer,
instantvalidation
time,
foreign
key
(refreservant)
references
joueurs(numbadge),
foreign
key
(refinvite)
references
joueurs(numbadge)
);
table
match
contenir
renseignement
sur
match
:
create
tabler
match
(
codematchs
integer
primary
key,
refvainqueur
integer
not
null,
refperdant
integer
not
null,
datematch
date,
heurematch
integer,
scorevainqueur
integer,
scoreperdant
integer,
foreign
key
(refvainqueur)
references
joueurs(numbadge),
foreign
key
(refperdant)
references
joueurs(numbadge)
);
table
categories
contenir
renseignement
sur
catégorie
de
joueur
:
create
tabler
categories
(
codecategories
varchar(1)
primary
key,
nomcategorie
varchar(30),
agemini
integer,
agemaxi
integer,
accesautorise
boolean,
reservationautorisee
boolean,
eclairageautorise
boolean
);
table
bornesreservations
contenir
renseignement
sur
heure
de
réservation
possibles
pour
jour
:
create
tabler
bornesreservations
(
refcategories
varchar(1)
not
null,
joursemaine
varchar(15),
heuredebut
integer,
heurefin
integer,
primary
key
(refcategories,joursemaine),
foreign
key
(refcategories)
references
categories(codecategories)
);
table
parametres
contenir
renseignement
sur
paramètre
de
l’application
:
create
table
parametres
(
nomparametre
varchar(40)
primary
key,
valeur
varchar(50)
);
chapitre
30.
projet
teniraq
chapitrer
projet
camping
licence
miashs
3ème
année,
2006-2007.
pouvoir
consulter
page
originales1
sur
web.
31.1.
présentation
aller
devoir
gérer
camping-gîte...
s’agit
d’un
établissement
offrir
à
client
service
suivants
:
•
emplacement
tente
de
tailles,
•
emplacement
caravane
camping-car
(différents
précédent
par
présence
de
branchement
électriques),
•
mobilhomes,
•
chambre
à
deux
lit
(où
être
possible
d’ajouter
un
deux
lit
pliants
pour
enfants),
•
lit
en
dortoirs.
tarif
dépendre
de
durée
de
location
:
à
nuit,
à
semaine,
mois
à
l’année,
nombre
de
personnes.
redevance
être
percevoir
sur
véhicules.
31.2.
information
à
conserver
information
sur
client
location
être
conserver
d’une
année
sur
l’autre,
de
pouvoir
procéder
à
envoi
de
courrier
publicitaires.
devoir
dans
cas
garder
information
sur
personnes,
sur
avoir
régler
facture.
avoir
information
suivantes
sur
emplacement
:
est-ce
pour
tente
et/ou
caravane
et/ou
camping-
car
?
est-ce
ombrager
?
est-ce
herbeux
?
avoir
information
suivantes
sur
mobilhomes
:
équiper
d’un
réfrigérateur
?
équiper
d’un
four
?
etc.
avoir
information
suivantes
sur
chambre
dortoir
:
nombre
de
lits,
présence
de
toilettes,
lavabo,
douche.
pour
prestation
(chambres,
dortoir,
emplacement
pour
tente
caravane,
etc.)
avoir
information
suivantes
:
prix
à
nuit,
à
semaine,
mois
à
l’année,
localisation
géographique
(une
référence
sur
plan
camping).
devoir
conserver
information
suivantes
sur
client
:
•
état
civil
complet
possible
(mais
en
restant
raisonnable
même
dans
respect
de
vie
privée...)
:
nom,
prénom,
adresse,
téléphone,
adresser
électronique
•
l’historique
de
présence
camping
:
date,
avec
personnes,
sur
typer
d’emplacement
(tente,
caravane,
etc.).
31.3.
traitement
c’est
beau
d’avoir
informations,
falloir
pouvoir
utiliser...
devoir
pouvoir
:
•
entendre
établir
facture
pour
séjour,
•
faire
réservations,
•
ajouter
client
potentiels
dans
base
(c’est-à-dire
personne
être
clientes,
qu’on
espérer
pouvoir
démarcher),
•
faire
statistique
nécessaires
à
gestion
camping
:
recette
par
année,
recette
par
mois,
fréquentation
par
année,
fréquentation
par
mois,
par
type
d’hébergement,
etc.
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2006-2007/technoweb/projetcamping/
chapitre
31.
projet
camping
•
etc.
31.4.
base
de
donnée
l’analyse
être
présenter
ici.
contenter
de
donner
structure
de
base.
31.4.1.
mld
chapitrer
projet
camping
31.4.2.
table
table
ville
contenir
renseignement
sur
ville
:
create
tabler
ville
(
codepostal
varchar
primary
key,
ville
varchar
)
;
table
rue
contenir
information
sur
rues,
référer
à
table
ville
:
create
tabler
rue
(
coderue
int
primary
key,
nomrue
varchar,
codepostal
varchar,
constraint
rue_codepostal_fk
foreign
key
(codepostal)
references
ville(codepostal)
);
table
rassembler
information
sur
personnes,
client
:
create
tabler
(
codepersonne
int
primary
key,
nom
varchar
not
null,
prenom
varchar,
numerodanslarue
varchar,
refrue
int,
varchar,
fax
varchar,
email
varchar,
constraint
personne_refrue_fk
foreign
key
(refrue)
references
rue(coderue)
);
table
confort
lister
élément
de
confort
(douche,
four,
etc.)
pouvoir
être
disponibles
dans
différents
hébergement
;
c’est
table
lien_hebergement_confort
permettre
de
faire
lien
entre
hébergement
élément
de
confort
:
create
tabler
confort
(
codeconfort
int
primary
key,
typeconfort
varchar
not
null
);
table
typehebergement
rassembler
différents
type
d’hébergement
(camping,
dortoir,
etc.)
:
create
tabler
typehebergement
(
codetypehebergement
int
primary
key,
typehebergement
varchar
not
null
);
table
typelocation
rassembler
différents
type
de
location
(à
journée,
à
semaine,
etc.)
:
create
tabler
typelocation
(
codetypelocation
int
primary
key,
typelocation
varchar
not
null
);
table
tariflocation
rassembler
différents
tarif
de
location
en
fonction
de
durée,
type
d’hébergement,
etc.)
:
create
tabler
tariflocation
(
reftypelocation
int,
reftypehebergement
int,
journee
numeric(5,2),
personne
numeric(5,2),
primary
key
(reftypelocation,reftypehebergement),
constraint
tariflocation_reftypehebergement_fk
foreign
key
(reftypehebergement)
chapitre
31.
projet
camping
references
typehebergement(codetypehebergement),
constraint
tariflocation_reftypelocation_fk
foreign
key
(reftypelocation)
references
typelocation(codetypelocation)
);
table
tarifvehicule
définir
montant
redevance
en
fonction
véhicule
:
create
tabler
tarifvehicule
(
codevehicule
int
primary
key,
vehicule
varchar,
tarif
numeric(5,2)
not
null
);
table
hebergement
contenir
liste
de
hébergement
disponibles
:
create
tabler
hebergement
(
codehebergement
int
primary
key,
positionsurleplan
varchar
not
null,
reftypehebergement
int
not
null,
nbreplaces
int
not
null,
constraint
hebergement_reftypehebergement_fk
foreign
key
(reftypehebergement)
references
typehebergement(codetypehebergement)
);
table
lien_hebergement_confort
faire
lien
entre
hébergement
élément
de
confort
disponibles
:
create
tabler
lien_hebergement_confort
(
refhebergement
int,
refconfort
int,
primary
key
(refhebergement,refconfort),
constraint
lienhebconfort_refhebergement_fk
foreign
key
(refhebergement)
references
hebergement(codehebergement),
constraint
lienhebconfort_confort_fk
foreign
key
(refconfort)
references
confort(codeconfort)
);
table
sejour
rassembler
renseignement
sur
séjour
effectuer
réserver
par
client
:
create
tabler
sejour
(
codesejour
int
primary
key,
debut
date,
fin
date,
refhebergement
int,
refvehicule
int,
constraint
sejour_refvehicule_fk
foreign
key
(refvehicule)
references
tarifvehicule(codevehicule),
constraint
sejour_refhebergement_fk
foreign
key
(refhebergement)
references
hebergement(codehebergement)
);
table
lien_sejour_personne
faire
lien
entre
séjour
(effectués
réservés)
personne
(clients)
:
create
tabler
lien_sejour_personne
(
refsejour
int,
refpersonne
int,
primary
key
(refsejour,refpersonne),
constraint
liensejourpersonne_refsejour_fk
foreign
key
(refsejour)
references
sejour(codesejour),
constraint
liensejourpersonne_refpersonne_fk
foreign
key
(refpersonne)
references
personne(codepersonne)
);
chapitre
32.
projet
association
licence
miashs
3ème
année,
2004-2005.
pouvoir
consulter
page
originales1
sur
web.
aller
devoir
construire
site
web
permettre
membre
d’une
association
de
gérer
consulter
diiférents
renseignement
sur
adhésions.
32.1.
contenu
site
web
site
devoir
permettre
d’effectuer
opération
nécessaires
bon
fonctionnement
de
base,
c’est-à-
dire
:
•
devoir
avoir
(au
moins)
trois
niveau
d’utilisateurs
(identifiés
par
login
mot
de
passe)
:
niveau
simple
utilisateur
seule
consultation
être
autoriser
(cette
consultation
pouvoir
être
restreindre
à
données)
;
c’est
niveau
par
exemple
accessible
simples
adhérent
de
l’association
;
niveau
administrateur
avoir
accès
à
fonction
importantes
(par
exemple
de
modification
donnée
d’ajout
dans
base),
fonction
vitales
;
être
par
exemple
niveau
réserver
trésorier
président
de
l’association
;
niveau
gourou
avoir
accès
à
tout
;
c’est
niveau
réserver
responsable
de
base
de
donnée
;
c’est
par
exemple
à
niveau
de
sécurité
qu’on
pouvoir
supprimer
enregistrement
dans
base.
•
site
web
permettre
action
dans
base
:
•
consultation,
•
modification,
•
ajout,
•
suppression.
32.2.
condition
de
travail
pouvoir
travailler
par
groupe
de
deux
(c’est
conseillé),
plus.
c’est
travail
libre,
dans
condition
réel
(ou
presque).
juger
pendant
semestre,
suis
pour
répondre
questions.
32.3.
base
de
donnée
base
de
donner
contenir
renseignement
être
vue
premier
semestre
:
base
association2.
rappel
sur
but
contenu
:
rappel
:
association
vouloir
gérer
adhérent
par
l’intermédiaire
d’une
base
de
données.
principales
information
sur
sujet
:
devoir
garder
information
sur
adhérents,
même
sur
anciens.
devoir
connaître,
pour
personne
de
base
:
a.
nom
;
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/technoweb/projet.php
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/bd/association
chapitre
32.
projet
association
b.
prénom
;
c.
adresse
;
d.
s’il
être
membre
c.a.
;
e.
s’il
être
jeune
(pour
tarif
réduit)
;
f.
s’il
être
adhérent
à
titre
gratuit
;
g.
s’il
être
adhérent,
être
montant
de
cotisation,
nombre
de
personne
concerner
par
adhésion,
pour
année.
devoir
connaître
référent
de
personne.
s’agit
de
l’adhérent
être
charger
de
faire
par-venir
différents
courrier
envoyer
par
l’association
(comptes-rendus,
relance,
convocations,
etc.).
être
possible
courrier
être
transmettre
par
poste.
32.4.
mld
projet
association
figurer
32-1.
mcd
projet
association
32.5.
création
table
de
base
association
32.5.1.
création
table
fichier
être
téléchargeable
sur
web3.
create
tabler
(
clef
int
primary
key
,
nom
varchar,
prenom
varchar,
numero
varchar,
refrue
integer,
ca
boolean,
jeune
boolean,
gratuit
boolean,
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/bd/association/creation/create.sql
chapitre
32.
projet
association
invite
boolean,
referent
int
);
create
tabler
rue
(
clef
int
primary
key,
nomrue
varchar,
codepostal
varchar
);
create
table
ville
(
codepostal
varchar
primary
key,
ville
varchar
);
create
table
referent
(
clef
int
primary
key,
nom
varchar,
personne
int
);
create
table
adhesion
(
annee
varchar,
int,
nbmembre
int,
monter
numeric(8,2),
euro
boolean
default
’t’,
primary
key
(annee,personne)
);
32.5.2.
contrainte
fichier
être
téléchargeable
sur
web4.
alter
tabler
add
constraint
persons_referent_fk
foreign
key
(referent)
references
referent(clef);
alter
tabler
add
constraint
persons_rue_fk
foreign
key
(refrue)
references
rue(clef);
alter
tabler
rue
add
constraint
rue_ville_fk
foreign
key
(codepostal)
references
ville(codepostal);
alter
table
referent
add
constraint
referent_personne_fk
foreign
key
(personne)
references
personne(clef);
alter
tabler
adhesion
add
constraint
adhesions_person_fk
foreign
key
(personne)
references
personne(clef);
32.6.
évaluation
critère
sur
être
noter
:
•
falloir
marche,
c’est
moindre
choses...
•
facilité
d’utilisattion
site
:
falloir
navigation
simple,
intuitive
efficace
;
falloir
formulaire
être
clairs.
•
confirmité
avec
norme
w3c.
(l’utilisation
de
feuille
de
style
n’est
obligatoire,
croire
faciliter
travail.)
restriction
avoir
n’est
faire
sur
html
:
suffire
passer
contrôle
w3c.
être
fanatique
de
javascript,
pas,
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/bd/association/creation/contraintes.sql
chapitre
32.
projet
association
rien
de
vital
devoir
être
confier
à
javascript,
devoir
pouvoir
fonctionner
sur
navigateur
sans
javascript.
•
lisibilité
de
code
source.
code
illisible,
présenté,
commenter
être
préjudicia-ble.
par
contre
découpage
en
petites
fonctions,
faciles
à
comprendre,
découpage
code
en
bibliothèque
thématiques,
avantageront.
32.7.
dernier
conseil
aphorisme
:
premier
95%
d’un
projet
prendre
95%
temps.
5%
restant
prendre
95%
temps.
conclusion
:
travailler
possible,
pendant
n’avez
de
partiels
à
réviser.
chapitre
33.
projet
généalogie
iup
iies
2ème
année
maîtrise
aes-teg,
2003-2004.
pouvoir
consulter
page
originales1
sur
web.
33.1.
généralité
aller
devoir
réaliser
site
de
généalogie.
réalisation
devoir
être
fonctionnelle
:
devra,
entre
autres,
être
capable
d’échanger
donnée
avec
d’autres
logiciel
de
génalogie
exister
(logiciels
commercial
logiciel
libres).
33.2.
donnée
à
conserver
trouver
dans
partie
description
information
manipuler
généalogistes.
33.2.1.
donnée
de
base
s’occupe
personnes,
de
naissance
de
décès,
de
ascendance
de
descendance.
devoir
pouvoir
en
partir
de
n’importe
produire
liste
ascendants,
de
descendants.
devoir
pouvoir
connaître
conjoint
de
personne
;
dans
cas
personne
avoir
avoir
conjoints,
devoir
pouvoir
connaître
l’ordre
dans
couple
avoir
existé.
devoir
pouvoir
possible
avoir
date
de
début
de
fin
éventuelles
unions.
falloir
noter
modèle
européen
n’est
seul
exister
monde
:
être
possible
personne
avoir
conjoint
en
temps.
de
enfant
pouvoir
provenir
de
liaison
officialiser
qu’il
falloir
pouvoir
représenter.
devoir
entendre
conserver
date
lieu
de
naissance
décès
individus.
entendu,
partie
de
information
être
fois
difficile
à
obtenir,
site
devoir
pouvoir
fonctionner
en
l’absence
de
certaines.
33.2.2.
donnée
supplémentaires
avec
l’introduction
de
l’outil
informatique
pouvoir
ajouter
d’autres
type
d’information,
par
exemple
:
•
multimédia
:
photo,
vidéo,
enregistrement
audio,
etc.
;
•
copie
de
document
officiel
:
acte
de
naissance,
de
mariage,
de
décès,
etc.
information
pouvoir
être
associer
à
personne
(ou
à
événements,
à
familles).
être
bon
document
être
dater
qu’on
conserver
nom
de
propriétaires.
33.3.
traitement
donnée
donnée
rassembler
n’ont
de
sens
pouvoir
utiliser...
fonctionnalité
minimales
devoir
avoir
site
web
:
•
ajouter,
supprimer,
modifier
individu
;
•
ajouter,
supprimer,
modifier
union
(mariage
autre)
;
•
lier
individu
à
parents
(ou
couple
à
enfants)
;
•
associer
fichier
multimédia
à
individu,
famille,
événement
;
•
connaître
individu,
devoir
pouvoir
obtenir
ascendance
descendance
proche
;
être
parfait
d’avoir
ascendance
descendance
;
http://grappa.univ-lille3.fr/~gonzalez/enseignement/commun/genealogie/
chapitre
33.
projet
généalogie
•
pour
individu
devoir
pouvoir
avoir
album
de
photo
être
associéees
(ce
être
parfaire
d’avoir
même
chose
pour
type
de
documents).
33.4.
optimisation
éviter
de
dupliquer
information
multimédia,
même
être
lier
à
personnes.
pouvoir
avoir
choix
d’effacer
information
multimédia
être
associer
à
rien.
façon
être
représenter
relation
de
descendance
d’ascendance
à
l’écran
être
laisser
à
libre
choix,
falloir
noter
classique
être
arborescente.
c’est
coller
de
structure
réelle.
33.5.
import-export
site
devoir
être
capable
d’exporter
donnée
format
gedcom.
qu’est-ce
qu’un
fichier
gedcom
?
en
taper
mot
dans
n’importe
moteur
de
recherche
obtien-
drez
dizaine
(voire
centaines)
de
page
expliquer
c’est.
en
résumé
:
définir
par
mormons
(ou
sous
nom
complet
:
église
de
jésus-christ
saint
derniers
jours),
standard
gedcom
avoir
être
créer
pour
permettre
l’échange
de
donnée
entre
différents
logiciel
de
généalogie
existants.
plupart
logiciel
de
généalogie
permettre
d’exporter
fruit
de
travail
dans
format.
page
sur
internet
:
•
version
originale
(en
anglais)2
•
explication
en
français3
•
autre
explication
en
français4
pouvoir
en
trouver
d’autres.
attention
comprendre
norme
par
vous-même
faire
partir
travail
être
demandé.
partie
de
note
porter
sur
capacité
de
site
à
exporter
donnée
vers
fichier
gedcom.
correction
être
facile
:
faire
lire
fichier
produire
par
logiciel
de
généalogie,
regarder
avoir
être
exporté.
l’importation
de
donnée
depuis
fichier
gedcom
être
demander
(en
principe
c’est
facile),
vouloir
faire,
être
entendre
tenir
compte.
http://www.gendex.com/gedcom55/55gctoc.htm
http://www.amicale-genealogie.org/informatique/infoged.htm
http://www.weinland.nom.fr/gedc.php
chapitre
33.
projet
généalogie
33.6.
mcd
projet
généalogie
figurer
33-1.
mcd
projet
généalogie
33.7.
différentes
table
33.7.1.
table
entité
33.7.1.1.
table
individu
create
tabler
individu
(
numindividu
integer
not
null
primary
key,
nom
varchar,
prenom
varchar,
sexe
char(1),
parents
integer,
jour_nais
integer,
mois_nais
integer,
annee_nais
integer,
chapitrer
projet
généalogie
lieu_nais
integer,
jour_deces
integer,
mois_deces
integer,
annee_deces
integer,
lieu_deces
integer,
constraint
individu_sexe_ck
check
(sexe
in
(’f’,’m’,’f’,’m’))
)
;
33.7.1.2.
table
ville
create
tabler
ville
(
codepostal
varchar
not
null
primary
key,
ville
varchar
not
null
)
;
33.7.1.3.
table
lieu
create
tabler
lieu
(
numlieu
integer
not
null
primary
key,
nom
varchar,
numero
varchar,
rue
varchar,
codepostal
varchar
)
;
33.7.1.4.
table
couple
create
tabler
couple
(
numcouple
integer
not
null
primary
key,
integer
not
null,
integer
not
null,
jour_debut
integer,
mois_debut
integer,
annee_debut
integer,
lieu_debut
integer,
jour_fin
integer,
mois_fin
integer,
annee_fin
integer,
lieu_fin
integer,
type_couple
integer
)
;
33.7.1.5.
table
type
de
couple
create
tabler
type_couple
(
numtypecouple
integer
not
null
primary
key,
description
varchar
)
;
33.7.1.6.
table
type
de
document
create
tabler
type_document
(
numtype
integer
not
null
primary
key,
descr_courte
varchar
not
null,
descr_longue
varchar
)
;
chapitre
projet
généalogie
33.7.1.7.
table
document
create
tabler
document
(
numdocument
integer
not
null
primary
key,
titre
varchar,
fichier
varchar
not
null,
type
integer
not
null,
tailler
integer,
date_creation
date,
date_inclusion
date
)
;
33.7.2.
table
relation
33.7.2.1.
table
lier
document
couple
create
tabler
doc_couple
(
couple
integer
not
null,
document
integer
not
null,
descr_courte
varchar,
descr_longue
varchar,
constraint
doccouple_pk
primary
key
(couple,document)
)
;
33.7.2.2.
table
lier
document
lieu
create
tabler
doc_lieu
(
lieu
integer
not
null,
document
integer
not
null,
descr_courte
varchar,
descr_longue
varchar,
constraint
doclieu_pk
primary
key
(lieu,document)
)
;
33.7.2.3.
table
lier
document
individu
create
tabler
doc_individu
(
individu
integer
not
null,
document
integer
not
null,
descr_courte
varchar,
descr_longue
varchar,
constraint
docindividu_pk
primary
key
(individu,document)
)
;
33.8.
différentes
contrainte
33.8.1.
sur
table
individu
alter
tabler
individu
add
constraint
individu_lieunais_fk
foreign
key
(lieu_nais)
references
lieu(numlieu)
;
alter
tabler
individu
add
constraint
individu_lieudeces_fk
chapitre
33.
projet
généalogie
foreign
key
(lieu_deces)
references
lieu(numlieu)
;
alter
tabler
individu
add
constraint
individu_parents_fk
foreign
key
(parents)
references
couple(numcouple)
;
33.8.2.
sur
table
ville
de
contraintes...
33.8.3.
sur
table
lieu
alter
tabler
lieu
add
constraint
lieu_codepostal_fk
foreign
key
(codepostal)
references
ville(codepostal);
33.8.4.
sur
table
coupler
alter
tabler
couple
add
constraint
couple_lui_fk
foreign
key
(lui)
references
individu(numindividu)
;
alter
tabler
couple
add
constraint
couple_elle_fk
foreign
key
(elle)
references
individu(numindividu)
;
alter
tabler
couple
add
constraint
individu_lieudebut_fk
foreign
key
(lieu_debut)
references
lieu(numlieu)
;
alter
tabler
couple
add
constraint
individu_lieufin_fk
foreign
key
(lieu_fin)
references
lieu(numlieu)
;
33.8.5.
sur
table
type_couple
de
contraintes...
33.8.6.
sur
table
type_document
de
contraintes...
33.8.7.
sur
table
document
alter
tabler
document
add
constraint
document_type_fk
foreign
key
(type)
references
type_document(numtype)
;
33.8.8.
sur
table
doc_couple
alter
tabler
doc_couple
add
constraint
doccouple_couple_fk
foreign
key
(couple)
references
couple(numcouple);
alter
tabler
doc_couple
add
constraint
doccouple_document_fk
foreign
key
(document)
references
document(numdocument)
;
chapitre
projet
généalogie
33.8.9.
sur
table
doc_lieu
alter
tabler
doc_lieu
add
constraint
doclieu_lieu_fk
foreign
key
(lieu)
references
lieu(numlieu)
;
alter
tabler
doc_lieu
add
constraint
doclieu_document_fk
foreign
key
(document)
references
document(numdocument)
;
chapitre
projet
généalogie
chapitrer
projet
brazil
iup
iies
2ème
année
maîtrise
aes-teg,
2002-2003.
pouvoir
consulter
page
originales1
sur
web.
34.1.
description
monde
de
brazil
être
organiser
de
façon
à
rendre
citoyen
heureux
possible.
pour
veiller
à
cela,
renseignement
utiles
être
stocker
dans
base
de
donnée
centrale
centre
de
régulation
bonheur.
être
charger
de
gestion
de
base
de
données.
citoyen
être
représenter
par
numéro
d’enregistrement
universel,
nom,
prénom,
sexe,
date
de
naissance,
taille,
l’historique
de
maladies.
mémoriser
différentes
adresse
date
d’emménagement
correspondantes.
citoyen
travailler
dans
service,
contribuer
bonheur
de
tous.
service
être
re-
groupés,
pour
grande
efficacité,
en
différents
ministère
bonheur.
groupe
de
service
former
ministère,
l’on
travailler
grâce
échantillon
de
bonheur
produire
par
d’autres
ser-
vice
de
divers
ministères,
sous
contrôle
administratif
d’un
troisième
ensemble
de
service
de
divers
ministère
aussi.
rôle
être
modifier
par
centre
de
régulation
bonheur,
selon
savant
parfait
calcul
de
maîtrise
de
l’aléatoire.
malheureusement,
dans
organisation
parfaite,
défaut
être
dûs
composants,
i.e.
citoyens.
ainsi,
distinguer
trois
type
de
citoyen
:
d’une
part,
avoir
contribuer
à
survie
système,
par
production
de
futurs
citoyens,
mérite
être
proportionnels
nombre
de
enfants.
bonheur
produire
être
dis-
tiller
enfant
citoyens.
tenir
à
conserver
l’historique
ancêtre
de
chacun.
2.
citoyen
(donc
adulte)
n’ayant
d’enfant,
faire
partir
de
second
catégorie
:
suspects.
confirmer
par
fait
qu’un
citoyen
n’ayant
d’enfant
n’est
en
mesure
de
répondre
formulaire
e707.
suspicion
peser
sur
citoyen
être
proportionnelle
nombre
de
formulaire
e707
qu’il
n’a
pouvoir
remplir.
3.
citoyen
parents
être
inconnus
être
suspect.
seule
exception,
confirmer
règle
de
perfection
système
de
brazil,
être
fait
seul
citoyen
n’ayant
d’enfants
dispose
d’assez
de
temps
pour
être
dirigeant
d’un
ministère.
citoyen
décédé,
pouvoir
contribuer
bonheur
de
société,
voir
supprimer
de
base
de
données,
référence
à
existence
(pour
fonction
descendance,
rendre
entendre
suspect
éventuels
enfants).
34.2.
table
entité
34.2.1.
table
citoyen
create
tabler
citoyen
(
numuniv
numeric
(6)
not
null,
nom
varchar(50),
prenom
varchar(50),
sexe
char,
naissance
date,
taille
numeric
(3),
pere
numeric
(6),
mere
numeric
(6))
;
http://grappa.univ-lille3.fr/~gonzalez/enseignement/commun/brazil/
chapitrer
projet
brazil
34.2.2.
table
ville
create
tabler
ville
(
codepostal
varchar
(5)
not
null,
ville
varchar
(25))
;
34.2.3.
table
rue
create
tabler
rue
(
numrue
numeric
(6)
not
null,
rue
varchar(50),
codepostal
varchar
(5))
;
34.2.4.
table
maladie
create
tabler
maladie
(
nummaladie
numeric
(6)
not
null,
nommaladie
varchar
(25),
graviter
numeric
(2)
not
null)
;
34.2.5.
table
service
create
tabler
service
(
numservice
numeric
(6)
not
null,
nomservice
varchar
(50))
;
34.2.6.
table
ministere
create
tabler
ministere
(
numministere
numeric
(6)
not
null,
nomministere
varchar
(25))
;
34.3.
table
relation
34.3.1.
associer
maladie
à
citoyen
:
listemaladie
create
tabler
listemaladie
(
citoyen
numeric
(6)
not
null,
maladie
numeric
(6)
not
null,
debut
date
not
null,
fin
date)
;
34.3.2.
associer
adresse
à
citoyen
:
habiter
create
table
habiter
(
citoyen
numeric
(6)
not
null,
numero
numeric
(4)
not
null,
rue
numeric
(6)
not
null,
debut
date
not
null)
;
chapitre
projet
brazil
34.3.3.
associer
citoyen
service
pour
travailler
:
travaillepour
create
tabler
travaillepour
(
citoyen
numeric
(6)
not
null,
service
numeric
(6)
not
null,
debut
date
not
null,
fin
date)
;
34.3.4.
associer
service
ministère
pour
produire
:
serviceproduit
create
tabler
serviceproduit
(
service
numeric
(6)
not
null,
ministere
numeric
(6)
not
null,
debut
date
not
null,
fin
date)
;
34.3.5.
associer
service
ministère
appartient;:
serviceappartient
create
tabler
serviceappartient
(
service
numeric
(6)
not
null,
ministere
numeric
(6)
not
null,
debut
date
not
null,
fin
date)
;
34.3.6.
associer
service
ministère
qu’il
contrôle
:
servicecontrole
create
tabler
servicecontrole
(
service
numeric
(6)
not
null,
ministere
numeric
(6)
not
null,
debut
date
not
null,
fin
date)
;
34.3.7.
associer
citoyen
ministère
qu’il
diriger
:
tabledirige
create
table
diriger
(
citoyen
numeric
(6)
not
null,
ministere
numeric
(6)
not
null,
debut
date
not
null,
fin
date)
;
34.4.
contrainte
34.4.1.
sur
table
ville
alter
tabler
ville
add
constraint
ville_codepostal_pk
primary
key
(codepostal)
;
34.4.2.
sur
table
rue
alter
tabler
rue
add
constraint
adresse_numrue_pk
primary
key
(numrue)
;
alter
tabler
rue
add
constraint
adresse_codepostal_fk
foreign
key
(codepostal)
references
ville
(codepostal)
;
chapitre
projet
brazil
34.4.3.
sur
table
citoyen
alter
tabler
citoyen
add
constraint
citoyen_numuniv_pk
primary
key
(numuniv)
;
alter
tabler
citoyen
add
constraint
citoyen_sexe_ck
check
(sexe
in
(’m’,’f’))
;
alter
tabler
citoyen
add
constraint
citoyen_pere_fk
foreign
key
(pere)
references
citoyen
(numuniv)
;
alter
tabler
citoyen
add
constraint
citoyen_mere_fk
foreign
key
(mere)
references
citoyen
(numuniv)
;
34.4.4.
sur
table
habiter
alter
table
habiter
add
constraint
habite_citoyen_fk
foreign
key
(citoyen)
references
citoyen(numuniv)
;
alter
table
habiter
add
constraint
habite_rue_fk
foreign
key
(rue)
references
rue
(numrue)
;
alter
table
habiter
add
constraint
habite_serv_pk
primary
key
(citoyen,numero,rue)
;
34.4.5.
sur
table
maladie
alter
tabler
maladie
add
constraint
maladie_nummaladie_pk
primary
key
(nummaladie)
;
alter
tabler
maladie
add
constraint
maladie_gravite_ck
check
(gravite
in
(0,1,2,3,4,5,6,7,8,9,10))
;
34.4.6.
sur
table
listemaladie
alter
tabler
listemaladie
add
constraint
listemaladie_cit_moy_deb_pk
primary
key
(citoyen,maladie,debut)
;
alter
tabler
listemaladie
add
constraint
listemaladie_citoyen_fk
foreign
key
(citoyen)
references
citoyen
(numuniv)
;
alter
tabler
listemaladie
add
constraint
listemaladie_maladie_fk
foreign
key
(maladie)
references
maladie(nummaladie)
;
34.4.7.
sur
table
service
alter
tabler
service
add
constraint
service_numservice_pk
primary
key
(numservice)
;
34.4.8.
sur
table
ministere
alter
tabler
ministere
add
constraint
ministere_numministere_pk
primary
key
(numministere)
;
chapitre
projet
brazil
34.4.9.
sur
table
travaillepour
alter
tabler
travaillepour
add
constraint
travaillepour_cit_serv_pk
primary
key
(citoyen,service,debut)
;
alter
tabler
travaillepour
add
constraint
travaillepour_citoyen_fk
foreign
key
(citoyen)
references
citoyen(numuniv)
;
alter
tabler
travaillepour
add
constraint
travaillepour_service_fk
foreign
key
(service)
references
service
(numservice)
;
34.4.10.
sur
table
serviceproduit
alter
tabler
serviceproduit
add
constraint
serviceproduit_serv_mini_pk
primary
key
(service,ministere,debut)
;
alter
tabler
serviceproduit
add
constraint
serviceproduit_service_fk
foreign
key
(service)
references
service
(numservice)
;
alter
tabler
serviceproduit
add
constraint
serviceproduit_ministere_fk
foreign
key
(ministere)
references
ministere
(numministere)
;
34.4.11.
sur
table
serviceappartient
alter
tabler
serviceappartient
add
constraint
serviceappartient_serv_mini_pk
primary
key
(service,ministere,debut)
;
alter
tabler
serviceappartient
add
constraint
serviceappartient_service_fk
foreign
key
(service)
references
service
(numservice)
;
alter
tabler
serviceappartient
add
constraint
serviceappartient_ministere_fk
foreign
key
(ministere)
references
ministere
(numministere)
;
34.4.12.
sur
table
servicecontrole
alter
tabler
servicecontrole
add
constraint
servicecontrole_serv_mini_pk
primary
key
(service,ministere,debut)
;
alter
tabler
servicecontrole
add
constraint
servicecontrole_service_fk
foreign
key
(service)
references
service(numservice)
;
alter
tabler
servicecontrole
add
constraint
servicecontrole_ministere_fk
foreign
key
(ministere)
references
ministere(numministere)
;
34.4.13.
sur
table
diriger
alter
table
diriger
add
constraint
dirige_cit_serv_pk
primary
key
(citoyen,ministere,debut);
alter
table
diriger
add
constraint
dirige_citoyen_fk
foreign
key
(citoyen)
references
citoyen(numuniv);
alter
table
diriger
add
constraint
dirige_ministere_fk
foreign
key
(ministere)
references
ministere(numministere)
;
chapitre
projet
brazil
chapitrer
projet
service
iup
iies
2ème
année
maîtrise
aes-teg,
2001-2002.
pouvoir
consulter
page
originales1
sur
web.
aller
devoir
réaliser
site
web
dynamique
permettre
de
gérer
service
enseignant
de
l’ufr.
document
aller
permettre
de
définir
caractéristique
de
site.
35.1.
but
de
projet
but
site
aller
réaliser
être
de
permettre
(à
la)
responsable
administratif(ve)
d’une
ufr
de
gérer
service
enseignants.
devoir
être
possible
de
enregistrer,
modifier,
d’en
tirer
récapitulatifs,
synthèses,
etc.
projet
devoir
tenter
de
gérer
emploi
temps,
répartition
cours
par
semaine.
heure
d’enseignements
être
compter
de
même
manière
(elles
être
payer
même
prix,
suivre
être
td,
cmtd
cm).
affectation
enseignant
à
cours
être
définir
niveau
groupe
(s’il
avoir
5
groupe
dans
formation,
devoir
pouvoir
affecter
à
5
enseignants).
n’est
nécessaire
de
gérer
l’affectation
individuelle
groupe
(pas
besoin
de
savoir
enseignant
être
en
charge
groupe
n◦1,
autre
groupe
n◦2,
etc.
suffire
de
savoir
enseignant
avoir
2
groupes,
autre
avoir
1,
etc.).
enseignant
devoir
même
service
:
statut
donner
base,
pouvoir
être
modi-
fier
:
temps
partiel,
décharges,
contrat
particuliers,
etc.
35.2.
fonctionnement
35.2.1.
utilisateur
n’ont
mêmes
droit
suivre
identité
page
aller
construire
être
en
libre
accès
:
suivre
droit
avoir
être
conférés,
utilisateur
pouvoir
avoir
accès
qu’à
information
traitements.
falloir
gérer
système
de
mot
de
passe
pour
contrôler
l’accès
site.
l’utilisateur
de
base
n’a
droit
de
consulter
contenu
de
base
(et
par
requête
prédéfinies).
2.
(la)
responsable
administratif(ve)
avoir
droit
de
modifier
contenu
table
(mais
donnée
sensibles
pouvoir
être
interdire
:
il(elle)
n’est
qu’un
utilisateur
privilégié,
avec
droit
importants
l’utilisateur
de
base,
limiter
même).
modification
être
autoriser
devoir
passer,
pour
l’utilisateur
de
base,
par
requête
prédéfinies.
l’administrateur
de
base
avoir
droit
de
définir
niveau
de
droit
utilisateurs,
modifier
structure
de
base
(il
avoir
droits).
35.2.2.
fonctionnalité
requérir
pour
consultation
consultation
accessibles
à
utilisateurs
identifiés.
liste
enseignement
(et
enseignants)
d’une
formation.
liste
enseignement
(et
enseignants)
d’une
année.
liste
enseignement
(et
enseignants)
d’une
ufr.
@ord@
liste
enseignement
(et
enseignants)
d’une
matière.
liste
enseignement
d’un
enseignant.
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2001-2002/iies2/projet/
chapitre
35.
projet
service
6.
pour
enseignant,
calculer
service,
afficher
(quand
en
a)
nombre
d’heures
supplé-
mentaires,
nombre
d’heures
en
sous-service.
pouvoir
avoir
récapitulatif
global
heure
d’enseignement,
regrouper
par
section
cnu
et/ou
par
formation
et/ou
par
statut.
8.
falloir
pouvoir
distinguer
entre
enseignant
permanents
autres
dans
différentes
statis-
tique
:
avoir
sens
falloir
avoir
trois
version
de
calcul
:
enseignants,
permanents,
vacataires.
35.2.3.
fonctionnalité
requérir
pour
mise
à
jour
pour
utilisateur
autoriser
:
responsable
administratif
administrateur
de
base.
@ord@
créer/modifier/supprimer
objet
intervenir
dans
gestion
affectation
(ufr,
formations,
filière,
cours,
enseignant,
etc.).
2.
affecter
enseignement
à
enseignant.
supprimer
affectation.
35.3.
information
techniques
1.
message
d’alerte
devoir
être
produire
avoir
distribuer
de
groupe
disponibles.
information
nécessaires
pour
enseignement
:
désignation
cours,
nombre
d’heures,
public
concerné,
typer
d’enseignement
(td,
cm,
etc.),
nombre
de
groupe
disponibles,
section
cnu
concerner
(bien
l’enseignant
être
charger
cours
être
rattacher
à
section).
information
nécessaires
pour
enseignant
:
nom,
prénom,
statut
administratif,
ufr
de
rat-
tachement,
service
devoir
(nombre
d’heures),
type
de
contrat
(permanent
vacataire),
section
cnu.
être
bon
qu’il
avoir
historique
commande
exécuter
:
•
de
réparer
erreur
grave,
•
pour
connaître
type
d’utilisation
de
base.
35.4.
question
subsidiaire
:
gérer
l’historique
de
base
?
problème
n’est
de
conserver
requête
(pour
celer
voir
section
35.3)
modifications.
question
être
:
«
garder
d’une
année
à
l’autre
renseignement
disponibles
exploitables
?
»
35.5.
vocabulaire
utiliser
année
par
exemple
2ème
année
de
deug
aes,
3ème
année
d’iup
iies,
...
cours
unité
d’enseignement.
correspondre
à
nombre
d’heures
de
présence
devant
étudiants,
sur
sujet,
donner
à
nombre
de
groupe
d’étudiants.
enseignant
pouvoir
être
concerner
par
même
cours,
dans
groupe
différents.
chapitre
35.
projet
service
enseignants
permanents
pour
ufr
avoir
deux
catégorie
d’enseignants
:
permanents
vacataires.
premier
dépen-
dent
de
l’ufr
(ils
être
nommer
à
titre
définitif
),
être
payer
par
l’université.
second
être
recruter
cas
par
cas,
pour
année
(ou
semestre)
être
payer
sur
ressource
propres
de
l’ufr
(ils
pouvoir
être
permanents
dans
d’autres
ufr,
être
extérieurs
à
l’université).
formation
par
exemple
aes,
iup
iies,
mass,
...
heure
supplémentaires
heure
d’enseignements
faire
en
service
dû.
section
cnu
cnu=conseil
national
universités.
c’est
l’organisme
charger
affectation
universitaires.
universitaire
être
qualifier
dans
section
cnu
(elle
dépendre
de
domaine
de
recherche
:
informatique,
économie,
histoire,
etc.),
pouvoir
être
recruter
sur
poste
de
section.
pouvoir
traduire
pour
projet
l’expression
«
section
cnu
»
par
«
matière
enseigner
»,
être
en
réalité
réducteur.
service
service
d’un
enseigner
être
nombre
d’heures
d’enseignements
qu’il
assure.
service
devoir
nombre
d’heures
d’enseignement
devoir
assurer
enseignant.
nombre
dépendre
de
statut,
pouvoir
subir
modification
(par
exemple
maître
de
conférence
devoir
en
principe
198
heure
eqtd,
décharge
pour
service
administratifs
pouvoir
permettre
d’en
faire
moins,
qu’un
contrat
pédagogique
pouvoir
demander
d’en
faire
plus).
sous-service
dire
enseignant
assurer
d’heures
service
dû.
statut
d’un
enseigner
principaux
statut
existants
(pour
enseignants
titulaires,
accompagner
de
services)
être
:
professeur
(192
heures),
maître
de
conférence
(192
heures),
assistant
(192
heures),
prce
(384
heures),
prag
(384
heures).
td,
cm,
ctd
dans
décompte
heure
d’enseignement
distinguer
td
(travaux
dirigés),
cm
(cours
magistraux),
cmtd,
intermédiaires
entre
deux
précédents.
l’unité
de
base
être
l’heure
équivalent
td
(ou
eqtd).
en
principe
avoir
correspondance
suivantes
:
•
1
td=1
eqtd
(heureusement!
!),
•
1
cm=1,5
eqtd,
•
1
cmtd=7/6
eqtd.
pouvoir
varier.
35.6.
premier
ébauche
de
structure
entité
être
:
cmtd
|
annees
---
courir
----
cnu
|
\
|
formation
--
ufr
-
enseignants
--
statut
chapitre
35.
projet
service
liaisons,
sauf
entre
cours
enseignants,
être
de
type
1-n
(par
exemple
année
faire
partie
d’une
seule
formation,
formation
pouvoir
correspondre
à
années)
:
liaison
pouvoir
être
réaliser
avec
référence
externe
(par
exemple
champ
dans
table
annee
contenir
code
de
formation
année
dépend,
parler
de
clef
étrangère).
dans
cas
de
liaison
entre
cours
enseignant
s’agit
d’une
relation
n-n
:
cours
pouvoir
être
associer
à
enseignants,
enseignant
pouvoir
avoir
à
assurer
cours.
pour
réaliser
type
de
liaison
être
obliger
de
faire
intervenir
table
supplémentaire
assurer
liaison
par
deux
liaison
1-n
(il
s’agit
de
table
affectation
dans
schéma
suivant)
:
cmtd
|
annees
-------
courir
--------
cnu
|
|
|
|
affectation
|
|
\
|
formater
------
ufr
-
enseignants
--
statut
35.7.
structure
table
trouver
pour
table
liste
champ
composent.
clef
primaires
être
suivre
d’une
étoiler
(«
*
»).
clef
étrangères
être
représenter
ainsi.
35.7.1.
cmtd
table
contenir
description
type
de
cours
(td,
cm,
cmtd).
•
numcmtd
(*)
:
identifier
•
intituler
:
intituler
en
lettre
d’un
type
de
cours
(td,
cm,
cmtd)
•
coefficient
:
valeur
en
eqtd
(équivalent
td)
d’une
heure
d’enseignement
35.7.2.
ufr
table
contenir
description
ufr.
•
numufr
(*)
:
identifier
•
intituler
:
intituler
en
lettre
de
l’ufr
(mses,
philosophie,
etc.)
35.7.3.
formation
table
contenir
description
formation
(aes,
iup
iies,
etc.).
•
numformation
(*)
:
identifier
•
intituler
:
intituler
en
lettre
de
formation
(aes,
iup
iies,
etc.)
•
ufr
:
code
de
l’ufr
dépendre
formation
chapitrer
projet
service
35.7.4.
annees
table
contenir
description
année
(iup
iies
2ème
année,
maîtrise
aes,
etc.).
•
numannee
(*)
:
identifier
•
intituler
:
intituler
en
lettre
d’une
année
(iup
iies
2ème
année,
maîtrise
aes,
etc.)
•
niveau
:
équivalence
en
nombre
d’années
après
bac
(3
pour
un
licence,
1
pour
premier
année
de
deug,
etc.)
•
formation
:
code
de
formation
dépendre
année
35.7.5.
cnu
table
contenir
description
différentes
section
cnu.
•
numcnu
(*)
:
identifier
•
intituler
:
intituler
en
lettre
de
section
cnu
correspondant
35.7.6.
cours
table
contenir
description
cours
(bases
de
donnée
partagées,
système
réseaux,
macro-
économie,
etc.).
•
numcours
(*)
:
identifier
•
intituler
:
intituler
en
lettre
cours
(bases
de
donnée
partagées,
système
réseaux,
macro-
économie,
etc.)
•
numannée
:
code
de
formation
dépendre
cours
•
numcmtd
:
code
type
de
cours
(cmtd,
td,
etc.)
•
numcnu
:
code
de
section
cnu
à
être
rattacher
cours
•
heure
:
nombre
d’heures
d’enseignement
par
groupe
pour
cours
•
groupe
:
nombre
de
groupe
être
concerner
par
cours
35.7.7.
statut
table
contenir
description
statut
(maître
de
conférences,
professeur,
etc.).
•
numstatut
(*)
:
identifier
•
intituler
:
intituler
en
lettre
statut
(maître
de
conférences,
professeur,
etc.)
•
service
:
service
devoir
(peut
être
modifier
pour
enseignant)
35.7.8.
enseignant
table
contenir
description
enseignants.
•
numenseignant
(*)
:
identifier
•
nom
:
nom
de
l’enseignant
chapitre
35.
projet
service
•
prenom
:
prénom
de
l’enseignant
•
service
:
service
devoir
(exprimé
en
heures)
•
numstatut
:
code
statut
de
l’enseignant
•
numufr
:
code
de
l’ufr
dépendre
l’enseignant
35.7.9.
affectation
table
servir
à
représenter
liaison
d’affectation
exister
entre
cours
enseignants.
•
numcours
(*)
:
code
cours
concerner
par
affectation
•
numenseignant
(*)
:
code
de
l’enseignant
concerner
par
affectation
•
nbgroupes
:
nombre
de
groupe
concerner
par
affectation
35.8.
création
table
35.8.1.
cmtd
create
tabler
cmtd
(
numcmtd
numeric(7)
not
null
primary
key,
intituler
text,
valeur
numeric(6,
4)
)
;
35.8.2.
ufr
create
tabler
ufr
(
numufr
numeric(7)
not
null
primary
key,
intituler
text)
;
35.8.3.
formation
create
tabler
formation
(
numformation
numeric(7)
not
null
primary
key,
intituler
text,
numufr
numeric(7)
not
null,
foreign
key
(numufr)
references
ufr
(numufr))
;
35.8.4.
annees
create
tabler
annees
(
numannee
numeric(7)
not
null
primary
key,
intituler
text,
niveau
int4,
numformation
numeric(7)
not
null,
foreign
key
(numformation)
references
formation
(numformation))
;
chapitre
projet
service
35.8.5.
cnu
create
tabler
cnu
(
numcnu
numeric(7)
not
null
primary
key,
intituler
text)
;
35.8.6.
cours
create
tabler
cours
(
numcours
numeric(7)
not
null
primary
key,
intituler
text,
numannee
numeric(7)
not
null,
numcmtd
numeric(7)
not
null,
numcnu
numeric(7)
not
null,
heure
numeric
(4,2),
groupe
numeric
(4,2),
foreign
key
(numcmtd)
references
cmtd
(cnumcmtd),
foreign
key
(numcnu)
references
cnu
(cnumcnu),
foreign
key
(numannee)
references
annees
(numannee))
;
35.8.7.
statut
create
tabler
statut
(
numstatut
numeric(7)
not
null
primary
key,
intitulé
text,
service
numeric
(6,2))
;
35.8.8.
enseignant
create
tabler
enseignants
(
numenseignant
numeric(7)
not
null
primary
key,
nom
text,
prenom
text,
service
numeric
(6,2),
numstatut
numeric(7)
not
null,
numufr
numeric(7)
not
null,
foreign
key
(numufr)
references
ufr
(cnumufr),
foreign
key
(numstatut)
references
statut
(numstatut))
;
35.8.9.
affectation
create
tabler
affectation
(
numcours
numeric(7)
not
null,
numenseignant
numeric(7)
not
null,
groupe
int4,
primary
key
(numcours,numenseignant),
foreign
key
(numcours)
references
cours
(cnumcours),
foreign
key
(numenseignant)
references
enseignants
(numenseignant))
;
35.9.
remplir
table
de
paramètre
35.9.1.
statut
insert
into
statut
valoir
(1,’mdc’,192.0);
insert
into
statut
valoir
(2,’professeur’,192);
insert
into
statut
valoir
(3,’prag’,384);
insert
into
statut
valoir
(4,’ater’,192);
chapitre
35.
projet
service
insert
into
statut
valoir
(5,’chargé
de
cours’,0);
insert
into
statut
valoir
(6,’past’,96);
35.9.2.
cnu
insert
into
cnu
valoir
(1,
’droit
privé
science
criminelles’);
insert
into
cnu
valoir
(2,
’droit
public’);
insert
into
cnu
valoir
(3,
’histoire
droit
institutions’);
insert
into
cnu
valoir
(4,
’science
politique’);
insert
into
cnu
valoir
(5,
’sciences
économiques’);
insert
into
cnu
valoir
(6,
’sciences
de
gestion’);
insert
into
cnu
valoir
(7,
’sciences
langage
:
linguistique
phonétique
’
||’générales’);
insert
into
cnu
valoir
(8,
’langues
littérature
anciennes’);
insert
into
cnu
valoir
(9,
’langue
littératurer
françaises’);
insert
into
cnu
valoir
(10,
’littératures
comparées’);
insert
into
cnu
valoir
(11,
’langues
littérature
anglaises
anglo-saxonnes’);
insert
into
cnu
valoir
(12,
’langues
littérature
germaniques
scandinaves’);
insert
into
cnu
valoir
(13,
’langues
littérature
slaves’);
insert
into
cnu
valoir
(14,
’langues
littérature
romanes
:
espagnol,
italien,
’
||’portugais,
autres
langue
romanes’);
insert
into
cnu
valoir
(15,
’langues
littérature
arabes,
chinoises,
japonaises,
’
||’hébraïques,
d\’autres
domaine
linguistiques’);
insert
into
cnu
valoir
(16,
’psychologie,
psychologie
clinique,
psychologie
sociale’);
insert
into
cnu
valoir
(17,
’philosophie’);
insert
into
cnu
valoir
(18,
’arts
:
plastiques,
spectacle,
musique,
musicologie,
’
||’esthétique,
science
de
l\’art’);
insert
into
cnu
valoir
(19,
’sociologie,
démographie’);
insert
into
cnu
valoir
(20,
’anthropologie,
éthnologie,
préhistoire’);
insert
into
cnu
valoir
(21,
’histoire
civilisation
:
histoire
archéologie
’
||’mondes
anciens
mondes
médiévaux;
de
l\’art’);
insert
into
cnu
valoir
(22,
’histoire
civilisation
:
histoire
mondes
modernes;
’
||’histoire
monde
contemporain;
de
l\’art;
de
musique’);
insert
into
cnu
valoir
(23,
’géographie
physique,
humaine,
économique
régionale’);
insert
into
cnu
valoir
(24,
’aménagement
de
l\’espace,
urbanisme’);
insert
into
cnu
valoir
(25,
’mathématiques’);
insert
into
cnu
valoir
(26,
’mathématiques
appliquées
application
mathématiques’);
insert
into
cnu
valoir
(27,
’informatique’);
insert
into
cnu
valoir
(28,
’milieux
denses
matériaux’);
insert
into
cnu
valoir
(29,
’constituants
élémentaires’);
chapitre
35.
projet
service
insert
into
cnu
valoir
(30,
’milieux
diluer
optique’);
insert
into
cnu
valoir
(31,
’chimie
théorique,
physique,
analytique’);
insert
into
cnu
valoir
(32,
’chimie
organique,
minérale,
industrielle’);
insert
into
cnu
valoir
(33,
’chimie
matériaux’);
insert
into
cnu
valoir
(34,
’astronomie,
astrophysique’);
insert
into
cnu
valoir
(35,
’structure
évolution
de
terre
autres
planètes’);
insert
into
cnu
valoir
(36,
’terre
solide
:
géodynamique
enveloppe
supérieures,
’
||’paléobiosphère’);
insert
into
cnu
valoir
(37,
’météorologie,
océanographie
physique
physique
de
’
||’l\’environnement’);
insert
into
cnu
valoir
(39,
’sciences
physico-chimiques
technologie
pharmaceutiques’);
insert
into
cnu
valoir
(40,
’sciences
médicament’);
insert
into
cnu
valoir
(41,
’sciences
biologiques’);
insert
into
cnu
valoir
(60,
’mécanique,
génie
mécanique,
génie
civil’);
insert
into
cnu
valoir
(61,
’génie
informatique,
automatique
traitement
signal’);
insert
into
cnu
valoir
(62,
’energétique,
génie
procédés’);
insert
into
cnu
valoir
(63,
’electronique,
optronique
systèmes’);
insert
into
cnu
valoir
(64,
’biochimie
biologie
moléculaire’);
insert
into
cnu
valoir
(65,
’biologie
cellulaire’);
insert
into
cnu
valoir
(66,
’physiologie’);
insert
into
cnu
valoir
(67,
’biologie
population
écologie’);
insert
into
cnu
valoir
(68,
’biologie
organismes’);
insert
into
cnu
valoir
(69,
’neurosciences’);
insert
into
cnu
valoir
(70,
’sciences
de
l\’éducation’);
insert
into
cnu
valoir
(71,
’sciences
de
l\’information
de
communication’);
insert
into
cnu
valoir
(72,
’epistémologie,
histoire
science
techniques’);
insert
into
cnu
valoir
(73,
’cultures
langue
régionales’);
insert
into
cnu
valoir
(74,
’sciences
techniques
activité
physiques
sportives’);
insert
into
cnu
valoir
(7501,
’théologie
catholique’);
insert
into
cnu
valoir
(7502,
’théologie
protestante’);
35.9.3.
cmtd
insert
into
cmtd
valoir
(1,’cm’,1.5);
insert
into
cmtd
valoir
(2,’td’,1);
chapitre
35.
projet
service
chapitrer
projet
disquer
maîtrise
aes-teg,
2000-2002.
pouvoir
consulter
page
originales1
sur
web.
36.1.
approche
naïve
souhaiter
mémoriser
contenu
d’une
discothèque
but
être
prêt
de
disque
(cd
vinyl)
à
adhérents.
falloir
connaître
œuvres,
exemplaire
de
œuvre,
artistes
correspondants,
renseignement
sur
adhérents.
pour
faire
premier
solution
consister
en
(gros)
tableau
permettre
de
stocker
information
disposer
sur
album
:
nom
de
l’album,
interprète,
morceau
(plusieurs),
genre
de
musique,
type
de
support
(vinyl,
cd),
etc...
disposer
sur
adhérents.
représentation
de
information
«
à
plat
»
sous
forme
d’un
seul
tableau
montrer
d’emblée
limite
:
•
en
effet,
aller
reprendre
information
lier
à
album
fait
colonne
titre
contenir
titre
pour
album.
•
par
ailleurs,
disposition
privilégier
l’approche
de
information
album
par
album.
par
con-
séquent,
être
commode
pour
approche
par
interprète,
par
emprunteur.
avec
solution
avoir
difficulté
à
percevoir
séparement
élément
(entités)
être
distinctes
(albums,
interprètes,
adhérents).
avoir
par
même
occasion,
difficulté
à
regrouper
information
:
album
d’un
in-
terprète,
album
d’un
genre,
album
emprunter
par
même
adhérent,
etc.
disposer
dans
tableur
de
possiblité
de
trier
tableau
suivre
colonne
heurter
à
problème
de
choix
(il
n’y
avoir
de
raison
de
privilégier
ordre
par
rapport
à
autre).
par
ailleurs,
dès
qu’un
tableau
être
trié,
s’agit
de
respecter
ordre
de
mise-à-jour
tableau,
compliquer
procédure
de
saisie
de
nouveaux
albums.
même
tableau
devoir
être
trié,
recherche
d’une
information
préciser
demeurer
fastidieuse,
recherche
devenir
aisée
s’il
s’agit
de
retrouver
croisement
d’information
(x
avoir
t-il
faire
reprise
d’un
titrer
interpréter
par
y).
difficulté
corser
lorsqu’il
s’agit
d’accéder
à
information
d’extraire
série
d’informations
(les
album
de
jean
ferrat
contenir
texte
d’aragon).
remarquer
que,
dans
tel
représentation,
de
nombreuses
information
figurer
fois
(artiste
:
nom
prénom
;
emprunteur
:
adresse
...).
information
être
saisies
individuellement,
outre
perte
d’efficacité,
exister
risque
d’incohérence
(une
donner
saisir
à
deux
endroit
distincts).
répétition
d’une
donner
pouvoir
être
pénalisante
celle-ci
venir
à
changer,
en
effet
lieu
d’avoir
à
procéder
à
seule
mise-à-jour,
être
obliger
de
reporter
même
modification
donnée
figurer
(là
perte
d’efficacité
risquer
d’incohérence).
par
exemple
faire
lorsqu’un
chanteur
décider
de
changer
de
nom2
?
36.2.
analyse
entité
peut-on
identifier
?
être
nombre
de
5
:
disque
l’entité
centrale
de
base
de
données.
s’agit
de
l’œuvre
«
abstraite
»,
parler
de
l’album
blanc
beatles,
sans
référer
à
exemplaire
précis,
à
l’œuvre
elle-même.
propriété
d’un
disque
être
:
•
intitulé,
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2000-2001/mait_aes/projet
idée
bizarre,
sais...
c’est
même
qu’a
faire
prince.
(ce
n’enlève
d’ailleurs
rien
à
bizarreté
fait...)
chapitrer
projet
disquer
•
année
de
parution,
•
morceau
composent.
•
genre
de
musique
(rock,
classique,
etc...)
artiste
avoir
enregistrer
disque
?
propriété
d’un
artiste
être
:
•
nom,
•
prénom,
•
groupe
l’accompagne,
exemplaires
l’entité
exemplaires
être
différente
de
l’entité
disques.
s’agit
de
l’objet
physique,
l’exemplaire
physique
d’un
disque,
par
exemple
l’exemplaire
en
vinyl
de
l’album
blanc
beatles
trouver
dans
discothèque
de
grand-mère.
pouvoir
avoir
exemplaires
d’un
disque.
propriété
d’un
exemplaire
être
:
•
type
de
support
(cd
vinyl),
•
prix
(pour
remboursement
en
cas
de
perte
de
détérioration).
adhérent
s’agit
personne
inscrire
club.
propriété
d’un
adhérent
être
:
•
nom,
•
prénom
•
adresse3,
•
date
début
de
adhésion,
•
nombre
de
personne
avoir
accès
disque
emprunter
par
adhérent4
pour
pouvoir
faire
statistique
sur
pénétration
disque
en
stock
dans
public.
prêts
adhérent
emprunter
exemplaire5.
propriété
d’un
prêt
être
:
•
date
de
début
(date
de
sortie
de
l’exemplaire),
•
date
de
fin
(date
de
rentrée
de
l’exemplaire).
relation
exister
entre
entité
être
décrire
dans
figure
:
figurer
36-1.
relation
dans
base
disques,
premier
version
remarquer
choix
aller
amener
difficulté
:
•
faire
figurer
ville
dans
fiche
d’adhérent,
créer
redondance
donnée
risque
d’inconsistance.
aller
créer
nouvelle
entité
:
villes.
propriété
d’une
ville
être
:
@ord@
par
pur
souci
de
simplification
de
base,
sommes
éloigner
de
réalité
en
décider
de
conserver
ville
de
résidence
pour
l’adresse
d’un
adhérent.
choix
être
à
fait
mauvais
dans
réalité.
4.
être
nombre
de
personne
vivre
même
domicile
lui.
5.
autre
analyse
avoir
pouvoir
amener
à
considérer
prêts
relation
entre
exemplaires
adhérents,
entité
propre.
discussion
pouvoir
être
longue
sur
sujet.
de
façons,
résultat
avoir
être
identique,
presque...
chapitrer
projet
disquer
•
nom,
•
code
postal.
•
même
remarquer
pour
genre
musical
disques.
aller
créer
nouvelle
entité
genres.
seule
propriété
d’un
genre
être
nom.
•
garder
titre
morceau
composer
disque
avec
renseignement
concerner
disque
lui-
même
poser
autre
problème
:
placer
réserver
?
réserver
de
place,
être
débordé.
réserver
de
place
(par
exemple
de
ranger
40
titres)
perdre
place
énorme
être
réserver
pour
disques,
comprendre
contenir
qu’une
dizaine
de
morceau
(ce
être
cas
pour
plupart
disques)
;
pouvoir
exister
disque
avoir
de
morceau
avoir
réservé6.
autre
problème
résulter
choix
d’une
structure
:
rendre
impossible
recherche
d’un
morceau
particulier,
connaître
titre,
l’interprète,
disque.
aller
créer
nouvelle
entité
pour
«
éclater
»
donnée
:
chansons.
propriété
d’une
chanson
être
:
•
titre,
•
numéro
d’ordre
sur
disque.
relation
exister
entre
entité
être
décrire
dans
figure
:
figurer
36-2.
relation
dans
base
disques,
deuxième
version
n’est
question
maintenant,
par
exemple,
de
reporter
sur
ligne
correspondre
à
exemplaire
information
relatives
disque.
placer
donc,
sur
ligne
correspondante,
information
particulière
à
partir
de
pouvoir
retrouver,
dans
tableau
correspondant,
concerner
disque
(ce
typer
d’information
être
appeler
clef
étrangère).
mais,
avoir
disposer
de
clef
pour
disques.
par
contre,
disposer
de
type
d’information
pour
villes,
bureau
distributeurs
:
code
postal.
ainsi,
pouvoir
contenter
niveau
de
l’adresse
d’une
bureau
distributeur
dès
l’on
disposer
d’un
tableau
(codepostal,
bureaudistributeur).
reprendre
idée
code
(du
numéro,
matricule...)
pour
albums,
artistes...
fait
partir
de
vie
:
avoir
numéro
insee,
numéro
de
carte
d’étudiant,
numéro
de
dossier
pour
organisme
logeur,
numéro
de
compte
en
banque,
livre
avoir
numéro
isbn
cote
s’ils
appartenir
à
bibliothèque,
voiture
avoir
numéro
minéralogique,
produit
commerce
«
code
à
barre
»,
etc.
pour
entité
n’ont
de
clef
«
naturelle
»,
devoir
en
créer
un
de
pièces.
36.3.
dernières
remarque
avoir
faire
approximation
dans
l’analyse
de
base.
n’a
par
exemple
prendre
en
compte
fait
qu’un
artiste
pouvoir
enregistrer
album
seul
à
l’intérieur
d’un
groupe.
information
n’est
gérer
dans
base.
est,
par
exemple,
impossible
de
trouver
dans
@ord@
monde
savoir
que,
d’après
axiome
de
n
(ensemble
entiers
naturels),
être
l’entier
choisi,
exister
grand.
connaissance
musicales
(étendues,
j’en
suis
sûr)
aller
laisser
supposer
40
titres,
proposé,
c’est
beaucoup.
eh
non!
!the
commercial
album
residents
contenir
50
morceaux.
chapitre
projet
disquer
base
moindre
lien
entre
disque
rolling
stones
de
mick
jagger
de
keith
richard.
même
remarque
pour
beatles
john
lennon.
avoir
faire
de
grosses
approximation
(si
référer
réel)
sur
adresse
:
avoir
être
mentionner
l’on
garder
ville;
n’a
tenir
compter
ville
n’ont
de
bureau
distributeur
propre;
cas
avoir
être
oublier
pour
conserver
champ
codepostal
dans
table
ville
fonction
de
clef.
approximation
avoir
être
faire
en
général
dans
but
pédagogique,
de
surcharger
base
pour
rendre
compréhension
aisée.
falloir
souvenir
l’analyse
d’un
système
informatique
n’est
travail
objectif
qu’elle
dépendre
de
vision
(plus
claire,
souvent)
qu’en
avoir
futurs
utilisateurs.
informaticien
réaliser
analyse
pour
compte
de
quelqu’un
d’autre,
c’est
à
de
détecter
problème
éventuels
de
signaler
client.
dernier
pouvoir
faire,
en
connaissance
de
cause,
choix
paraître
réducteurs,
oubli
commettre
concerner
information
l’intéressent
pas.
gros
problème
dans
cas
être
éventuel
changement
d’avis
dans
futur.
être
sans
doute
impossible
d’adapter
solution
choisie.
valoir
sur-abondance
raisonnable7
d’informations
qu’on
n’utilise
pour
l’instant,
qu’un
oubli
d’informations
pouvoir
avoir
besoin
tard.
36.4.
autre
analyse
projet
disque
trouver
dans
ligne
suivre
approche
différente
de
l’analyse
faire
dans
chapitre
précédent.
analyser
être
prendre
en
compte
dans
reste
projet.
être
présenter
pour
montrer
même
problème
pouvoir
amener
à
deux
structure
différentes
suivant
l’approche
qu’on
en
a.
36.4.1.
description
disque
être
composer
de
plage
musicales.
pour
avoir
base
performante,
désirer
distinguer
inter-
prétations
différentes
d’un
même
titre.
par
exemple
falloir
différencier
•
string
quartet
n◦12
de
d.schostakowitsch
sur
disque
string
quartet
1,
9
&
12
enregistrer
27/09/81
par
borodin
string
quartet
•
string
quartet
n◦12
de
d.
schostakowitsch
sur
disque
gidon
kremer
ed.lockenhaus
vol
4/5
enregistrer
02/07/86
par
g.
kremer,
y.
horigome,
k.
kashkashian,
d.
geringas
information
suivantes
être
à
mémoriser
:
titre
disque,
référence
d’édition,
code
barre,
titre
composer
;
pour
titre,
compositeur,
date
d’enregistrement,
lieu
d’enregistrement,
interprète
durée
de
l’interprétation.
pour
compositeur
interprètes,
mémoriser
nom.
adopter
choix
suivants
:
•
référence
d’édition
être
donner
l’éditeur
disque
(exemple
:
ecm
new
serie
736943).
s’occupera
de
l’éditeur.
•
compositeur
d’un
titre
être
considérer
être
unique.
s’il
avoir
compositeur
(ce
être
rare),
être
noter
nom
unique
considérer
groupe.
exemple
36-1.
groupe
string
quartet
n◦12
composer
par
d.
schostakowitsch
the
black
angel’s
death
song
composer
par
groupe
reed/cale.
compositeur
pouvoir
être
individu,
groupe.
7.
problème
être
de
définir
mot
raisonnable.
chapitrer
projet
disquer
•
interprète
varier
selon
interprétations.
interprète
pouvoir
être
:
compositeur
(qui
être
interprète
autre),
groupe,
regroupement
d’interprètes,
groupe
interprète
invités...
dans
cas,
seuls
nom
(du
groupe,
interprète
s’il
s’agit
d’un
regroupement
d’interprètes)
intéressent.
puis,
dans
recherche
approfondie,
membre
groupe
pouvoir
être
demandés.
pouvoir
considérer
groupe
interprète
particulier.
exemple
36-2.
groupe
avec
interprète
invité
the
black
angel’s
death
song,
par
the
velvet
underground
nico,
the
velvet
underground
être
groupe
(à
niveau,
importer
composer
groupe)
nico
être
interprète
invitée.
exemple
36-3.
interprèete
compositeur
riding
the
westerleys
composé
interpréter
par
terry
riley.
•
même
interprétation
pouvoir
apparaître
sur
disques.
•
tenir
compte
différents
mouvement
à
l’intérieur
d’une
composition
(classique).
•
probabilité
pour
qu’un
même
titre
être
enregistrer
par
interprète
différents,
même
jour,
être
considérer
nulle.
l’égalité
possible
lieu
date
d’enregistrements
être
considérer
redondance.
être
intéresser
de
savoir
être
membre
d’un
groupe.
pour
cela,
mémoriser
à
partir
de
dater
interprète
appartenir
à
groupe
à
date
supposer
qu’il
quitte.
supposer
programme
gérer
validité
de
dates.
36.4.2.
résultat
obtenir
schéma
conceptuel
de
figure
suivante
:
figurer
36-3.
autre
mcd
pour
base
disque
chapitrer
projet
disquer
table
être
:
•
table
disque
contenir
code
barre,
titre
disque,
nombre
de
plage
référence
de
l’éditeur.
•
table
morceau
correspondre
interprétations.
contenir
information
associer
à
l’enregistrement
durée.
même
interprétation
pouvoir
apparaître
sur
disques.
•
table
œuvres
correspondre
à
création
compositeur.
•
table
compinte
(nom
donner
pour
compositeur
interprètes)
contenir
compositeur
inter-
prètes.
en
effet,
compositeur
pouvoir
être
interprète
information
mémoriser
dans
deux
cas
être
mêmes,
pouvoir
regrouper
deux
entité
en
seule,
éviter
de
dupliquer
infor-
mater
pour
compositeurs-interprètes.
de
table
contenir
fiche
correspondre
à
groupe
qu’à
individus.
œuvre
être
interpréter
par
groupe,
trouver
fiche
groupe
et,
possible,
fiche
interprète
appartenir
groupe.
fiche
d’une
interprétation,
être
interpréter
par
groupe,
être
de
préférence
relier
groupe
qu’aux
membre
groupe.
trouver
membre
groupe
par
relation
appartenance.
permettre
de
traiter
cas
possibles
;
en
particulier,
n’y
avoir
problème
pour
interprétation
par
groupe
inviter
un
interprète.
n’y
avoir
difficulté
pour
enregistrer
groupe
sans
connaître
membres,
pour
ajouter
membre
à
groupe
existant,
pour
définir
interprétation
effectuer
par
seul
membre
groupe...
ajouter
champ
logique,
appeler
estgroupe,
permettre
de
différencier
individu
groupes.
contenir
valeur
vrai
fiche
être
d’un
groupe,
valeur
faux
s’il
s’agit
d’un
individu.
appartenance
être
relation
entre
table
compinte,
vue
contenir
fiche
groupes,
table
compinte,
vue
contenir
fiche
individus.
a
relation
être
associer
informa-
tions
:
date
de
début
de
fin
d’appartenance
à
un
groupe.
un
élément
de
relation
indiquer
qu’un
individu,
interprète
fiche
être
dans
table
compinte,
avoir
appartenir
à
groupe,
fiche
être
dans
table
compinte.
date
être
gérer
de
façon
base
rester
cohérente.
interprète
référencer
sur
fiche
de
table
membre
être
supposer
avoir
participer
à
enregistrement
effectuer
par
groupe
référencé,
entre
date
de
début
date
de
fin
d’appartenance
à
groupe.
36.5.
création
table
pour
garnir
de
donnée
aller
pouvoir
laisser
faire
fichier
faire
à
place.
pour
déconnectez-vous
de
postgresql
(\q)
reconnectez-vous
par
commande
suivante
:
psql
-f
/home/enseign/aesteg/creerdisques.sql
aller
faire
exécuter
par
postgresql
fichier
creerdisques.sql
contenir
commande
donnée
nécessaires
remplissage
de
base.
avoir
message
d’erreur,
faire
à
condition
programme
arriver
à
terme.
table
avoir
être
créer
par
commande
suivantes
:
•
table
artistes
:
create
table
artistes
(
codeartiste
int4
primary
key,
prenom
varchar,
nom
varchar,
groupe
varchar)
;
•
table
disque
:
l’œuvre
logique,
parler
de
l’album
blanc
beatles,
sans
référer
à
ex-
emplaire
précis,
à
l’œuvre
elle-même.
plupart
renseignement
trouver
dans
d’autres
table
avoir
accès
grâce
clef
étrangères
create
tabler
disque
(
codedisque
int4
primary
key,
artiste
int4,
annee
varchar,
intituler
varchar,
chapitrer
projet
disquer
genre
int4)
;
•
table
chanson
:
fiche
correspondre
à
chanson
dans
un
disque.
connaître
disque
par
code.
create
tabler
chanson
(
numero
int4,
disquer
int4,
titre
varchar,
primary
key
(numero,
disque))
;
•
table
genre
:
create
tabler
genre
(
codegenre
int4
primary
key,
genre
varchar)
;
•
table
prets
:
fiche
correspondre
à
emprunt
d’un
exemplaire.
create
tabler
prets
(
codepret
int4
primary
key,
exemplaire
int4,
adherent
int4,
sortie
date,
retour
date)
;
•
table
ville
:
create
tabler
ville
(
codepostal
varchar
primary
key,
ville
varchar)
;
•
table
adherents
:
create
table
adherents
(
codeadherent
int4
primary
key,
nom
varchar,
prenom
varchar,
dateadhesion
date,
codepostal
varchar,
nbrepersonnes
int4)
;
•
table
exemplaires
:
exemplaire
physique
d’une
œuvre,
par
exemple
l’exemplaire
en
vinyl
de
l’album
blanc
beatles
trouver
dans
discothèque
de
grand-mère.
exemplaire
pouvoir
être
sur
vinyl
cd.
prix
être
indiquer
pour
pouvoir
établir
facture
en
cas
de
perte.
create
tabler
exemplaires
(
codeexemplaire
int4
primary
key,
disquer
int4,
cdouvinyl
varchar,
prix
float4)
;
36.6.
travail
aller
devoir
réaliser
site
web
de
discothèque.
être
libre
pour
choix
contenu
de
site.
seules
chose
importantes
être
:
•
site
devoir
entendre
utiliser
php
postgresql
(c’est
projet
cours!
!).
un
deux
formulaire
être
vus...
•
être
noter
sur
l’état
de
site
à
fin
dernier
cours.
avoir
contrôle
oral
sur
contenu
(en
d’autres
mot
:
vérifier
être
l’auteur
de
présenterez...).
•
faire
de
pouvez.
n’y
avoir
de
minimum
à
atteindre.
•
l’ergonomie
facilité
d’utilisation
site
être
prendre
en
compte
dans
notation.
•
pouvoir
travailler
par
groupe
de
deux.
pouvoir
trouver
exemple8
de
à
pouvoir
ressembler
sur
web.
http://grappa.univ-lille3.fr/~gonzalez/enseignement/2000-2001/mait_aes/disques
chapitre
projet
disquer
index
explode,
fclose,
action,
fgets,
adodb,
file,
affectation,
fopen,
affectedrows(),
fputs,
algorithmique,
fwrite,
alternative,
gettype,
analyse,
header,
apostrophe,
implode,
archive,
include,
assembleur,
join,
backslash,
ltrim,
base
de
données,
opendir,
boucler
pour,
pg_affected_rows,
bouton
pg_connect,
d’envoi,
pg_fetch_array,
radio,
pg_numrows,
reset,
pg_query,
submit,
pg_result_status,
case
à
cocher,
phpinfo,
champs,
readdir,
chaîne
de
caractères,
require,
opération
sur
-,
sort,
checkbox,
split,
chop,
strlen,
clef
étrangère,
strpos,
closedir,
strtolower,
concaténation,
strtoupper,
connexion
à
base
de
données,
str_replace,
contrôle
types,
substr,
conversion
substr_replace,
de
types,
trim,
majuscules-minuscules,
fopen,
minuscules-majuscules,
for,
couche
d’abstraction,
foreach,
count,
formulaires,
dbx,
fputs,
db_fetchmode_assoc,
fwrite,
db_fetchmode_ordered,
gedcom,
delete,
gestion
erreurs,
docbook,
get,
droit
d’accès,
gettype,
dsn,
$_get,
echo,
guillemet,
emacs,
header,
en-tête
http,
hidden,
entité,
html,
erreur,
$http_get_vars,
explode,
$http_post_vars,
faq,
hébergeur,
fclose,
identification,
fermeture
d’un
fichier,
if,
fetchinto(),
image
cliquables,
fetchrow(),
implode,
fgets,
include,
fichier,
informations,
fermeture,
input,
ouverture,
insert,
file,
interpréteur,
fonction,
itération,
chop,
jdn,
closedir,
join,
echo,
journal
net,
langage
protocole,
compilé,
quanta,
de
scripting,
radio,
web,
readdir,
informatique,
require,
intermédiaire,
require_once,
interprété,
requête,
machine,
reset,
naturel,
return,
licence
gnu
fdl,
répertoire,
longueur
d’une
chaîne,
safe
mode,
ltrim,
saisir
de
mot
de
passe,
mcd,
select,
message
d’erreurs,
$_server,
metadata,
sessions,
metatdata,
setfetchmode,
mld,
sgbd,
mysql,
sort,
numcols(),
split,
numrows(),
sql,
opendir,
sqlite,
openjade,
string,
opérateur,
strlen,
de
comparaison,
strpos,
de
concaténation,
strtolower,
logique,
strtoupper,
opération
sur
chaînes,
structure
de
contrôle,
ouverture
d’un
fichier,
str_replace,
pager
web
dynamique,
submit,
password,
substr,
pdf,
substr_replace,
pdo,
séparation
contenu
traitement,
pear,
séquence,
pear-db,
tableau,
peardb,
associatif,
pg_affected_rows,
tableinfo(),
pg_connect,
que,
pg_fetch_array,
text,
pg_last_error,
textarea,
pg_numrows,
trim,
pg_query,
update,
pg_result_status,
variable,
version,
phpinfo,
w3c,
phplib,
while,
$php_auth_pw,
xml,
$php_auth_user,
xsltproc,
$php_auth_user,
zoner
de
saisie,
point-virgule,
portable,
post,
postgresql,
$_post,
procédure,
programmation
séparée,
programmer,
projet
association,
brazil,
camping,
disques,
disque
2009,
généalogie,
inscriptions,
services,
