cours
php
verser
4.x
5.x
table
matière
1
introduction
1.1
définition
1.2
historique
1.3
utilisation
pratique
1.4
page
statiques
vs
page
dynamiques
1.5
script
cgi
1.6
page
dynamiques
php
1.7
pourquoi
préférer
php
à
d'autres
langage
asp
?
1.8
devoir
connaître
1.9
nécessaire
serveur
1.10
nécessaire
client
1.11
respect
standard
2
base
:présentation
2.0.1
syntaxe
de
base
2.1
intégration
à
html
2.2
séparateur
d'instructions
2.3
bloc
d'instructions
2.4
commentaire
3
travailler
avec
variables
3.1
déclarer
variable
3.2
portée
variables
3.3
variables
prédéfinies
3.4
variables
dynamique
3.5
type
de
variables
3.5.1
booléens
3.5.2
entiers
3.5.3
virgule
flottante
3.5.4
chaîne
de
caractère
3.5.5
tableau
3.5.6
variable
objet
3.6
constante
3.7
obtenir
type
d'une
variable
3.8
définir
supprimer
variable
4
opérateur
4.1
précédence
opérateur
4.2
opérateur
arithmétiques
4.3
opérateur
d'assignation
4.4
opérateur
sur
bit
4.5
opérateur
de
comparaison
4.6
opérateur
d'erreur
4.7
opérateur
d'exécution
4.8
opérateur
d'incrémentation/décrémentation
4.9
opérateur
logiques
4.10
opérateur
de
chaîne
4.11
opérateur
de
tableau
5
notion
d'expression
6
structure
de
contrôle
6.1
if
6.2
while
cours
programmation
php
6.2.1
while
classique
6.2.2
do
...
while
6.3
for
6.4
foreach
6.5
break
continuer
6.6
switch
6.7
return
6.8
require
include
(_once)
7
fonction
7.1
syntaxe
porter
7.2
argument
7.3
valeur
de
retour
7.4
fonction
internes
8
gestion
formulaire
en
php
8.1
get
post
8.2
récupération
par
tableau
8.3
récupération
directe
8.4
utiliser
tableau
9
date
heure
9.1
localisation
9.2
récupérer
date
l'heure
9.2.1
date()
9.2.2
date
locale
strftime()
9.2.3
retour
par
tableau
getdate()
9.2.4
l'heure
localtime()
9.3
récupérer
n'importe
dater
10
mysql
10.1
présentation
10.2
outil
10.2.1
phpmyadmin
10.2.2
mysqlcc
10.3
créer
base
10.4
utilisateur
droit
10.5
créer
modifier
table
10.5.1
type
numériques
10.5.1.1
type
entiers
10.5.1.2
type
réels
(flottants)
10.5.1.3
type
booléens
10.5.2
type
caractère
10.5.2.1
type
char
10.5.2.2
type
text
10.5.2.3
type
enum
10.5.2.4
type
set
10.5.3
type
date
10.5.3.1
format
supporter
10.5.3.2
type
datetime
10.5.3.3
type
date
10.5.3.4
type
timestamp
10.5.3.5
type
time
10.5.3.6
type
year
10.5.4
création
:
syntaxe
sql
courir
programmation
php
10.5.5
type
de
table
(myisam
innodb)
10.5.6
index
fulltext
10.5.6.1
création
10.5.6.2
recherche
10.5.6.3
recherche
booléenne
10.6
mysql
php
10.6.1
connexion
à
base
de
donnée
10.6.1.1
connexion
serveur
10.6.1.2
choix
d'une
base
10.6.1.3
fermeture
d'une
connexion
10.6.1.4
séquence
complète
pour
base
10.6.2
requête
10.6.2.1
exécuter
requête
10.6.2.2
nombre
de
ligne
affecter
10.6.2.3
nombre
de
ligne
retourner
10.6.2.4
récupérer
résultat
10.6.2.5
insertion
avec
auto-incrément
10.6.3
récupération
erreur
11
système
de
fichier
11.1
travail
sur
fichier
11.1.1
ouverture
11.1.2
lecture
11.1.2.1
fgets()
11.1.2.2
fread();
11.1.2.3
fscanf()
11.1.2.4
fgetc()
11.1.2.5
fgetss()
11.1.2.6
fgetcsv()
11.1.2.7
renvoyer
fichier
par
sortie
standard
11.1.3
ecriture
11.1.4
déplacement
11.1.4.1
fseek()
11.1.4.2
ftell()
11.1.4.3
rewind()
11.1.5
fin
de
fichier
11.1.6
fermeture
11.2
travail
sur
répertoire
11.2.1
répertoire
actuel
11.2.2
déplacer
11.2.3
ouvrir,
lister,
fermer
11.2.4
récupérer
entrée
11.3
travail
sur
système
de
fichier
11.3.1
information
sur
fichier
11.3.2
action
sur
fichier
répertoire
11.4
upload
de
fichier
12
travail
sur
chaîne
12.1
fonction
pour
code
html
mysql
12.1.1
gestion
caractère
verrouiller
12.1.2
balise
caractère
spéciaux
html
12.2
fonction
texte
générales
12.2.1
découper
chaîne
courir
programmation
php
12.2.2
rechercher
comparer
13
session
cookies
13.1
cookies
13.1.1
création
13.1.2
accès
13.1.3
suppression
13.2
identification
http
13.2.1
connexion
13.2.2
déconnexion
13.3
session
php
13.3.1
principe
13.3.2
utilisation
13.3.2.1
ouverture
13.3.2.2
variables
de
session
13.3.3
expiration
de
session
13.3.4
changer
l'accès
par
défaut
14
image
14.1
pré-requis
importants
14.2
créer
image
14.2.1
type
possibles
14.2.2
création
14.2.2.1
nouvelle
image
dynamique
14.2.2.2
récupération
d'une
image
existante
14.2.3
publication
14.2.4
chargement
via
autre
page
14.3
travailler
sur
image
14.3.1
récupérer
information
14.3.2
couleur
14.3.3
dessin
14.3.3.1
remplissage
14.3.3.2
point
14.3.3.3
ligne
14.3.3.4
rectangle
14.3.3.5
cercle,
ellipse
14.3.3.6
polygone
14.3.3.7
texte
simple
15
programmation
objet
15.1
structure
15.2
création
d'un
objet
15.3
accès
membre
15.3.1
php
4
5
15.3.2
php
5
15.4
l'opérateur
::
15.5
variables,
protection
15.5.1
php
4.x
15.5.2
php
5.x
15.5.2.1
protection
variables
fonction
15.5.2.2
attribut
méthode
statiques
15.5.2.3
constante
de
classe
15.6
héritage
polymorphisme
15.7
mots-clés
parent
self
cours
programmation
php
15.8
constructeur
15.8.1
php
4
5
15.8.2
php
5
15.9
constructeur
classe
dériver
15.9.1
php
4
5
15.9.2
php
5
15.10
destructeur
15.10.1
php
4
15.10.2
php
5
15.11
affectation
d'objets
15.11.1
code
commun
15.11.2
php
4
15.11.3
php
5
15.12
comparaison
d'objets
15.12.1
php
4
15.12.2
php
5
16
nouveauté
en
php
5
16.1
objet
16.1.1
fonction
__autoload
16.1.2
classe
abstraites
16.1.3
classes,
méthode
variables
finale
16.1.4
interface
objet
16.1.5
gestion
dynamique
méthode
attribut
16.1.6
itération
d'objets
16.1.7
type
hinting
16.2
exception
16.2.1
try
...
catch
16.2.2
déclenchement
avec
throw
16.2.3
classe
exception
classe
personnaliser
16.2.4
php
:
erreur
exception
?
16.2.5
exception
par
défaut
17
sauvegarder
objet
17.1
cas
d'une
session
17.2
autres
cas
cours
programmation
php
1
introduction
1.1
définition
php
être
langage
de
script
html
exécuter
côté
serveur.
vouloir
dire
«
php
:
hypertext
preprocessor
».
syntaxe
être
inspirer
langage
c,
de
java
de
perl,
avec
amélioration
spécifiques.
but
langage
être
d'écrire
page
html
dynamiques.
1.2
historique
l'origine
de
php
remonter
à
1995
rasmus
lerdorf
avoir
créer
php/fi,
librairie
de
script
perl
utiliser
pour
publication
de
cv
sur
site
personnel.
fur
à
mesure
évolutions,
librairie
avoir
être
porter
en
c
agrémenter
de
nouvelles
fonctionnalité
pour
créer
page
dynamiques
simples
pour
web
accéder
à
source
de
données.
php/fi
signifier
personal
home
page/forms
interpreter.
php/fi
2.0
sort
en
1997,
développer
par
seule
personne.
c'est
succès
:
50000
site
(1%
nom
de
domaines)
dire
l'utiliser
supporter.
contributeurs
affluent.
php
3.0
sort
en
juin
1998,
c'est
premier
version
développer
par
rasmus
lerdorf,
andi
gutmans
zeev
suraski
réécrire
(les
version
précédentes
être
lentes
pour
application
commerciale).
performances,
php
3
être
modulaire
extensible,
permettre
de
greffer
api
supplémentaires,
n'a
manquer
avec
support
de
nombreuses
base
de
données,
de
format
de
protocoles,
syntaxe
cohérente
support
basique
de
l'objet.
avoir
être
installer
sur
10%
parc
mondial
serveur
web
avec
dizaine
de
millier
de
développeurs
centaine
de
millier
de
sites.
moteur
de
php
4
avoir
être
repenser
d'en
améliorer
performance
application
complexes
d'augmenter
modularité.
nouveau
moteur
avoir
voir
jour,
appeler
zend
engine
(contraction
de
zeev
andi).
php
4
sortir
en
mai
2000
apporter
performance
accrues,
support
de
serveur
web,
sessions,
sécurité
accrue.
c'est
dernière
version
stable
(nous
compter
4.1,
4.2
4.3).
php
5
?
en
version
beta,
cycle
pouvoir
durer
mois,
but
de
php
5
être
amélioration
performance
moteur
zend
(zend
engine
2),
modèle
objet
étendre
proche
c++,
compatibilité
accrue
avec
de
nouveaux
standard
anciens
(rpc,
xml,
.net,
...)
1.3
utilisation
pratique
–
forum
messagerie
–
commerce
électronique
–
banque
/
compte
en
ligne
–
publication
en
ligne
–
moteurs
de
recherche
–
voulez,
(sauf
jeux)
résumer
sigle
aller
utiliser
par
suite.
•
html
:
hypertext
markup
language
•
php
:
people
hate
perl...
:
php,
hypertext
preprocessor
courir
programmation
php
•
sql
:
structured
query
language
•
mysql
:
serveur
de
base
de
donnée
outil
pour
accéder
•
lamp
:
linux
–
apache
–
mysql
–
php,
quatuor
gagner
serveur
web.
apache
php
mysql
linux
1.4
page
statiques
vs
page
dynamiques
page
statique
page
écrire
en
html.
pouvoir
incorporer
code
javascript
donner
semblant
de
'dynamisme'
côté
navigateur
donnée
locales.
pour
traitement
lourds
nécessiter
l'accès
à
base
de
données,
formatage
de
tableau
en
fonction
de
résultats,
recherche
poussée,
graphisme,
falloir
passer
par
page
dynamiques
par
langage
être
exécuter
côté
serveur
:
asp
sur
serveur
microsoft/iis,
perl,
php...
1.5
script
cgi
php
pouvoir
être
utiliser
langage
cgi.
pour
rappel,
script
programme
cgi
être
programme
autre
sortie
être
dédier
à
navigateur,
par
exemple
programme
shell,
c
perl
sortir
html.
php
être
langage
script
autre
pouvoir
l'utiliser
dans
cas,
n'est
mieux.
1.6
page
dynamiques
php
php
être
langage
server
side
côté
serveur.
chargement
d'une
page
php,
c'est
serveur
aller
lire,
interpréter
exécuter
code.
renvoyer
résultat,
sous
forme
de
code
html
navigateur.
navigateur
l'utilisateur
voir
véritable
code
php
exécuté.
de
résultat
être
page
web
classique
en
html,
besoin
d'installer
sur
client
composants
spécifiques
(java,
...).
n'y
avoir
de
notion
de
vitesse
d'exécution
côté
client,
serveur
être
prépondérante.
1.7
pourquoi
préférer
php
à
d'autres
langage
asp
?
asp
n'est
langage
asp
vouloir
dire
active
server
page.
asp
disposer
entendre
de
propres
api
pouvoir
être
accessibles
via
autre
langage.
s'agit
d'utiliser
langage
(quelconque)
pour
créer
page
dynamiques.
disponible
avec
iis
sous
windows,
l'est
par
défaut
avec
autres
système
serveur
web
apache.
exister
module
de
compatibilité
asp
apache
apache::asp
reprendre
api
asp
en
étendre
en
programmation
perl.
sous
windows,
code
asp
faire
en
vbscript
en
jscript.
c'est
possible
sous
unix/linux
apache,
falloir
tourner
vers
solution
commerciales
(sun
one
asp,
instant
asp,
...).
sous
cours
programmation
php
windows
asp
vbscript
être
utiliser
pour
l'accès
activex,
composants
pratiques
véritables
gruyère
pour
sécurité.
n'existe
à
jour
de
portage
de
activex
sur
d'autres
système
windows.
php
être
disponible
pour
plate-forme
permettre
de
faire
même
chose,
plus,
asp
vbscript.
n'oublions
php
disposer
de
de
2700
apis!
!
1.8
devoir
connaître
devoir
connaître
html
qu'un
langage
de
programmation
procédural
(c
par
exemple).
connaissance
basique
sql
pouvoir
être
nécessaire
être
abordée.
1.9
nécessaire
serveur
php
servir
à
faire
page
dynamiques.
c'est
langage
interpréter
même
titre
perl,
python
tcl
être
capable
de
lancer
script
intéractifs
non.
pouvoir
utiliser
php
pour
créer
interface
graphiques
(extension
gtk).
minimum
nécessaire
vital
pour
apprendre
php
être
l'interpréteur
php
sur
environnement
supporter
(unix,
windows,
mac,
...).
parler
de
lamp,
voir
référence.
système
linux,
serveur
web
apache,
serveur
de
base
de
donnée
mysql
interpréteur
php.
version
4
de
php
permettre
de
fonctionner
avec
iis,
mysql
exister
pour
windows.
pouvoir
utiliser
architecture
wimp
(windows,
iis,
mysql,
php)
wamp
(windows,
apache,
mysql,
php).
ajouter
php
à
iis,
c'est
laisser
porte
ouverte
à
vents,
préférer
second
solution.
distribution
linux
disposer
nécessaire
pour
l'architecture
lamp
paramétrage
être
simple.
de
mode
«
user_mod
»
de
apache
permettre
à
utilisateur
de
créer
site
web
dans
répertoire
spécifique
de
répertoire
personnel.
sous
windows,
c'est
complexe
à
mettre
en
uvre
manuellement.
employer
distribution
faites,
meilleure
nommer
easyphp.
version
1.6
1.7
être
meilleures
pour
développer.
pouvoir
développer
site
sous
windows
porter
sur
serveur
unix.
1.10
nécessaire
client
pour
développer
suffire
d'un
simple
éditeur
valoir
préférer
éditeur
évoluer
supporter
coloration
syntaxique
fonction
évoluées.
l'éditeur
hapedit
3
être
parfaire
pour
développer
en
php.
l'accès
base
mysql
pouvoir
faire
depuis
navigateur
(phpmyadmin)
être
depuis
interface
mysqlcc
dbdesigner
pour
conception.
pour
test
:
simple
navigateur
respecter
standard
web.
1.11
respect
standard
w3c
être
l'organisme
international
faire
loi
dans
monde
standard
web.
avoir
définir
série
de
norme
html,
xml,
xhtml,
css,
etc.
respecter
standard
?
c'est
garantie
d'un
bon
fonctionnement
bon
affichage
de
manière
identique
de
page
sur
cours
programmation
php
pager
9/93
navigateur
supporter
standard.
avec
bonne
déclaration
(entête
html)
navigateur
ie6,
mozilla
1.5,
opera
7,
galeon,
konqueror,
etc,
être
compatibles
avec
standards.
l'utilisation
de
balise
propriétaires
à
navigateur
(blink
par
exemple)
de
vbscript
(sous
ie)
être
à
proscrire.
dernière
norme
html
valide
être
html
4.01
strict.
xhtml
à
terme
remplacer
html
être
supporté.
dernière
norme
css
@ord@
dans
cas
préférer
css-1
seul
opera
supporter
css-2.
prendre
l'habitude
c'est
possible
de
tester
site
sur
deux
trois
navigateur
:
ie6
c'est
répandu,
opera
être
respectueux
standard
mozilla
c'est
challenger
remplacer
à
terme
de
ie
(qui
n'aura
d'évolution
de
version
avant
longhorn).
cours
programmation
php
2
base
:présentation
php
être
langage
souple
prendre
source
dans
divers
langage
c,
perl,
c++.
être
possible
d'avoir
style
de
script
(programmation
classique
dire
procédurale
programmation
objet,
programmation
bordélique).
souplesse
permettre
grande
liberté,
en
perl.
l'inconvénient
être
qu'on
pouvoir
obtenir
code
illisible
(bordélique),
marche
bien.
prendre
l'habitude
de
commenter
code,
de
l'indenter
de
placer
qu'une
instruction
par
ligne.
2.0.1
syntaxe
de
base
2.1
intégration
à
html
page
php
porter
l'extension
«
.php
».
page
php
pouvoir
être
programmer
en
php
mélanger
avec
code
html.
php
être
langage
«
embedded
html
»,
c'est
à
dire
qu'il
apparaître
à
n'importe
endroit
de
page
html.
placer
dans
balise
particulières
:
<?php
?>.
pouvoir
utiliser
balise
<script
language="php">
</script>.
premier
forme
être
préférable
de
simplicité
compatibilité
xhtml.
écrire
page
html
dans
intégrer
code
php.
<html>
<head>
<title>titre</title>
</head>
<body>
<?php
echo
"hello
world!
!";
?>
</body>
</html>
code
html
générer
être
suivant
<html>
<head>
<title>titre</title>
</head>
<body>
hello
world!
!
</body>
</html>
l'utilisation
de
balise
pour
l'intégration
de
code
dans
page
web
être
souple
permettre
de
jongler
avec
code
php
code
html
:
<?php
if
(
expression
)
{
?>
<strong>ceci
être
vrai.</strong>
<?php
}
else
{
?>
<strong>ceci
être
faux.</strong>
<?php
}
?>
cours
programmation
php
2.2
séparateur
d'instructions
en
c
instruction
terminer
par
point-virgule
«
;
».
noter
balise
fermante
?>
impliquer
fin
d'une
instruction.
<?php
echo
"ceci
être
test";
?>
<?php
echo
"ceci
être
test"
?>
2.3
bloc
d'instructions
bloc
d'instructions
placer
entre
accolade
{
}.
bloc
d'instructions
pouvoir
contenir
code
de
n'importe
longueur
être
considérer
dans
reste
code
instruction
unique.
c'est
expression
(qui
avoir
valeur)
pouvoir
assigner
bloc,
faire
calculs,
...
2.4
commentaire
commentaire
s'utilisent
en
c
en
c++
avec
/*
..
*/
//.
noter
qu'une
baliser
fermante
commentaire
en
cours.
<?php
/*
echo
"salut!
!"
*/
//
commentaire
sur
ligne
?>
courir
programmation
php
3
travailler
avec
variables
3.1
déclarer
variable
variable
commencer
par
dollar
«
$
»
suivre
d'un
nom
de
variable.
variables
être
typer
moment
de
création.
attention
php
être
sensible
à
casse
:
var
var
être
mêmes
variables!
!voici
règles
à
respecter
:
•
variable
pouvoir
commencer
par
lettre
•
variable
pouvoir
commencer
par
un
souligner
(underscore)
«
_
»
•
variable
devoir
commencer
par
chiffre.
//
déclaration
règles
$var=1;
//
$var
être
à
1
$var=2;
//
$
var
être
à
2
$_toto='salut';
//
ok
$3petitscochons=5;
//
invalide
:
commencer
par
chiffre
type
dépendre
de
valeur
de
contexte
d'utilisation.
pouvoir
forcer
(cast)
variable
à
type
de
données,
s'appelle
transtypage.
de
type
de
variable
pouvoir
changer
en
fonction
de
utilisation
contexte,
php
effectuer
transtypage,
pouvoir
fournir
résultat
surprenants.
affecter
valeur
à
variable
avec
signe
égal
«
=
»
avec
sans
espace
avant
après.
//
déclaration
transtypage
$var='2';
//
chaîne
2
$var+=1;
//
$var
être
entier
3
$var=$var+0.3;
//
$var
être
réel
de
type
double
3.3
$var=5
+
"3
petits
cochons";
//
$var
être
entier
valoir
8
par
défaut
variables
être
assigner
par
valeur
:
valeur
assigner
à
variable
être
recopier
dans
variable.
php
pouvoir
travailler
par
référence.
variable
pouvoir
référencer
autre
variable.
dire
variable
devenir
alias,
pointe
sur
autre
variable.
assigner
par
référence
en
utiliser
signe
«
&
»
devant
variable
assigner
$var=2;
$ref=&$var;
//
$ref
devenir
référence
de
$var
echo
$ref;
//
affiche
2
$var=3;
echo
$ref;
//
affiche
3
$ref=4;
echo
$var;
//
affiche
4
attention
à
valeur
constante
null
insensible
à
casse.
affecter
valeur
null
à
variable
signifier
affecter
de
valeur.
3.2
portée
variables
portée
d'une
variable
dépendre
contexte.
variable
déclarer
dans
script
hors
d'une
fonction
être
globale
par
défaut
portée
être
limiter
script
courant,
qu'au
coder
inclure
(include,
require)
n'est
accessible
dans
fonction
d'autres
scripts.
courir
programmation
php
$a=1;
//
globale
par
défaut
function
foo()
{
echo
$a;
//
c'est
variable
locale
à
fonction
:
n'affiche
}
pour
accéder
à
variable
globale
dans
fonction,
falloir
utiliser
mot-clé
global.
$a=1;
//
globale
par
défaut
$b=2;
//
function
foo()
{
global
$a,$b;
//
récupérer
variables
globales
$b=$a+$b;
}
echo
$b;
//
affiche
3
php
accepter
variables
statiques.
en
c
variable
statique
perdre
valeur
sortir
d'une
fonction.
function
test_static()
{
static
$a=0;
echo
$a;
//
+1
à
passage
dans
fonction
$a++;
}
3.3
variables
prédéfinies
php
disposer
d'un
grand
nombre
de
variables
prédéfinies.
variables
être
de
type
scalaires
tableaux.
être
de
type
superglobales,
c'est
à
dire
accessible
depuis
n'importe
sans
notion
de
portée.
tableau
prédéfinis
(voir
point
tableau
pour
comprendre
utilisation).
•
$_globals
:
tableau
variables
globales.
clé
être
nom
de
variable.
•
$_server
:
variables
fournir
par
serveur
web,
par
exemple
'server_name'
•
$_get
:
variables
fournir
par
http
par
méthode
get
(formulaires)
•
$_post
:
pour
méthode
post
•
$_cookie
:
variables
fournir
par
cookie
•
$_files
:
variables
sur
téléchargement
d'un
fichier
(upload)
•
$_env
:
accès
variables
d'environnement
serveur
•
$_session
:
variables
de
session
(voir
cours
sur
sessions)
noter
:
avant
version
4.2.0
de
php,
variables
passée
par
méthode
get,
post
(formulaires
url)
de
suite
être
créer
dans
script
de
destination.
http://www.toto.fr/page.php?action=enr
créer
variable
$action
prendre
valeur
'enr'.
<input
type="hidden"
name="cache"
value="toto">
créer
dans
page
cibler
(action
form)
variable
$cache
de
valeur
"toto".
n'est
automatique
depuis
php
4.2.0.
falloir
passer
par
tableau
superglobaux
ci-dessus.
pouvoir
passer
en
modifier
valeur
register_globals
dans
php.ini.
cours
programmation
php
3.4
variables
dynamique
variable
dynamique
utiliser
valeur
d'une
variable
nom
d'une
autre
variable.
utiliser
variables
dynamique
en
rajouter
«
$
»
devant
nom
de
premier
variable.
$a="var";
$$a=1;
//
$$a=1
equivaut
en
fait
à
$var=1
echo
$a;
//
affiche
var
echo
$$a;
//
affiche
1
echo
$var;
//
affiche
1
attention
avec
tableaux!
!pour
éviter
ambiguïté,
être
préférable
de
placer
variable
entre
accolades.
3.5
type
de
variables
3.5.1
booléens
un
booléen
pouvoir
prendre
deux
valeur
true
false.
deux
constante
true
false
pouvoir
être
utiliser
sans
distinction
de
casse
(pas
de
différence
entre
majuscule
minuscules).
$var=false;
//
false,
false,
false,
...
$var2=true;
//
true,
true,
true,
...
type
pouvoir
être
convertir
en
booléens.
cas
variable
retourner
false
en
booléen
suivant
type
:
•
booléen
:
false
•
entier
:
0
(zéro)
•
nombre
flotter
:
0.0
(zéro)
•
chaîne
:
chaîne
vide
""
"0"
(zéro)
•
tableau
:
tableau
vide
sans
élément
•
objet
:
objet
vide
sans
élément
•
constante
spéciale
null
dans
autres
cas,
valeur
retourner
être
true.
attention
:
-1
être
considérer
vrai
true.
en
c,
test
de
condition
dans
structure
de
contrôle
effectuer
convertion
booléenne
condition.
if($var==true)
echo
"ok";
if($var)
echo
"ok";
//
identique
3.5.2
entiers
un
entier
être
l'ensemble
nombre
naturels,
c'est
à
dire
dans
virgule,
positifs
négatifs.
entiers
être
coder
sur
32
bit
dépendre
de
l'architecture.
affecter
nombre
entier
dépasser
capacité
de
variable,
celle-ci
être
transformer
en
réel
(float).
n'y
avoir
de
notion
d'entier
signé.
de
conversion
d'un
booléen
en
entier,
false
devenir
0
true
devenir
@ord@
de
conversion
d'un
nombre
à
virgule
flottante,
nombre
être
arrondir
à
valeur
inférieure
s'il
être
cours
programmation
php
positif,
supérieure
s'il
être
négatif
(conversion
vers
zéro).
pour
conversion
depuis
chaînes,
voir
à
type.
3.5.3
virgule
flottante
partir
nombre
réels,
double
float,
c'est
à
dire
nombre
à
virgules.
virgule
être
spécifier
par
point
«
.
».
puissance
de
10
s'exprime
avec
«
e
»
«
e
».
$var=1.234;
$var2=1.1e4;
//
1.1
*
10^4
:
11000
3.5.4
chaîne
de
caractère
chaîne
être
séquence
de
caractères.
php
travailler
en
ascii
256
caractères,
supporter
format
unicode,
prévoir
dans
version
n'y
avoir
de
limite
théorique
pour
taille
de
chaîne.
distinguer
trois
syntaxe
pour
utiliser
chaîne
•
guillemet
simples
'...'
(apostrophes)
:
en
shell,
caractère
inclure
dans
chaîne
être
sortir
sans
interprétation.
devoir
afficher
guillemet
simple,
falloir
l'échapper
:
\'
•
guillemet
doubles
"..."
:
séquence
de
caractère
être
interpréter
variables
être
substituer
(remplacées
par
valeur).
•
heredoc
:
identique
herescripts
en
shell.
texte
saisi
jusqu'à
délimiteur
spécifier
être
placer
dans
variable.
tableau
issu
de
documentation
php
séquence
pouvoir
être
utiliser
avec
guillemet
doubles.
séquence
valeur
\n
nouvelle
ligner
(linefeed,
lf
0x0a
(10)
en
ascii)
\r
retour
à
ligne
(carriage
return,
cr
0x0d
(13)
en
ascii)
\t
tabulation
horizontale
(ht
0x09
(9)
en
ascii)
\\
antislash
\$
caractère
$
\"
guillemet
doubles
séquence
de
caractère
permettre
de
rechercher
nombre
en
\[0-7]{1,3}
notation
octale.
\x[0-9a-fa-
séquence
de
caractère
permettre
de
rechercher
nombre
en
f]{1,2}
notation
hexadécimale.
echo
'attention
l\'abus
d\'alcool
être
dangereux';
$var=2345;
echo
"la
valeur
de
\$var
être
$var\n";
$toto=
<<<fin
cours
programmation
php
salut
ami
aller
?
fin;
echo
$toto;
n'importe
variable
pouvoir
être
afficher
dans
chaîne
attention
deux
variables
avoir
nom
proche!
!il
falloir
utiliser
accolade
{
}
en
shell.
pouvoir
accéder
à
n'importe
caractère
dans
chaîne
en
indiquer
position
(qui
commencer
à
zéro)
entre
deux
accolade
coller
juste
après
nom
de
variable.
$fic='toto.fic';
$fics='riri
fifi
loulou';
echo
"$fics
${fic}s";
//
affiche
riri
fifi
loulou
toto.fics
echo
"$fic{3}";
//
affiche
o
pouvoir
concaténer
deux
chaîne
avec
l'opérateur
point
«
.
».
pouvoir
ajouter
texte
à
chaîne
avec
l'opérateur
égal
«
.=
».
$str="salut
amis!
!\n";
$str.="comment
aller
?";
//
"salut
amis!
!\ncomment
aller
?
$str2=$str."\n";
//
"salut
amis!
!\ncomment
aller
?\n
devoir
utiliser
chaîne
de
caractère
valeur
numérique
(dans
addition
par
exemple,
attention
à
contenu.
chaîne
être
de
type
double
(réel)
contenir
'e'
'e'.
être
entier.
valeur
numérique
être
définir
par
début
de
chaîne.
chaîne
commencer
par
valeur
numérique,
être
utilisée,
être
égale
à
0
zéro.
premier
expression
être
chaîne,
type
de
variable
dépendre
de
second
expression.
$val=10+"2.55";
//
float,
12.55
$val=1+"toto2";
//
1
+
0
=
1
$val=2+"3
petits
cochons";
//
2
+
3
=
5
(le
3
être
en
premier
dans
chaîne)
3.5.5
tableau
tableau
php
être
association
ordonnée.
association
faire
correspondre
valeur
à
clés.
tableau
être
souples,
pouvoir
avoir
de
multiples
dimensions,
être
indexer
par
clé
numérique
texte,
être
utiliser
table
de
hachage,
pile,
queue,
...
valeur
de
tableau
pouvoir
être
tableau,
pour
créer
arbre
par
exemple.
tableau
être
créer
avec
fonction
array()
prendre
argument
paires
«
key
=>
valoir
»
séparer
par
virgules.
clé
pouvoir
être
entier
texte.
attention,
8
être
entier,
08
chaîne!
!si
clé
être
absente
c'est
dernière
clé
entière
1
être
choisie.
c'est
première,
c'est
0
zéro.
accéder
élément
d'un
tableau
à
l'aide
crochet
«
[
]
».
placer
entre
crochet
clé
entière
chaîne.
$var=array(10,15,17,23,9);
echo
$var[0];
//
10
echo
$var[3];
//
17
$tab=array("a"=>12,"nom"=>"toto","pipo",17,4=>5);
echo
$tab[0];
//
pipo
echo
$tab[1];
//
17
echo
$tab['a'];
//
12
echo
$tab['nom'];
//
toto
cours
programmation
php
l'utilisation
de
fonction
array
n'est
obligatoire
pouvoir
déclarer
tableau
à
volée.
$tab2[1]=2;
$tab2[]=6;
//
equivaut
$tab2[2]=6
$tab2['test']='ma
chaîne';
pouvoir
créer
tableau
multidimensionnels
à
l'aide
deux
méthode
précédentes.
$tab=array("un"=>array("riri",1=>"fifi",2=>'loulou'),2=>array(1,2,3),array('un',
'deux','trois'));
echo
$tab['un'][0];
//
riri
echo
$tab[2][1];
//
2
echo
$tab[3][2];
//
trois
$tab2['un']['deux']='test';
//
créer
tableau
à
deux
dimension
exister
fonction
pratique
pour
lister
contenu
d'un
tableau,
pour
modifier
élément
:
foreach().
$tab=array(1=>'un',2=>'deux',3=>'trois');
foreach($tab
avoir
$valeur)
{
echo
"$valeur
\n";
//
afficher
deux
trois
}
foreach($tab
avoir
$cle
=>
$valeur)
{
echo
"$cle
=>
$valeur\n";
//
affiche
1
=>
un,
2
=>
deux,
3
=>
trois
}
3.5.6
variable
objet
objet
créer
avec
l'instruction
class.
pour
créer
instace
de
l'objet
falloir
utiliser
mot
clé
new.
class
test
{
function
affiche_hello()
{
echo
"hello!
!";
}
}
$obj=new
test;
$obj->affiche_hello();
3.6
constantes
constantes
être
nom
prendre
valeur
pouvoir
être
modifier
fois
fixée.
constante
n'est
accessible
qu'en
lecture
seule.
être
sensibles
à
casse
devoir
par
convention
être
écrire
en
majuscules.
définir
constante
avec
fonction
define()
devoir
respecter
règles
:
•
constante
commencer
par
$
•
constante
être
accessible
depuis
n'importe
endroit
code
•
constante
pouvoir
être
redéfinir
•
constante
pouvoir
contenir
d'un
scalaire
(entier,
booléen,
chaîne,
double).
define(constante,"valeur");
echo
constante;
//
afficher
"valeur"
cours
programmation
php
3.7
obtenir
type
d'une
variable
pour
obtenir
type
d'une
variable,
utiliser
fonction
«
gettype
»
retourner
chaîne
de
texte
indiquer
type.
attention
garantir
résultat
même
d'une
version
php
à
un
autre.
type
retourner
être
"boolean",
"integer",
"double"
(pour
raison
historiques,
"double"
être
retourner
lorsqu'une
valeur
de
type
float
être
fournie,
lieu
de
chaîne
"float"),
"string",
"array",
"object",
"resource"
(depuis
php
4),
"null"
(depuis
php
4),
"unknown
type"
souhaiter
tester
type
d'une
variable,
être
préférable
d'utiliser
fonction
de
type
«
is_*
»
:
is_array,
is_bool,
is_double,
is_float,
is_int,
is_integer,
is_long,
is_null,
is_numeric,
is_object,
is_real,
is_resource,
is_string,
is_callable
(est-ce
un
fonction).
3.8
définir
supprimer
variable
souhaiter
savoir
variable
être
définie,
c'est
à
dire
être
affectée,
utiliser
«
isset
».
souhaiter
supprimer
variable,
falloir
utiliser
«
unset
».
cours
programmation
php
4
opérateur
4.1
précédence
opérateur
c'est
l'ordre
dans
valeur
devoir
être
analysées.
l'expression
4
+
3
*
7
n'est
lire
de
gauche
à
droite
retourner
49
@ord@
tableau
priorité
opérateur
par
ordre
croître
de
priorité
:
associativité
opérateur
gauche
,
gauche
gauche
xor
gauche
and
droite
print
gauche
=
+=
-=
*=
/=
.=
%=
&=
|=
^=
~=
<<=>>=
gauche
?
:
gauche
|
gauche
&&
gauche
|
gauche
^
gauche
&
non-associative
==!
!=
===!
!==
non-associative
<
<=
>
>=
gauche
<<
>>
gauche
+
-
.
gauche
*
/
%
droite
!
!~
++
--
(int)
(double)
(string)
(array)
(object)
@
droite
[
non-associative
new
4.2
opérateur
arithmétiques
opérateur
+,
-,
*,
/
%.
«
%
»
être
modulo
:
reste
de
division.
4.3
opérateur
d'assignation
principal
être
=
avoir
en
c
opérateur
combiner
+=,
-=,
*=,
/=,
%=,
.=
...
4.4
opérateur
sur
bit
opérateur
être
&
(and),
|
(or),
^
(xor),
~
(not,
~$a),
>>
($a>>$b
décalage
de
$b
bit
cours
programmation
php
sur
gauche)
<<
($a
<<
$b
décalage
de
$b
bit
sur
droite).
décalage
de
bit
sur
gauche
équivaloir
à
multiplication
par
deux,
décalage
sur
droite
à
division
par
deux.
4.5
opérateur
de
comparaison
opérateur
être
==
($a==$b,
valeur),
===
($a===$b,
même
valeur
même
type),!
!=
<>
(différent),
<,
>,
<=,
>=.
avoir
l'opérateur
ternaire
«
?:
»
expr1?expr2:expr3
expr1
être
vrai
expr2
expr3.
4.6
opérateur
d'erreur
disposer
d'un
opérateur
spécial
@
appliquer
à
expression
empêcher
sortie
d'un
message
d'erreur
en
cas
de
problème.
pouvoir
récupérer
message
d'erreur
éventuel
à
l'aide
de
variable
$php_errormsg
l'option
«
track_errors
»
être
à
«
»
dans
php.ini.
$retour=@$tab['toto'];
//
retourner
d'erreurs
l'index
toto
n'existe
4.7
opérateur
d'exécution
pouvoir
exécuter
commande
externes
php
en
shell
avec
opérateur
«
guillemts
inverses
«
`
»
(altgr+6).
attention
l'option
«
safe_mode
»
devoir
être
à
«
»
dans
php.ini.
pouvoir
utiliser
fonction
«
shell_exec
»
faire
exécuter
commande
par
shell.
4.8
opérateur
d'incrémentation/décrémentation
disposer
en
c
opérateur
++
--,
à
utiliser
avant
après
nom
de
variable.
$a++;
//
retourne
$a
l'incrémente
de
1
++$a;
//
incrémenter
$a
de
1
retourne
$a
$a--;
//
retourne
$a
décrémente
de
1
--$a;
//
décrémente
$a
de
1
retourne
$a
attention!
!les
opérateur
réagir
type
de
variables.
php
réagir
en
perl.
:
$a='z';
$a++;
echo
$a;
//
retourner
aa
$a++;
echo
$a;
//
retourner
4.9
opérateur
logiques
opérateur
logiques
être
:
«
and
»
«
&&
»
($a
and
$b,
$a
&&
$b)
vrai
$a
$b
être
vrais
«
or
»
«
||
»
($a
or
$b,
$a
||
$b)
vrai
$a
$b
être
vrais
«
xor
»
($a
xor
$b)
vrai
$a
$b
être
vrais
deux
en
même
temps
«!
!»
(!
!$a)
vrai
$a
être
faux.
attention,
and
or
n'ont
même
priorité
(priorité
faible)
&&
||!
!
cours
programmation
php
4.10
opérateur
de
chaîne
avoir
deux
opérateur
de
chaîne
:
«
.
»
concaténer
deux
chaîne
entre
«
.=
»
voir
être
l'opérateur
d'assignation.
$a="bonjour";
$b=$a."
amis";
//
$b
contenir
bonjour
amis
$b.="!
!salut.";
//
$b
contenir
bonjour
amis!
!salut.
4.11
opérateur
de
tableau
pouvoir
«
additionner
»
deux
tableau
entre
avec
«
+
»
:
tableau
de
droite
être
ajouter
tableau
de
gauche.
cours
programmation
php
5
notion
d'expression
en
php,
expression
pouvoir
être
résumer
en
«
avoir
valeur
».
dit,
remarquer
en
php
être
expression.
variable
constante
voir
affecter
valeurs.
valeur
être
l'expression
de
variable
de
constante.
pouvoir
résumer
en
dire
qu'une
expression
représenter
pouvoir
être
évalué.
pouvoir
évaluer
valeurs...
fonction
pouvoir
être
expression
retourner
un
valeur.
dire
qu'une
fonction
avoir
retourner
valeur.
comparaison
être
expression
:
retourner
valeur
booléenne.
calcul
être
expression,
puisqu'une
valeur
être
retournée,
affectée,
calculée.
php
être
orienter
expression
faire
en
php
être
expression.
php
chercher
à
décomposer
être
possible
en
expression
à
évaluer,
pour
optimiser
traitements.
exemples.
$a=2;
distinguer
premier
coup
d'oeil
deux
valeur
:
variable
$a
valeur
2,
variable
$a
être
mettre
à
jour
avec
valeur
or
en
interne
avoir
troisième
valeur
rentrer
en
jeu:
valeur
de
l'assignation,
assigner
à
@ord@
ligne
signifier
en
fait
:
«
$a=2
être
expression
valoir
2
».
$b=$a=2;
assignation
être
analyser
de
droite
à
gauche.
avoir
l'expression
$a=2
valoir
$b
valoir
2
aussi.
c'est
rapide
à
écrire
à
exécuter
$a=2;
$b=2;
$a=$a+3;
php
évaluer
l'expression
$a+3
valeur
de
$a
incrémenter
de
3,
assigner
nouvelle
valeur
à
$a.
$a+=3;
résultat
être
même,
être
rapide
$a
n'est
évaluer
qu'une
seule
fois.
pouvoir
en
arriver
à
avoir
expression
surprenantes
:
$a=2;
$b=$a+=3;
variable
$a
être
incrémenter
de
3
valoir
l'expression
$a+=3
valoir
$b
voir
assigner
valeur
l'expression
valoir
dernière
chose
:
$a?$b:$c
l'expression
$a
être
vrai,
l'expression
$b
être
évaluée,
l'expression
$c
être
évaluée.
cours
programmation
php
$a=true;
$b=2;$c=3;
echo
$a?$b:$c;
//
affiche
2
cours
programmation
php
6
structure
de
contrôle
6.1
if
if(expression)
commander
{
bloc
de
commande
}
else
commander
{
bloc
de
commande
}
avoir
«
elseif
»,
combinaison
if
else.
elseif
en
mot
pouvoir
s'écrire
en
deux
mot
:
résultat
être
même.
pouvoir
écrire
elseif
en
chaîne.
premier
l'expression
être
vrai
être
exécuté.
if(expression)
commander
{
bloc
de
commande
}
elsif(expression)
commander
{
bloc
de
commande
}
elsif(expression)
commander
{
bloc
de
commande
}
...
pouvoir
placer
html
commander
dans
bloc
de
commande.
<?php
if
($a
==
5)
{
?>
a
=
5
<?php
}
?>
pouvoir
utiliser
syntaxe
alternative
:
ouvre
bloc
(juste
après
if,
else
elseif)
avec
«
:
»
deux
points,
fermer
l'instruction
avec
«
endif
».
<?php
if
($a
==
5):
print
"a
=
5";
print
"...";
elseif
($a
==
6):
print
"a
=
6";
print
"!!!
!!!";
else:
print
"a
valoir
5
6";
endif;
?>
6.2
while
6.2.1
while
classique
c'est
boucle
«
»
simple
:
condition
n'est
vraie,
continuer
boucle.
l'expression
être
placer
en
début
de
boucle
:
l'expression
être
fausse
avant
de
rentrer
dans
boucle,
boucle
n'est
exécutée.
while(expression)
commander
{
bloc
de
commande
}
pouvoir
utiliser
syntaxe
alternative
:
while(expression):
commander
{
bloc
de
commande
}
endwhile
6.2.2
do
...
while
c'est
second
possibilité.
dans
cas
commande
bloc
de
commande
être
exécuter
cours
programmation
php
fois,
l'expression
conditionnelle
être
tester
en
fin
de
boucle.
do
{
bloc
de
commande
}
while(expression)
6.3
for
«
for
»
php
être
identique
«
for
»
c.
for(expr1;expr2;expr3)
commander
{
bloc
de
commande
}
«
expr1
»
être
exécuter
à
premier
entrée
dans
boucle.
«
expr2
»
être
exécuter
à
début
d'itération
jusqu'à
l'expression
être
fausse
cas
sortir
de
boucle.
«
expr3
»
être
exécuter
à
fin
de
l'itération.
l'usage
habituel
d'une
boucle
être
de
placer
l'état
initial
en
expr1,
condition
de
sortie
en
expr2
calcul
en
expr3.
effectuer
sorte
de
choses.
//
de
1
à
10
for
($i
=
1;
$i
<=
10;
print
$i,
$i++)
//
infini
for(;;)
//
de
1
à
10
for
($i
=
1;
$i
<=
10;
print
$i,
$i++)
;
pouvoir
employer
syntaxe
alternative
avec
«
:
»
«
endfor
».
for(expr1;expr2;expr3):
commander
{
bloc
de
commande
}
endfor
6.4
foreach
boucle
«
foreach
»
être
l'une
intéressantes
pour
manipulation
de
tableau
de
résultat
de
requête
sql.
permettre
de
lister
tableaux.
disposer
de
deux
syntaxes.
foreach(array_expression
avoir
$value)
commande
foreach(array_expression
avoir
$key
=>
$value)
commande
premier
syntaxe
récupérer
élément
tableau
un
par
un,
séquentiellement.
valeur
de
l'élément
courir
tableau
être
placer
dans
$value.
second
syntaxe
être
identique,
sauf
qu'en
clé
(l'index)
de
l'élément
actuel
être
placer
dans
$key.
attention
:
modifier
valeur
de
$value
(ou
de
$key)
modifier
tableau
boucle
travailler
sur
copie,
référence.
par
contre
dans
second
cas,
disposer
de
clé,
rien
n'empêche
d'assigner
être
à
l'élément
courant.
remarque
:
appel
à
foreach
«
rembobiner
»
tableau
à
premier
élément.
dans
autres
boucles,
falloir
utiliser
«
reset
».
reset($arr);
while
(list(,
$value)
=
each
($arr))
{
echo
"valeur:
$value<br>\n";
}
cours
programmation
php
foreach
($arr
avoir
$value)
{
echo
"valeur:
$value<br>\n";
}
$a
=
array
(
"un"
=>
1,
"deux"
=>
2,
"trois"
=>
3,
"dix-sept"
=>
17
);
foreach($a
avoir
$k
=>
$v)
{
print
"\$a[$k]
=>
$v.\n";
}
6.5
break
continuer
l'instruction
«
break
»
permettre
de
sortir
d'un
for,
while,
foreach
switch.
pouvoir
indiquer
de
de
structure
souhaiter
sortir
être
emboîtées.
l'instruction
«
continue
»
permettre
de
passer
à
l'itération
suivante.
attention
php
conside
switch
boucle,
dans
cas,
réévaluer
switch.
pouvoir
indiquer
à
continuer
de
structure
emboîter
relancer.
6.6
switch
«
switch
»
être
équivalent
à
série
de
if
permettre
de
comparer
avec
grand
nombre
de
valeurs.
switch
($i)
{
case
0:
print
"i
egale
0";
break;
caser
1:
print
"i
egale
1";
break;
caser
2:
print
"i
egale
2";
break;
default:
print
"i
être
inférieur
à
0
supérieur
à
2
»;
}
switch
s'arrête
à
premier
expression
caser
vraie
exécuter
code
suivre
dans
l'ordre
indiqué,
jusqu'à
premier
instruction
break.
s'il
n'y
avoir
de
break,
code
jusqu'à
fin
switch
être
exécuté.
dans
l'exemple
suivant,
$i
valoir
0,
print
être
affichés!
!
switch
($i)
{
case
0:
print
"i
egale
0";
caser
1:
print
"i
egale
1";
caser
2:
print
"i
egale
2";
}
noter
default
devoir
intervenir
en
dernier,
n'a
intérêt.
pouvoir
employer
syntaxe
alternative
avec
«
:
»
«
endswitch
».
cours
programmation
php
switch
($i):
caser
0:
print
"i
egale
0";
break;
caser
1:
print
"i
egale
1";
break;
endswitch
6.7
return
à
d'autres
langages,
«
return
»
n'est
fonction
instruction.
dans
fonction,
return
servir
à
sortir
de
celle-ci
à
retourner
valeur.
dans
script,
sortir
de
celui-ci.
attention
dans
script
inclure
(voir
require
include)
:
return
dans
type
de
code
considérer
qu'il
sortir
de
fonction
«
require
»
«
include
»
sortir
script
de
fonction
dans
code
avoir
être
inclus!
!
return
être
élément
langage
fonction
avoir
besoin
d'utiliser
parenthèses.
6.8
require
include
(_once)
«
require
»
«
include
»
inclure
à
l'endroit
actuel
exécuter
fichier
php.
être
identiques
dans
fonctionnement
à
exception
:
traitement
erreurs.
include
produire
«
warning
»
(le
code
continuer
en
principe
à
s'exécuter)
qu'un
require
produire
«
erreur
fatale
»
(l'exécution
s'arrête).
require
include
être
élément
langage
fonction
avoir
besoin
d'utiliser
parenthèses.
«
require_once
»
«
include_once
»
ressembler
à
homologue
avec
différence.
qu'il
arrive,
fichier
être
inclure
seule
fois.
second
«
require_once
»
apparaître
avec
même
fichier,
l'instruction
être
exécutée.
cours
programmation
php
7
fonction
7.1
syntaxe
porter
syntaxe
d'une
fonction.
function
fonc($arg1,
$arg2,
$arg3,
...,
$argn)
{
bloc
de
commande
return
$valeur
}
fonction
n'a
besoin
d'être
déclarer
avant
d'être
utiliser
(sauf
vouloir
rester
compatible
avec
php3),
moment
qu'elle
apparaître
dans
script.
avoir
deux
exception
:
fonction
être
conditionnelle,
c'est
à
dire
déclarer
dans
if,
fonction
être
déclarer
dans
autre
fonction.
dans
premier
cas
être
inconnue
reste
code
condition
if
n'est
vraie.
dans
second
cas
être
connaître
premier
fonction
être
exécutée.
exemple
tirer
manuel.
pour
premier
cas
:
$makefoo
=
true;
/*
impossible
d'appeler
foo()
ici,
fonction
n'existe
pas.
pouvoir
utiliser
bar()
*/
bar();
if
($makefoo)
{
function
foo
()
{
echo
"je
n'existe
programme
n'est
passer
ici.\n";
}
}
/*
maitenant,
pouvoir
appeler
foo()
$makefoo
être
vrai
*/
if
($makefoo)
foo();
function
bar()
{
echo
"j'existe
dès
début
programme.\n";
}
pour
second
cas
:
function
foo()
{
function
bar()
{
echo
"je
n'existe
foo()
n'est
appelé.\n";
}
}
/*
impossible
d'appeler
bar()
n'existe
pas.
*/
foo();
/*
maintenant,
pouvoir
appeler
bar(),
l'utilisation
de
foo()
l'a
rendre
accessible.
*/
bar();
7.2
argument
pouvoir
passer
d'arguments
souhaiter
à
fonction
php,
de
types.
argument
courir
programmation
php
être
séparer
par
virgules.
par
défaut
être
passer
par
copie.
function
affiche($msg)
{
echo
$msg;
}
être
possible
de
passer
argument
par
référence,
pouvoir
en
changer
valeur
à
l'intérieur
de
fonction.
pour
rajouter
«
&
»
l'argument.
pouvoir
passer
variable
par
référence
en
placer
«
&
»
devant
nom
de
l'appel
de
fonction.
function
modif(&$msg)
{
$msg="coucou";
}
$msg="salut";
modif($msg);
echo
$msg;
//
coucou
pouvoir
définir
valeur
par
défaut
attention,
dans
liste
paramètre
valeur
par
défaut
devoir
être
en
dernier.
function
affiche($nom,
$prenom="toto")
{
echo
"$nom
$prenom";
}
pouvoir
utiliser
nombre
variable
d'arguments
avec
fonction
func_num_args,
func_get_arg
func_get_args.
function
foo()
{
$numargs
=
func_num_args();
echo
"nombre
d'arguments:
$numargs\n";
}
foo
(1,
2,
3);
//
afficher
'nombre
d'arguments:
3'
7.3
valeur
de
retour
retourner
valeur
avec
l'instruction
«
return
».
pouvoir
retourner
type
de
valeurs,
temps.
n'empêche
dans
cas
de
retourner
tableau.
fonction
pouvoir
retourner
référence.
dans
cas
devoir
être
déclarer
avec
«
&
»
devant
nom.
function
carrer
($num)
{
return
$num
*
$num;
}
echo
carrer
(4);
//
afficher
'16'
7.4
fonction
internes
en
fonction
définir
par
l'utilisateur
php
proposer
grand
nombre
de
fonction
internes
couvrir
multitude
de
domaines.
pour
accéder
à
fonction
falloir
appeler
par
nom
module
correspondant
être
compiler
avec
php.
voir
dans
chapitre
suivants
en
utiliser
certaines.
cours
programmation
php
8
gestion
formulaire
en
php
8.1
get
post
but
être
de
récupérer
contenu
champ
d'un
formulaire
html
dans
code
php
pouvoir
traiter.
lorsqu'un
formulaire
être
envoyer
à
script
php,
variables
être
disponibles
dans
script.
formulaire
pouvoir
être
de
type
get
post.
pour
rappel,
dans
formulaire
de
type
get,
information
être
passer
par
l'url
en
clair,
pouvoir
poser
problème
de
limitation
suivre
serveur
(de
256
à
8192
octet
selon
cas).
méthode
post
n'a
genre
de
limitation,
information
être
transmettre
par
conteneur
de
variables
globales
(dans
l'entête)
être
de
cachées.
php
pouvoir
gérer
deux
méthode
de
manière
transparente.
8.2
récupération
par
tableau
champ
de
formulaire
en
php
être
définir
par
nom
valeur.
dans
script,
php
aller
récupérer
nom
valeur
dans
tableau
spéciaux
dire
superglobaux
(accessibles
depuis
partout).
pour
méthode
get,
tableau
être
$_get,
pour
méthode
post
tableau
être
$_post.
souhaiter
soucier
de
méthode,
pouvoir
utiliser
tableau
$_request.
en
index
avoir
nom
champ
de
formulaire
(ou
de
variable
passée
en
url)
en
valeur
valeur
champ.
par
exemple
:
<form
action="foo.php"
method="post">
name:
<input
type="text"
name="username"><br>
email:
<input
type="text"
name="email"><br>
<input
type="submit"
name="submit"
value="submit
me!
!">
</form>
dans
page
php
foo.php
avoir
:
<?php
echo
$_post['username'];
echo
$_request['email'];
?>
imaginer
l'appel
d'une
page
test.php
par
url
:
http://www.monsite.com/test.php?id=1
transmettre
variable
via
url
méthode
implicite
get.
récupérer
«
id
»
dans
code
php
pouvoir
faire
:
<?php
echo
$_get['id'];
echo
$_request['id'];
?>
$_get
contenir
variables
de
type
get.
$_post
contenir
variables
de
type
post.
$_request
contenir
variables
de
type
post
get
variables
de
cookies.
être
possible
de
procéder
en
récupérer
nom
champ
en
variable
sans
passer
par
tableau.
pour
falloir
vérifier
dans
fichier
php.ini
valeur
register_globals
être
à
on.
dans
cas
nom
champ
de
formulaire
être
cours
programmation
php
nom
variables
:
<?php
echo
$username;
echo
$email;
?>
8.3
récupération
directe
valeur
être
à
pour
diverses
raison
(sécurité,
droit,
etc)
souhaitez/pouvez
modifier,
exister
de
méthode.
fonction
«
import_request_variables
»
permettre
d'effectuer
chose.
fonction
prendre
un
deux
paramètres,
second
être
optionnel.
après
exécution,
récupérer
variables
sans
passer
par
un
tableau.
premier
paramètre
être
type
de
variables
qu'on
souhaiter
récupérer
:
–
p
/
p
:
variables
de
type
post
–
g
/
g
:
variables
de
type
get
–
c
/
c
:
variables
de
type
cookie
pouvoir
cumuler
l'ensemble
attention
à
l'ordre!
!le
second
paramètre
être
préfixe
qu'on
souhaiter
donner
nom
variables
qu'on
aller
récupérer.
deux
exemple
:
<?php
import_request_variables("p");
echo
$username;
?>
<?php
import_request_variables("p","post_");
echo
$post_username;
?>
pouvoir
passer
par
fonction
«
extract
»
permettre
d'exporter
tableau
en
variables.
pour
tableau
$_post
:
<?php
extract($_post);
echo
$username;
?>
8.4
utiliser
tableau
formulaire
permettre
d'utiliser
liste
à
choix
multiples
php
devoir
récupérer
l'ensemble
choix
de
l'utilisateur.
pour
falloir
utiliser
tableaux.
<form
action="<?php
echo
$http_server_vars['php_self'];
?>"
method="post">
name:
<input
type="text"
name="personal[name]"><br>
email:
<input
type="text"
name="personal[email]"><br>
beer:
<br>
<select
multiple
name="vin[]">
<option
value="bordeaux">bordeaux</option>
<option
value="beaujolais">beaujolais</option>
<option
value="loire">loire</option>
</select><br>
courir
programmation
php
<input
type="hidden"
name="action"
value="submitted">
<input
type="submit"
name="submit"
value="submit
me!
!">
</form>
dans
l'exemple
précédent
par
exemple
sélectionner
vin
(ex
:
bordeaux
beaujolais)
avoir
dans
$vin[0]
bordeaux
$vin[1]
beaujolais.
cours
programmation
php
9
date
heure
9.1
localisation
format
de
date
d'heure
(format
langue)
être
dépendant
de
l'environnement
d'exécution
code
php.
plupart
serveur
web
incorporer
php
être
configurer
en
langue
anglaise
avec
gestion
information
de
localisation
en
anglais.
pouvoir
être
préférable
de
passer
en
français
pour
site
francophone
simplifier
tâche.
pouvoir
effectuer
avec
fonction
«
setlocale
».
deux
exemple
:
un
sous
nt/2000
autre
sous
linux.
if
(substr(php_uname(),
0,
7)!
!=
"windows")
{
setlocale(lc_time,"fr_fr@euro");
}
else
{
setlocale(lc_time,"fr");
}
dans
exemple,
vérifier
à
système
avoir
à
faire
(fonction
php_uname)
en
fonction
résultat
passer
en
localisation
française
selon
deux
méthodes.
après
changement,
appel
fonction
retourner
jour
de
semaine
mois
faire
en
français.
9.2
récupérer
date
l'heure
9.2.1
date()
simple
être
d'utiliser
fonction
«
date
»
retourner
l'heure
locale
sous
forme
d'une
chaîne
de
caractère
à
préciser
en
premier
paramètre.
en
second
paramètre
pouvoir
préciser
«
timestamp
»
souhaiter
l'heure
actuelle.
pour
récupérer
date
jour
:
echo
date("d/m/y");
//
06/01/2004
caractère
utilisables
(documentation
php)
:
•
avoir
-
"am"
(matin)
"pm"
(après-midi)
•
a
-
"am"
(matin)
"pm"
(après-midi)
•
b
-
heure
internet
swatch
•
d
-
jour
mois,
sur
deux
chiffre
(éventuellement
avec
zéro)
:
"01"
à
"31"
•
d
-
jour
de
semaine,
en
trois
lettre
(et
en
anglais)
:
par
exemple
"fri"
(pour
vendredi)
•
f
-
mois,
textuel,
version
longue;
en
anglais,
i.e.
"january"
(pour
janvier)
•
g
-
heure,
format
12h,
sans
zéro
initiaux
i.e.
"1"
à
"12"
•
g
-
heure,
format
24h,
sans
zéro
initiaux
i.e.
"0"
à
"23"
•
h
-
heure,
format
12h,
"01"
à
"12"
•
h
-
heure,
format
24h,
"00"
à
"23"
•
i
-
minutes;
"00"
à
"59"
•
i
(i
majuscule)
-
"1"
l'heure
d'été
être
activée,
"0"
l'heure
d'hiver
.
•
j
-
jour
mois
sans
zéro
initiaux:
"1"
à
"31"
cours
programmation
php
•
l
-
('l'
minuscule)
-
jour
de
semaine,
textuel,
version
longue;
en
anglais,
i.e.
"friday"
(pour
vendredi)
•
l
-
booléen
pour
savoir
l'année
être
bissextile
("1")
("0")
•
m
-
mois;
i.e.
"01"
à
"12"
•
m
-
mois,
en
trois
lettre
(et
en
anglais)
:
par
exemple
"apr"
(pour
avril)
•
n
-
mois
sans
zéro
initiaux;
i.e.
"1"
à
"12"
•
o
-
différence
d'heures
avec
l'heure
de
greenwich,
exprimer
en
heures;
i.e.
"+0200"
•
r
-
format
de
date
rfc
822;
i.e.
"thu,
21
dec
2000
16:01:07
+0200"
(ajouté
en
php
4.0.4)
•
s
-
secondes;
i.e.
"00"
à
"59"
•
s
-
suffixe
ordinal
d'un
nombre,
en
anglais,
sur
deux
lettre
:
i.e.
"th",
"nd"
•
t
-
nombre
de
jour
dans
mois
donné,
i.e.
"28"
à
"31"
•
t
-
fuseau
horaire
de
machine
;
i.e.
"met"
•
u
-
secondes
depuis
époque
•
w
-
jour
de
semaine,
numérique,
i.e.
"0"
(dimanche)
to
"6"
(samedi)
•
w
-
numéro
de
semaine
dans
l'année
iso-8601
:
semaine
commencer
lundi
(ajouté
en
php
4.1.0)
•
-
année,
4
chiffres;
i.e.
"1999"
•
-
année,
2
chiffres;
i.e.
"99"
•
z
-
jour
de
l'année;
i.e.
"0"
à
"365"
•
z
-
décalage
horaire
en
second
(i.e.
"-43200"
à
"43200")
autre
caractère
pouvoir
être
employer
être
interprété.
désirer
employer
l'un
de
caractères,
falloir
verrouiller
avec
antislash.
attention
avec
fonction
resultat
être
en
anglais.
pouvoir
récupérer
timestamp
actuel
avec
fonction
«
time
».
commande
suivante
avoir
même
effet
précédente
:
echo
date("d/m/y",
time());
//
06/01/2004
9.2.2
date
locale
strftime()
pour
formater
résultat
en
local
(pour
tenir
compte
de
localisation)
falloir
utiliser
fonction
«
strftime
»
tenir
compte
de
langue.
avoir
résultat
en
français.
premier
paramètre
être
chaîne
de
formatage.
second
être
éventuel
timestamp.
•
%a
-
nom
abréger
jour
de
semaine
(local).
•
%a
-
nom
complet
jour
de
semaine
(local).
•
%b
-
nom
abréger
mois
(local).
•
%b
-
nom
complet
mois
(local).
•
%c
-
représentation
préférer
pour
date
heures,
en
local.
•
%c
-
numéro
de
siècle
(l'année,
diviser
par
100
arrondir
entre
00
99)
cours
programmation
php
•
%d
-
jour
mois
en
numérique
(intervalle
01
à
31)
•
%d
-
identique
à
%m/%d/%y
•
%e
-
numéro
jour
mois.
chiffre
être
précéder
d'un
espace
(de
'
1'
à
'31')
•
%h
-
identique
à
%b
•
%h
-
heure
de
journée
en
numérique,
sur
24-heures
(intervalle
de
00
à
23)
•
%i
-
heure
de
journée
en
numérique,
sur
12-
heure
(intervalle
01
à
12)
•
%j
-
jour
de
l'année,
en
numérique
(intervalle
001
à
366)
•
%m
-
mois
en
numérique
(intervalle
1
à
12)
•
%m
-
minute
en
numérique
•
%n
-
newline
character
•
%p
-
àm'
oùpm'
en
fonction
de
l'heure
absolue,
en
fonction
valeur
enregistrer
en
local.
•
%r
-
l'heure
format
a.m.
p.m.
•
%r
-
l'heure
format
24h
•
%s
-
seconder
en
numérique
•
%t
-
tabulation
•
%t
-
l'heure
actuelle
(égal
à
%h:%m:%s)
•
%u
-
numéro
de
jour
dans
semaine,
de
1
à
(1
représenter
lundi)
•
%u
-
numéro
de
semaine
dans
l'année,
en
considérer
premier
dimanche
de
l'année
premier
jour
de
premier
semaine.
•
%v
-
numéro
de
semaine
définir
dans
l'iso
8601:1988,
sous
forme
décimale,
de
01
à
semaine
1
être
premier
semaine
avoir
de
4
jour
dans
l'année
courante,
lundi
être
premier
jour.
•
%w
-
numéro
de
semaine
dans
l'année,
en
considérer
premier
lundi
de
l'année
premier
jour
de
premier
semaine
•
%w
-
jour
de
semaine,
numérique,
avec
dimanche
=
0
•
%x
-
format
préférer
de
représentation
de
date
sans
l'heure
•
%x
-
format
préférer
de
représentation
de
l'heure
sans
date
•
%y
-
l'année,
numérique,
sur
deux
chiffre
(de
00
à
99)
•
%y
-
l'année,
numérique,
sur
quatre
chiffre
•
%z
-
fuseau
horaire,
nom
abréviation
•
%%
-
caractèrè%'
littéral
9.2.3
retour
par
tableau
getdate()
fonction
«
getdate
»
permettre
de
récupérer
date
l'heure
actuels
(avec
timestamp
en
paramètre)
sous
forme
de
tableau
indexer
selon
valeur
suivantes
:
•
"seconds"
-
second
•
"minutes"
-
minute
cours
programmation
php
•
"hours"
-
heure
•
"mday"
-
jour
mois
•
"wday"
-
jour
de
semaine,
numérique.
0:
dimanche
jusqu'à
6:
samedi
•
"mon"
-
mois,
numérique
•
"year"
-
année,
numérique
•
"yday"
-
jour
de
l'année,
numérique;
i.e.
"299"
•
"weekday"
-
jour
de
semaine,
texte
complet
(en
anglais);
i.e.
"friday"
•
"month"
-
mois,
texte
complet
(en
anglais);
i.e.
"january"
$aujourdhui
=
getdate();
$mois
=
$aujourdhui['month'];
$mjour
=
$aujourdhui['mday'];
$annee
=
$aujourdhui['year'];
echo
"$mjour/$mois/$annee";
9.2.4
l'heure
localtime()
pour
l'heure
pouvoir
utiliser
fonction
«
localtime
»
pouvoir
prendre
paramètre
timestamp
retourner
tableau
indexer
selon
valeur
suivantes
;
•
"tm_sec"
-
second
•
"tm_min"
-
minute
•
"tm_hour"
-
heure
•
"tm_mday"
-
jour
mois
•
"tm_mon"
-
mois
de
l'année
•
"tm_year"
-
année,
incompatible
an
2000
•
"tm_wday"
-
jour
de
semaine
•
"tm_yday"
-
jour
de
l'année
•
"tm_isdst"
-
est-ce
l'heure
d'hiver
avoir
prendre
effet?
9.3
récupérer
n'importe
date
pouvoir
récupérer
n'importe
dater
en
timestamp
chaîne.
pouvoir
pour
utiliser
fonction
«
strtotime
».
prendre
paramètre
chaîne
de
texte
en
anglais
qu'elle
essayer
de
convertir
en
timestamp.
exemples.
echo
strtotime("now");
//
timestamp
actuel
echo
strtotime("-1
day");
//
echo
strtotime("+1
day");
//
echo
strtotime("11
september
2001");
//
11
septembre
2001
echo
strtotime("+1
year
+2
weeks
+3
days");
//
dans
1
an
2
semaine
3
jour
cours
programmation
php
10
mysql
10.1
présentation
mysql
être
sgbdr
:
«
système
de
gestion
de
base
de
donnée
relationnel
»
définir
lui-
même
être
«
base
de
donnée
open
source
populaire
monde
».
rien
ça.
c'est
vrai!
!edité
par
société
mysql
ab,
mysql
être
produit
open
source
libre
d'utilisation
sous
licence
gpl
pour
projet
libres.
licence
commerciale
être
nécessaire
dans
autres
cas,
souhaiter
redistribuer
mysql
avec
produit
libre
souhaiter
support
technique.
version
de
production
actuelle
de
mysql
être
version
4
(4.0.17
à
l'écriture
de
support),
grande
majorité
serveur
hébergeur
être
dans
dernières
version
de
mysql
3.23
(3.23.58).
future
version
en
développement
être
5.0.0
n'est
à
utiliser
en
production.
principales
qualité
de
mysql
être
simplicité
rapidité.
principale
défaut
être
manque
de
fonctionnalité
dire
avancer
(dans
version
précédentes)
:
clé
étrangères,
procédure
stockées,
trigger
selects
imbriquer
notamment.
devoir
occulter
puissance
avec
l'ajout
de
fonctionnalité
avancer
syntaxe
sql
étendre
(replace,
limit,
delete),
index
de
recherche
«
fulltext
»
permettre
de
créer
moteur
de
recherche,
...
prochaine
version
stable
(5.0)
combler
lacune
précédentes
version
avec
support
complet
de
syntaxe
sql
ansi-99.
10.2
outil
10.2.1
phpmyadmin
s'il
rester
entendre
possible
d'utiliser
mysql
en
ligne
de
commande,
«
sqlplus
»
de
oracle,
être
à
l'aise
avec
environnement
intuitif.
ainsi,
l'outil
phpmyadmin
être
interface
web
à
mysql
permettre
d'effectuer
plupart
tâche
de
maintenance
d'utilisation.
solution
fonctionner
depuis
n'importe
navigateur
être
indépendante
de
machine.
accéder
à
phpmyadmin
par
l'url
http://server_name/mysql.
cours
programmation
php
10.2.2
mysqlcc
mysqlcc
(mysql
control
center)
être
front-end
graphique
officiel
de
mysql,
développer
par
même
société.
baser
sur
e
toolkit
qt,
être
disponible
sous
windows,
unix
(linux)
sur
macos.
permettre
l'administration
serveur,
gestion
base
tables,
l'exécution
de
requête
sql
interactives
avec
coloration
syntaxique...
10.3
créer
base
a
partir
de
l'écran
d'accueil
de
phpmyadmin,
saisir
nom
de
base
dans
«
créer
base
de
donnée
».
falloir
de
préférence
choisir
nom
simple
intuitif.
cliquer
sur
«
créer
».
après
création
nouvelle
page
s'affiche
:
c'est
page
principale
d'administration
de
base.
en
être
présents
après
l'exécution
d'une
commander
résultat
de
celle-ci.
écran
permettre
l'exécution
de
commande
sql,
travail
sur
tables.
10.4
utilisateur
droit
dans
menu
de
gauche,
choisir
«
-
»
(tiret)
correspondre
à
racine
administration
serveur
mysql
par
lui-même.
dans
nouvelle
page,
choisir
«
utilisateurs
privilège
».
page
suivante
permettre
d'ajouter
un
utilisateur.
falloir
faire
attention
à
chose
:
serveur.
en
effet,
suivre
configuration
initiale
(sur
linux
par
exemple)
droit
dépendre
de
façon
avoir
être
accéder
base.
localhost
127.0.0.1
être
identiques,
base
être
appeler
depuis
autre
ip
autre
nom,
l'utilisateur
n'aura
droits.
en
cas
de
doute,
suffire
de
choisir
«
serveur
».
pour
créer
administrateur,
être
de
donner
privilèges.
pour
utilisateur
«
standard
»
(requêtes
de
sélection,
d'ajout,
de
mise
à
jour
de
suppression
d'enregistrements)
choisir
privilège
select,
insert,
update
delete.
cours
programmation
php
fois
l'utilisateur
créé,
base
être
présentes,
pouvoir
affiner
droit
pour
bases.
liste
utilisateur
de
droit
sur
base
être
afficher
en
haut.
choisir
«
modifier
»
pouvoir
affiner
sélection
passer
par
«
autres
privilège
»
:
droit
sur
bases,
table
colonnes.
10.5
créer
modifier
table
retourner
par
menu
de
gauche
dans
base
existante.
dans
l'écran
d'administration
saisir
(bas
de
page)
nom
de
table
nombre
de
champ
(colonnes).
être
possible
après
coup
d'en
rajouter
d'en
supprimer.
choisir
«
créer
».
l'étape
suivante
consister
à
définir
table.
intéressons-nous
différents
type
de
champ
possibles.
10.5.1
type
numériques
10.5.1.1
type
entiers
pour
entier
pouvoir
ajouter
mot
clé
«
unsigned
»
:
signé.
attention
type
bigint
avoir
limitation
(voir
documentation
mysql).
entre
parenthèse
:
valeur
unsigned.
être
possible
de
fournir
précision
d'affichage
(nombre
de
chiffres).
par
exemple
taille
de
2
pour
tinyint
équivaloir
à
valeur
de
0
à
•
tinyint
:
-128
à
127
(0
à
255)
•
smallint
:
-32768
à
32767
(0
à
65535)
•
mediumint
:
-8388608
à
8388607
(0
à
16777215)
•
int
integer
:
-2147483648
à
2147483647
(0
à
4294967295)
•
bigint
:
-9223372036854775808
à
9223372036854775807
(0
à
18446744073709551615)
10.5.1.2
type
réels
(flottants)
•
float
:
nombre
en
virgule
flottante
•
double,
double
precision,
real
:
nombre
en
virgule
flottante
double-précision.
•
decimal,
dec,
numeric
:
spécial,
valeur
être
«
unpacked
»
:
c'est
chaîne
texte
10.5.1.3
type
booléens
•
bit,
bool,
boolean
(depuis
4.1)
:
bit,
équivaloir
à
tinyint(1)
10.5.2
type
caractère
type
mériter
d'explications.
cours
programmation
php
10.5.2.1
type
char
char
:
chaîne
de
caractère
taille
pouvoir
être
de
1
à
255
caractères.
taille
être
définir
à
création
de
table.
dans
table,
champ
prendre
nombre
de
caractère
indiqué,
même
taille
réelle
être
inférieure.
varchar
:
chaîne
de
caractère
taille
maximale
pouvoir
être
de
1
à
255
caractère
longueur
pouvoir
être
variable.
mysql
stocker
en
octet
contenir
longueur
de
chaîne.
c'est
optimisation,
chaîne
de
100
caractère
aller
prendre
100+1
octet
en
place
dans
table.
pouvoir
rajouter
définition
binary.
par
défaut
champ
char
varchar
être
trier
sans
tenir
compte
de
casse.
l'attribut
binary
permettre
de
trier
en
tenant
compte
de
casse
selon
machine.
avec
champs,
espace
finaux
être
supprimés.
10.5.2.2
type
text
type
text
blob
permettre
de
stocker
quantité
variables
de
texte
selon
définitions.
«
l
»
être
longueur
texte
:
•
tiny(blob/text)
:
l+1
octet
avec
l<2^8
•
blob/text
:
l+2
octet
avec
l<2^16
•
medium(blob/text)
:
l+3
octet
avec
l<2^24
•
long(blob/text)
:
l+4
octet
avec
l<2^32
text
blob
s'utilisent
de
manière
identique
falloir
respecter
rêgles
suivantes
:
•
de
tris,
champ
blob
tenir
compte
de
casse,
champ
text.
•
pouvoir
faire
de
recherche
fulltext
sur
champ
de
type
blob.
falloir
utiliser
champ
text.
•
champ
de
type
text
blob
prendre
de
valeur
par
défaut.
•
espace
finaux
être
supprimés.
10.5.2.3
type
enum
champ
de
type
enum
pouvoir
contenir
qu'une
chaîne
de
texte
par
prédéfinies
à
création
de
table.
exemple
:
create
tabler
test
(
id
int
not
null
auto_increment,
c_enum
enum('oui','non'),
primary
key
(id)
);
cours
programmation
php
champ
c_enum
pouvoir
prendre
deux
valeur
:
oui
non.
tenter
d'y
mettre
autre
chose
:
insert
into
text
(c_enum)
values('toto');
dans
cas
chaîne
vide
être
insérer
à
place.
champ
être
déclarer
not
null,
valeur
par
défaut
devenir
premier
de
liste
d'énumération.
10.5.2.4
type
set
type
set
ressembler
type
enum
sauf
champ
pouvoir
avoir
valeur
parmi
liste
prédéfinie
à
création
de
table.
dans
type
enum
seule
valeur
être
autoriser
dans
champ.
avec
type
set,
valeur
séparer
par
espace
être
autorisées.
create
tabler
test
(
id
int(11)
not
null
auto_increment,
c_set
set('oui','non'),
primary
key
(id)
);
insert
into
test
(c_set)
valoir
('oui,non');
insert
into
test
(c_set)
valoir
('non,oui');
insert
into
test
(c_set)
valoir
('oui);
effectuer
recherche
d'un
élément
set
avec
like,
avec
fonction
find_in_set
:
select
*
from
test
where
c_set
like
'%oui%';
select
*
from
test
where
find_in_set('oui',c_set)>0;
10.5.3
type
dater
attention
avec
date
:
logique
de
mysql
être
de
laisser
développeurs
soin
de
contrôler
validité
de
dates.
mysql
autoriser
l'enregistrement
d'une
date
de
type
2004-02-30!
!
seuls
test
effectuer
être
validité
mois
(entre
0
12)
validité
jour
(entre
0
31).
zéro
(0)
être
autoriser
pour
raison
pratiques:
stockage
de
l'année,
de
l'année/mois
par
exemple.
autres
information
:
•
mysql,
dans
comparaison
notamment,
essayer
«
d'interpréter
»
format
de
date
qu'on
passe.
c'est
cas
pour
comparaison
entre
champ
de
type
date
champ
texte.
dans
plupart
cas
résultat
être
attendu
attention
de
formalisme.
•
date
devoir
être
donner
de
préférence
format
année-mois-jour.
l'année
devoir
apparaître
en
premier.
dans
cas
d'un
année-jour-mois
attention
:
mysql
pouvoir
deviner
2004-02-05
être
5
février
2
mai...
•
date
être
utiliser
dans
calcul
numérique,
être
convertir
en
nombre
(timestamp).
•
valeur
illégale
être
transmise,
c'est
valeur
zéro
(0)
être
retenue.
valeur
zéro
dépendre
type
de
champ.
•
gestion
de
l'an
2000
faire
:
•
dans
cas
d'années
à
4
chiffres,
souci.
valoir
utiliser
cours
programmation
php
année
sur
4
chiffres.
•
dans
cas
d'une
année
à
deux
chiffes,
00-69
être
convertir
en
2000-2069,
70-99
être
convertir
en
1970-1999.
10.5.3.1
format
supporter
•
aaaa-mm-jj
hh:mm:ss
aa-mm-jj
hh:mm:ss.
séparateur
pouvoir
être
n'importe
:
aaaa/mm/jj
hh.mm.ss
être
valable
•
aaaa-mm-jj
aa-mm-jj,
même
remarque
pour
séparateurs.
•
aaaammjjhhmmss
aammjjhhmmss
chaîne
nombre
avoir
signification
en
dater
•
aaaammjj
aammjj,
même
remarque
10.5.3.2
type
datetime
type
datetime
permettre
de
stocker
date
l'heure
sous
format
aaaa-mm-jj
hh:mm:ss.
zéro
être
0000-00-00
00:00:00.
10.5.3.3
type
date
avec
type
seule
date
être
stocker
format
aaaa-mm-jj.
zéro
être
0000-00-00.
10.5.3.4
type
timestamp
type
timestamp
permettre
de
stocker
timestamp
(heure
courante)
d'un
enregistrement
de
donnée
avec
insert
update.
table
disposer
d'un
champ
timestamp,
de
l'ajout
de
mise
à
jour
d'un
celui-ci
être
mettre
à
jour
pour
ligne
d'enregistrement.
colonne
n'a
besoin
d'être
spécifiée.
spécifie,
pouvoir
mettre
n'importe
valeur.
create
tabler
test
(
id
int(11)
not
null
auto_increment,
c_ts
timestamp(14)
not
null,
c_txt
varchar(10)
not
null
default
'',
primary
key
(id)
)
insert
into
test
(c_txt)
values('toto');
select
c_ts
from
test;
20040112143212
update
test
set
c_txt='truc';
select
c_ts
from
test;
20040112143339
remarquer
résultat
retourner
par
mysql
sur
colonne
timestamp
n'est
valeur
timestamp
unix
(bien
en
interne)
valeur
formatée.
par
défaut
timestamp
courir
programmation
php
retourner
valeur
(numérique)
sur
14
caractères.
pouvoir
choisir
taille
à
création
de
table
:
•
timestamp
timestamp(14)
:
aaaammjjhhmmss
•
timestamp(12)
:
aammjjhhmmss
•
timestamp(10)
:
aammjjhhmm
•
timestamp(8)
:
aaaammjj
•
timestamp(6)
:
aammjj
•
timestamp(4)
:
aamm
•
timestamp(2)
:
aa
avec
formats,
spécifier
l'année
mois
jour
même
avec
timestamp
de
4
de
2
date
être
invalide.
10.5.3.5
type
time
type
time
pouvoir
être
utiliser
pour
stocker
information
horaire.
format
être
hh:mm:ss
hhh:mm:ss
valeur
pouvoir
être
négative.
valeur
maximales
possibles
aller
de
-838:59:59
à
838:59:59.
time
servir
qu'à
stocker
heure
de
journée
intervalle
durée
expliquer
plage
horaire.
accéder
:
d
hh:mm:ss.fraction
:
d
être
jour.
fraction
n'est
stockée.
:
hh:mm:ss,
hh:mm,
d
hh:mm:ss,
d
hh:mm,
d
hh,
d
ss,
hhmmss,
.ss,
mmss,
...
10.5.3.6
type
year
type
year
stocker
l'année,
sur
plage
aller
de
1901
à
l'interprétation
valeur
à
deux
chiffre
soumettre
à
l'interprétation
de
gestion
de
l'an
10.5.4
création
:
syntaxe
sql
utiliser
commande
sql
create.
create
tabler
[if
not
exist]
nom_table
(
champ1
type
[not
null|
null]
[default
valeur_defaut]
[auto_increment]
[primary
key],
...,
primary
key(nom_champ),
key
[nom]
(col1,
col2,
...),
index
[nom]
(col1,
col2,
...),
unique
[index]
[nom]
(col1,
col2,
...),
fultext
[index]
[nom]
(col1,
col2,
...)
)
type=type_table;
noter
cours
programmation
php
•
key
index
être
synonymes.
•
primary
key
être
index
unique
colonne
devoir
être
not
null
•
primary
key
pouvoir
contenir
colonnes.
dans
cas,
primary
key
devoir
apparaître
niveau
de
définition
d'une
colonne
syntaxe
primary
key(cols,...)
devoir
être
utiliser
•
pouvoir
avoir
qu'un
seul
index
primary
key,
index
unique.
•
application
vouloir
obtenir
primary
key
d'une
table
qu'il
n'existe
pas,
mysql
retourner
premier
index
unique
trouvé.
•
donner
de
nom
à
index,
celui-ci
être
générer
en
prendre
nom
de
premier
colonne
de
l'index
suivre
d'un
suffixe
numérique
(col_1,
col_2,
...).
•
être
déconseillé,
pouvoir
établir
index
sur
colonne
text
blob.
dans
cas
falloir
spécifier
longueur
d'index.
par
exemple
:
create
tabler
f_message
(
id_message
int(10)
unsigned
not
null
auto_increment,
id_msg_initial
int(11)
unsigned
not
null
default
'0',
id_msg_prec
int(10)
unsigned
not
null
default
'0',
id_forum
int(10)
not
null
default
'0',
login
varchar(20)
not
null
default
'',
dater
datetime
not
null
default
'0000-00-00
00:00:00',
sujet
varchar(200)
not
null
default
'',
texte
text,
primary
key
(id_message),
key
precedent
(id_msg_prec),
key
login
(login),
key
forum
(id_forum),
key
initial
(id_msg_initial),
fulltext
key
ft1
(sujet,texte)
)
type=myisam;
10.5.5
type
de
table
(myisam
innodb)
type
de
table
être
particulier
à
mysql.
type
par
défaut
être
«
myisam
»,
gestionnaire
de
table
originel
de
mysql,
simple
rapide,
correspondre
à
majorité
besoins.
second
type
principal
être
«
innodb
»
permettre
gestion
transaction
verrouillage
données.
«
commettre
»,
«
rollback
»,
restauration
après
crash,
contraintes
d'intégrité
avec
clé
étrangères
être
possibles.
create
tabler
parent(id
int
not
null,
primary
key
(id))
type=innodb;
create
tabler
child(id
int,
parent_id
int,
index
par_ind
(parent_id),
foreign
key
(parent_id)
references
parent(id)
delete
set
null
)
type=innodb;
pouvoir
utiliser
clause
«
delete
cascade
»
«
delete
set
null
».
règles
être
à
respecter
pour
l'utilisation
:
cours
programmation
php
•
avec
delete
cascade,
ligne
de
table
parente
être
supprimée,
ligne
correspondantes
à
clé
étrangère
être
supprimer
dans
table
fille.
dans
l'exemple,
suppression
d'un
enregistrement
de
table
«
parent
»
supprimer
enregistrement
de
table
«
child
»
«
parent_id
»
être
égal
«
id
»
de
l'enregistrement
de
table
«
parent
»
supprimé.
•
avec
delete
set
null,
enregistrement
fils
être
supprimés,
colonne
de
clé
étrangère
(ici
parent_id)
prendre
valeur
null.
•
index
devoir
exister
pour
clé
parente
clé
fille.
10.5.6
index
fulltext
10.5.6.1
création
dans
dernières
version
(3.23.23
supérieures)
mysql
permettre
l'indexation
recherche
sur
champ
de
type
text.
pouvoir
créer
moteur
de
recherche
rapidement.
pour
falloir
créer
index
«
fulltext
»
en
texte
entier,
mot
champ
texte
être
en
fait
indexé.
index
fulltext
fonctionner
qu'avec
champ
de
type
text
(pas
blob)
varchar
sur
table
de
type
myisam
uniquement.
créer
index
fulltext.
table
exister
:
create
fulltext
index
ft1
f_message
(sujet,texte);
a
création
de
table,
rajouter
ligne
de
création
d'index
:
fulltext
key
ft1
(sujet,texte)
pouvoir
préciser
colonne
dans
genre
d'index.
attention
:
de
recherche
avoir
créer
index
sur
deux
colonnes,
pouvoir
rechercher
sur
seul
deux
colonne
en
même
temps...
dans
cas
falloir
créer
index
fulltext.
10.5.6.2
recherche
effectuer
recherche
avec
fonction
match()
against().
fonction
match
permettre
de
préciser
sur
colonne
effectuer
recherche,
fonction
against
mot
recherchés.
select
id_message
from
f_message
where
match(sujet,texte)
against('linux
nvidia');
requête
aller
effectuer
recherche
sur
mot
'linux'
'nvidia'
dans
colonne
'sujet'
'texte'.
aller
retourner
id
message
correspondants
avec
pertinents
en
premier
(ceux
correspondre
à
recherche).
être
devoir
fait
match
être
dans
clause
where.
pertinence
être
déterminer
par
mysql
selon
critère
(un
opaques
de
même)
nombre
de
mot
dans
ligne,
nombre
de
mot
uniques
dans
ligne,
longueur
de
ligne.
c'est
fonction
match
retourner
pertinence
sous
forme
d'un
flotter
supérieur
égale
à
cours
programmation
php
zéro.
zéro
signifier
pertinence
nulle
(pas
de
correspondance).
valeur
être
élever
résultat
être
pertinent.
select
id_message,
match(sujet,texte)
against('linux
nvidia')
from
f_message;
requête
récupérer
en
second
colonne
valeur
de
pertinence.
celle-ci
n'est
classer
n'y
avoir
de
where
de
order
by.
dernière
méthode
permettre
de
récupérer
champ
pertinence
trier
par
ordre
de
pertinence.
select
id_message,sujet
match
(sujet,texte)
against
('linux
nvidia')
from
f_messages
where
match
(sujet,texte)
against
('linux
nvidia');
10.5.6.3
recherche
booléenne
version
4.x
de
mysql
avoir
introduire
notion
de
recherche
booléenne
permettre
d'affiner
recherches.
select
id_message
from
f_message
where
match(sujet,texte)
against
('+linux
+nvidia
+ati'
in
boolean
mode);
signification
caractère
supplémentaires
•
+
:
mot
devoir
être
présent
dans
enregistrement
retourner
•
-
:
mot
devoir
être
présent
dans
enregistrement
retourner
•
>
<
:
valorisation
mot.
>toto
<titi
valoriser
toto
titi
dans
recherche
•
(
)
:
grouper
série
de
mot
•
~
:
négation
d'un
mot.
-,
mot
être
de
prendre
en
compte
avec
pertinence
négative.
•
*
:
tronquage
d'un
mot
:
bon*
=>
bonjour,
bonsoir
...
•
guillemet
«
"
»
:
chaîne
recherchée
quelle.
10.6
mysql
php
10.6.1
connexion
à
base
de
donnée
deux
étape
être
nécessaires
de
simplicité.
second
n'est
obligatoire
pratique
dans
cas
travailler
sur
seule
base
de
donnée
dans
page.
10.6.1.1
connexion
serveur
utiliser
fonction
mysql_connect().
fonction
prendre
(au
minimum)
trois
paramètre
:
serveur
(hostname)
l'utilisateur
mot
de
passe.
$b_host="sql.tf-data.net"
$b_user="toto";
$b_pass="cret1";
cours
programmation
php
$cnx=mysql_connect($b_host,
$b_user,
$b_pass);
if(!
!$cnx)
die
("erreur
de
connexion
à
mysql");
10.6.1.2
choix
d'une
base
choisir
base
de
donnée
par
défaut
avec
fonction
mysql_select_db().
prendre
minimum
paramètre,
nom
de
base.
second
paramètre
optionnel
être
ressource
retourner
par
mysql_connect,
en
cas
de
connexion
sur
serveur
mysql.
par
défaut,
fonction
prendre
dernière
connexion
ouverte
(celle
dernier
mysql_connect
exécuté).
$b_base="slyunix";
$db=msql_select_db($b_base);
if(!
!$db)
die("erreur
de
connexion
à
base
$b_base");
10.6.1.3
fermeture
d'une
connexion
fermer
connexion
à
mysql
avec
fonction
mysql_close().
dans
cas
de
connexion
persistantes
(voir
à
point)
fonction
n'est
obligatoire
php
connexion
à
fin
d'un
script.
mysql_close($cnx);
10.6.1.4
séquence
complète
pour
base
$b_host="sql.tf-data.net"
$b_user="toto";
$b_pass="cret1";
$b_base="slyunix";
mysql_connect($b_host,
$b_user,
$b_pass)
die("erreur
de
connexion
à
mysql");
mysql_select_db($b_base)
die("erreur
à
selection
de
$b_base);
mysql_close();
10.6.2
requête
10.6.2.1
exécuter
requête
exécuter
requête
sql
avec
fonction
mysql_query().
fonction
prendre
paramètre
:
requête
sql
sous
forme
de
chaîne.
fonction
retourner
false
en
cas
d'échec
(colonne
tabler
invalide,
droit
insuffisants,
de
connexion,
etc).
attention
:
n'est
l'appel
à
mysql_query()
n'a
retourner
d'erreur
fonction
retourner
ligne
de
résultat
dans
cas
d'un
select
par
exemple.
enfin,
requête
sql
devoir
finir
par
un
point-virgule.
requête
pouvoir
être
de
n'importe
type
(selection,
mettre
à
jour,
destruction,
etc).
dans
cas
d'un
select,
show,
explain
describe,
mysql_query()
retourner
ressource
être
utiliser
pour
lire
résultat.
$result=mysql_query("select
id_message,
sujet
from
f_message");
courir
programmation
php
10.6.2.2
nombre
de
ligne
affecter
dans
cas
d'un
delete,
insert,
replacer
update,
pouvoir
connaître
nombre
de
ligne
affecter
(modifiées)
par
requête
à
l'aide
de
fonction
mysql_affected_rows().
$result=mysql_query("delete
from
f_message
where
login='toto'");
if($result)
echo
mysql_affected_rows()."
enregistrement
supprimés";
10.6.2.3
nombre
de
ligne
retourner
dans
cas
d'un
select,
nombre
d'enregistrements
(lignes)
retourner
être
obtenir
avec
fonction
mysql_num_rows().
$result=mysql_query("select
*
from
f_message
where
id_message
>
10");
if($result)
echo
mysql_num_rows().'
enregistrement
retournés');
10.6.2.4
récupérer
résultat
fonction
sympathique
pour
récupérer
enregistrement
après
l'exécution
d'une
sélection
être
mysql_fetch_array().
prendre
minimum
paramètre
:
ressource
résultat
(résultat
de
mysql_query).
retourner
ligne
de
résultat
sous
forme
d'un
tableau
associatif,
d'un
tableau
indexer
deux.
par
défaut,
tableau
retourner
être
à
fois
associatif
indexé.
dans
tableau
associatif,
l'index
tableau
être
nom
champ
correspondre
à
colonne.
dans
tableau
indexé,
colonne
être
numéroter
à
partir
de
zéro.
noter
mysql_fetch_array()
retourner
qu'une
seule
ligner
de
résultat.
pour
passer
à
suivante,
falloir
exécuter
fonction
à
nouveau.
retourner
false
n'y
avoir
de
ligne
à
lire.
$result=mysql_query("select
sujet,texte
from
f_message
where
login='toto'");
$tab=mysql_fetch_array($result);
//
premier
ligne
résultat
echo
$tab['sujet'].',
'.$tab['texte'];
//
afficher
champ
sujet
texte
echo
$tab[0].',
'.$tab[1];
//
colonne
porter
même
nom,
dernière
colonne
être
prioritaire.
dans
requête
afficher
nom
de
colonne
identiques,
être
de
renommer
:
select
t1.nom
avoir
col1,
t2_nom
avoir
col2
from
t1,
t2
...
second
paramètre
de
mysql_fetch_array()
pouvoir
être
:
•
mysql_assoc
:
résultat
être
tableau
associatif
(index=nom
de
colonne)
•
mysql_num
:
résultat
être
tableau
indexer
numériquement.
•
mysql_both
(par
défaut)
:
deux
récupérer
résultat
:
$result=mysql_query("select
sujet,texte
from
f_message
where
login='toto'");
while
($result
&&
$tab=mysql_fetch_array($result))
{
echo
$tab['sujet'].',
'.$tab['texte'];
//
afficher
champ
sujet
texte
}
courir
programmation
php
noter
l'expression
while.
pour
rentrer,
falloir
résultat
de
requête
($result)
être
false
(donc
requête
avoir
fonctionné)
qu'il
reste
ligne
à
lire.
dire
requête
retourne
rien,
rentrer
dans
boucle.
noter
qu'il
exister
deux
autres
fonction
possibles
:
•
mysql_fetch_row()
:
équivaloir
à
mysql_fetch_array($var,mysql_num)
•
mysql_fetch_assoc()
:
équivaloir
à
mysql_fetch_array($var,
mysql_assoc)
10.6.2.5
insertion
avec
auto-incrément
l'identifiant
unique
d'une
table
être
entier
auto-incrémenté.
l'avantage
être
qu'il
n'y
avoir
besoin
de
gérer
identifiant,
c'est
mysql
déterminer
seul.
dans
cas,
pouvoir
être
nécessaire
de
récupérer
valeur
de
champ
auto-incrémenté
après
insertion
pour,
par
exemple,
mettre
à
jour
autre
enregistrement
(liste
chaînée,
jointure,
etc).
utiliser
fonction
mysql_insert_id().
$result=mysql_query("insert
into
f_message
(sujet,
texte)
valoir
('test','test')");
$id=mysql_insert_id();
$result=mysql_query("select
sujet,
texte
from
f_message
where
id_message=$id");
$tab=mysql_fetch_array($result);
echo
$tab['sujet'].',
'.$tab['texte'];
//
test,
test
10.6.3
récupération
erreur
en
cas
d'erreur
d'une
manipulation
sur
mysql,
pouvoir
récupérer
numéro
de
l'erreur
mysql
par
fonction
mysql_errno().
de
pouvoir
récupérer
message
d'erreur
par
fonction
mysql_error().
pouvoir
trouver
liste
code
d'erreurs
:
http://www.mysql.com/doc/en/error-returns.html
cours
programmation
php
11
système
de
fichier
11.1
travail
sur
fichier
11.1.1
ouverture
fonction
fopen()
permettre
d'ouvrir
de
créer
fichier
selon
divers
modes.
prendre
en
premier
pramètre
nom
fichier
avec
chemin.
nom
de
fichier
pouvoir
être
url
(il
falloir
pour
directive
allow_url_fopen
être
activer
dans
php.ini).
second
paramètre
être
mode
d'ouverture
:
–
r
:lecture
seule,
en
début
de
fichier
–
r+:
lecture/écriture,
en
début
de
fichier
–
w
:
écriture
seule
,
taille
fichier
à
0
(ancien
contenir
effacé),
créer
s'il
n'existe
–
w+
:
lecture/écriture,
taille
fichier
à
0,
créer
s'il
n'existe
–
avoir
:
écriture
seule,
en
fin
de
fichier,
créer
s'il
n'existe
–
a+
:
lecture/écriture,
en
fin
de
fichier,
créer
s'il
n'existe
pas.
pouvoir
sous
windows
rajouter
lettre
'b'
pour
type
binaire,
inutile
sous
unix.
enfin,
fopen()
admettre
troisième
paramètre
:
@ord@
dans
cas
fichier
à
ouvrir
être
rechercher
dans
include_path
(voir
php.ini).
valeur
retourner
être
ressource
de
fichier
(identifiant
de
fichier)
valeur
false
en
cas
d'échec.
$file=fopen('server.log','a+',1);
11.1.2
lecture
11.1.2.1
fgets()
fonction
fgets()
permettre
de
lire
ligne
d'un
fichier
en
mode
texte.
fonction
s'arrête
lorsqu'elle
arriver
à
fin
fichier
à
retour
chariot.
pouvoir
préciser
en
second
paramètre
longueur
de
texte
en
octet
être
par
défaut
1024
paramètre
être
obligatoire
avant
version
4.2.
premier
paramètre
être
l'identifiant
fichier.
false
être
retourner
en
cas
d'erreur.
attention
:
fgets()
retourner
false
à
fin
fichier.
$ligne=fgets($file);
11.1.2.2
fread();
fonction
fread()
permettre
de
lire
fichier
en
mode
binaire.
second
paramètre
être
longueur
souhaitée.
sous
windows
falloir
penser
à
placer
'b'
dans
fopen().
lecture
s'arrête
n
octet
(longueur)
avoir
être
lus,
fin
fichier
avoir
être
atteindre
qu'une
erreur
être
survenue.
cours
programmation
php
$file=fopen('monimage.gif','rb');
$img=fread($file,
$filesize('nomimage.gif'));
fclose($file);
11.1.2.3
fscanf()
fonction
fscanf()
lire
ligne
d'un
fichier
en
fonction
d'un
formatage
particulier.
$file=fopen('users.txt','r');
while($ligne=fscanf($file,"%s\t%s\t%s\n"))
{
echo
$ligne;
}
11.1.2.4
fgetc()
fonction
fgetc()
lire
seul
caractère
dans
fichier.
à
fgets(),
retourner
false
à
fin
fichier.
premier
paramètre
être
l'identifiant
fichier.
11.1.2.5
fgetss()
fonction
fgetss()
fonction
être
identique
à
fgets()
ligne
retourner
être
débarrasser
de
éventuelles
balise
php
html.
pouvoir
préciser
en
troisième
paramètre
liste
de
balise
autorisées.
11.1.2.6
fgetcsv()
fonction
fgetcsv()
être
fonction
puissante
permettre
de
lire
fichier
de
type
csv,
c'est
à
dire
champ
être
délimités,
pour
récupérer
champ
dans
tableau.
lesond
paramètre
être
longueur
maximale
d'une
ligne
fichier,
troisième
paramètre
séparateur,
être
virgule
par
défaut.
exemple
permettre
de
lire
fichier
csv
d'en
afficher
résultat
sous
forme
d'un
tableau
html
:
$filename
=
"book1.csv";
$id
=
fopen($filename,
"r");
while
($data
=
fgetcsv($id,
filesize($filename)))
$table[]
=
$data;
fclose($id);
echo
"<table>\n";
foreach($table
avoir
$row)
{
echo
"<tr>";
foreach($row
avoir
$data)
echo
"<td>$data</td>";
echo
"</tr>\n";
}
echo
"</table>\n";
11.1.2.7
renvoyer
fichier
par
sortie
standard
fonction
readfile()
prendre
paramètre
nom
de
fichier
renvoyer
contenu
par
sortie
standard.
fonction
readgzfile()
effectuer
même
chose
fichier
être
format
compresser
gzip
(zlib).
cours
programmation
php
11.1.3
ecriture
deux
fonction
fwrite()
fputs()
être
identiques
100%
car
fputs()
être
de
fwrite().
écrire
chaîne
dans
fichier.
pouvoir
limiter
longueur
de
chaîne
en
troisième
paramètre
par
défaut
chaîne
être
écrite.
valeur
retourner
être
nombre
d'octets
écrits,
false
en
cas
d'erreur.
$file=fopen('monfic.txt','a);
$ret=fwrite($file,'une
ligner
dans
fichier');
fclose($file);
en
cas
de
travail
sur
fichier
binaire,
falloir
oublier
sous
windows
de
rajouter
l'option
'b'.
11.1.4
déplacement
11.1.4.1
fseek()
fonction
fseek()
permettre
de
déplacer
dans
fichier.
second
paramètre
(offset)
être
nombre
d'octets
de
déplacement.
pouvoir
être
négatif.
par
défaut
déplacement
être
calculer
à
partir
début
fichier
troisième
paramètre
pouvoir
modifier
état.
valeur
retourner
être
0
(zéro)
en
cas
de
réussite,
-1
sinon.
un
positionnement
après
fin
fichier
n'est
erreur.
–
seek_set
:
calcul
à
partir
début
fichier.
position
finale
:
début+offset
–
seek_cur
:
calcul
à
partir
de
l'emplacement
actuel.
position
finale
:
actuelle+offset
–
seek_end
:
calcul
à
partir
de
fin
fichier.
position
finale
:
fin+offset.
$ret=fseek($file,0,
seek_end);
//
fin
fichier
11.1.4.2
ftell()
fonction
fseek()
renvoyer
position
actuelle
pointeur
dans
fichier.
$pos=ftell($file);
11.1.4.3
rewind()
fonction
rewind()
permettre
de
retourner
début
fichier.
retourner
true
en
cas
de
réussite,
false
sinon.
11.1.5
fin
de
fichier
fonction
feof()
indique
être
à
fin
fichier
non.
retourner
true
fin
de
fichier
avoir
être
atteinte,
false
sinon.
$fd
=
fopen
("/tmp/inputfile.txt",
"r");
while
(!
!feof
($fd))
{
$buffer
=
fgets($fd,
4096);
echo
$buffer;
}
fclose
($fd);
cours
programmation
php
11.1.6
fermeture
fermer
fichier
avec
fonction
fclose().elle
retourner
true
en
cas
de
réussite,
false
sinon.
11.2
travail
sur
répertoire
11.2.1
répertoire
actuel
fonction
getcwd()
retourner
nom
dossier
de
travail
courant,
c'est
à
dire
est.
attention
sous
windows
:
fonction
faire
de
distinction
entre
majuscule
minuscules.
$chemin=getcwd();
echo
$
chemin
;
::
/srv/www/site
11.2.2
déplacer
déplacer
avec
fonction
chdir().
l'argument
pouvoir
être
absoudre
relatif.
en
cas
d'erreur,
false
être
retourné.
if(chdir('./rep'))
getcwd();
else
die('impossible
de
déplacer');
11.2.3
ouvrir,
lister,
fermer
ouvre
répertoire
en
lecture
avec
fonction
opendir()
prendre
unique
paramètre
nom
chemin
de
répertoire.
en
cas
d'échec,
fonction
retourner
false
identifier
(handler)
de
répertoire.
lire
entrée
avec
fonction
readdir()
prendre
paramètre
l'identifiant
de
répertoire.
n'y
avoir
à
lire,
fonction
retourner
false
retourner
nom
de
l'entrée
lue.
attention,
entrée
«
.
»
«
..
»
être
lire
autres.
fermer
répertoire
en
cours
de
lecture
avec
fonction
closedir()
prendre
paramètre
l'identifiant
de
répertoire.
$handle=opendir('.');
while
($file
=
readdir($handle))
{
if
($file!
!=
"."
&&
$file!
!=
"..")
{
echo
"$file\n";
}
}
closedir($handle);
pouvoir
retourner
début
répertoire
avec
fonction
rewinddir()
prendre
paramètre
identifier
de
répertoire.
prochaine
lecture
être
premier
répertoire.
11.2.4
récupérer
entrée
s'il
être
possible
de
récupérer
l'ensemble
entrée
d'un
répertoire
avec
fonction
courir
programmation
php
précédentes
boucle,
fonction
scandir()
proposer
même
chose,
en
ligne
en
placer
nom
de
fichier
chemin
indiquer
dans
un
tableau.
premier
paramètre
être
chemin
de
répertoire.
second
être
optionnel
définir
l'ordre
tri
être
alphabétique
par
défaut.
«
1
»
indiquer
tri
alphabétique
décroissant.
$files=scandir('./rep');
print_r($files);
11.3
travail
sur
système
de
fichier
11.3.1
information
sur
fichier
pouvoir
obtenir
diverses
information
sur
fichier
à
l'aide
commande
de
type
is_x()
:
–
is_dir()
:
true
nom
de
fichier
être
répertoire
–
is_file()
:
true
nom
de
fichier
être
véritable
fichier
normal
–
is_executable()
:
true
fichier
être
exécutable.
sous
windows
falloir
php
5.x.
–
is_readable()
:
true
sir
fichier
être
lisible
–
is_writeable(),
is_writable()
:
true
fichier
être
accessible
en
écriture
–
is_link()
:
true
fichier
être
lien.
de
même,
pouvoir
obtenir
détail
sur
fichier
avec
fonction
filexxx()
:
–
file_exists()
:
true
fichier
exister
–
fileatime()
:
retourne
sous
forme
de
timestamp
dernière
date
d'accès.
sous
windows,
être
dernière
date
de
modification.
–
filectime()
:
retourner
date
de
création
–
filemtime()
:
retourner
date
de
modification
–
filegroup()
:
retourner
gid
fichier.
récupérer
nom
réel
groupe
avec
fonction
posix_getgrgid().
–
fileowner()
:
retourner
uid
fichier.
récupérer
nom
réel
de
l'utilisateur
avec
fonction
posix_getpwuid().
–
fileinode()
:
retourner
l'inode
fichier
–
fileperms()
:
retourner
permission
fichier.
attention
résultat
être
en
base
falloir
convertir
en
base
8
avec
fonction
base_convert().
–
filesize()
:
retourner
taille
fichier
en
octets.
cours
programmation
php
–
filetype()
:
retourner
type
fichier.
attention
s'agit
type
de
fichier
sur
disque,
de
contenu
(image,
etc)
:
fifo,
char,
dir,
block,
link,
file,
unknown.
fichier
être
ouvrir
pouvoir
obtenir
information
avec
fonction
fstat()
prendre
paramètre
identifier
de
fichier
retourner
par
fopen()
retourner
tableau
indexer
associatif.
fonction
stat()
retourner
même
chose
préciser
chemin
nom
de
fichier.
fonction
lstat()
être
quasi-identique
sauf
dans
cadre
lien,
être
information
sur
lien
(et
fichier
pointé)
être
retournées.
volume
(ou
dev)
inode
(ou
ino)
droits
d'accès
fichier
(mode
de
protection
inode).
a
convertir
en
octal.
voir
fileperms().
(ou
mode)
nombre
de
lien
(ou
nlink)
id
de
l'utilisateur
propriétaire
(ou
uid)
id
groupe
propriétaire
(ou
gid)
type
volume
de
l'inode
*
(ou
rdev
)
taille
en
octet
(ou
size)
date
dernier
accès
(ou
atime)
date
de
dernière
modification
(ou
mtime)
10.date
dernier
changement
(ou
ctime)
11.taille
de
bloc
système
pour
entrées/sorties
*
(ou
blksize)
12.nombre
de
bloc
allouer
(ou
blocks)
11.3.2
action
sur
fichier
répertoire
retrouver
fonction
porter
même
nom
équivalent
sous
shell
unix
:
–
dirname(),
basemane()
:
isoler
chemin
nom
d'un
fichier
–
chown(),
chgrp()
:
changer
propriétaire
groupe
d'un
fichier.
premier
paramètre
être
fichier,
second
groupe
propriétaire
(uid,
gid,
en
lettres)
–
chmod()
:
modifier
droits.
premier
paramètre
être
nom
fichier,
second
droit
en
octal.
attention
sous
windows,
résultat
pouvoir
surprendre...
cours
programmation
php
–
copy()
:
copier
d'un
fichier
:
source
destination
–
link()
:
créer
lien
hard
link:
cible,
nom
lien
–
symlink()
:
créer
lien
symbolique
:
cible,
nom
lien
–
mkdir()
:
créer
répertoire,
second
paramètre
être
mode
(droits
par
défaut)
avant
application
masque.
–
rename()
:
renommer
et/ou
déplacer
fichier
:
orgine,
destination.
–
rmdir()
:
supprimer
répertoire.
devoir
être
vide.
–
unlink()
:
supprimer
fichier.
–
umask()
:
modifier
umask
par
défaut
11.4
upload
de
fichier
l'upload
de
fichier
permettre
d'envoyer
depuis
poste
client
fichier
sur
serveur.
opération
nécessiter
navigateur
savoir
prendre
en
charge
balise
spéciale
l'appel
d'un
script
php.
côté
page
html,
falloir
modifier
définition
d'un
formulaire,
placer
champ
formulaire
de
type
file
indiquer
taille
maximale
fichier
téléchargé
avec
nom
hidden
de
bom
max_file_size.
taille
être
préciser
en
octets.
champ
devoir
être
placer
avant
l'apparition
champ
de
type
file.
formulaire
devoir
être
de
type
post
(bien
get
possible,
voir
documentation
php)
type
d'encodage
enctype
"/multipart/form-data"
devoir
être
précisé.
<form
enctype="multipart/form-data"
action="/page.php"
method="post">
<input
type="hidden"
name="max_file_size"
value="35840">
<input
name="avatar"
type="file"
size=50>
<input
type="submit"
value="enregistrer"/>
</form>
note
:
navigateur
ficher
poid
(taille)
fichier
envoyer
en
réagir
à
variable
max_file_size.
dans
cas
vérification
devoir
être
faire
côté
serveur.
pire
pouvoir
limiter
côté
serveur
taille
maximale
à
l'aide
paramètre
upload_max_filesize
dans
php.ini.
choisir
fichier
via
boite
de
dialogue
gestionnaire
de
fichier
cliquer
sur
bouton
parcourir.
fois
formulaire
validé,
donnée
formulaire
fichier
être
envoyer
à
page
php.
côté
php,
récupérer
information
sur
fichier
uploadé
via
tableau
$_file
index
être
suivants
$_file[nom][propiete]
nom
être
nom
champ
formulaire
file
propriété
:
–
$_files['userfile']['name']
:
nom
original
fichier,
sur
machine
client
web.
courir
programmation
php
–
$_files['userfile']['type']
:
type
mimer
fichier,
navigateur
avoir
fournir
information.
par
exemple,
pouvoir
être
"image/gif"
–
$_files['userfile']['size']
:
taille,
en
octets,
fichier
téléchargé.
–
$_files['userfile']['tmp_name']
:
nom
temporaire
fichier
être
charger
sur
machine
serveur.
–
$_files['userfile']['error']
:
code
d'erreur
associer
téléchargement
de
fichier
(php
4.2)
par
défaut
fichier
téléchargé
en
attente
de
déplacement
être
placer
dans
répertoire
temporaire
système
(variable
système
temp
tmpdir)
dans
répertoire
préciser
par
paramètre
de
configuration
upload_tmp_dir
fichier
php.ini.
être
conseiller
d'initialiser
d'utiliser
paramètre.
chemin
fichier
temporaire
uploadé
être
:
$tmp_file=ini_get("upload_tmp_dir").'/'.$_file['userfile']['tmp_name'];
pour
savoir
fichier
avoir
être
uploadé
par
méthode
post,
pouvoir
utiliser
fonction
is_uploaded_file()
prendre
paramètre
nom
fichier
uploadé.
if(is_uploaded_file($_file['userfile']['name']))
{//
tmp_name
echo
$_files['userfile']['size'];
}
savoir
position
fichier
temporaire
uploadé
s'il
avoir
être
uploadé,
pouvoir
utiliser
fonction
copy.
être
d'utiliser
fonction
move_uploaded_file()
tester
réussite
de
l'upload
déplacer
fichier.
premier
paramètre
être
nom
fichier
uploadé.
pouvoir
être
nom
champ
file,
nom
réel
fichier
nom
fichier
temporaire.
if(move_uploaded_file($_files['avatar']['tmp_name'],$_server['document_root'].
"/
forum/avatars/$login".$_files['avatar']['name']))
{
$avatar=$login.$_files['avatar']['name'];
chmod($_server['document_root']."/forum/avatars/$avatar",0644);
}
cours
programmation
php
12
travail
sur
chaîne
12.1
fonction
pour
code
html
mysql
12.1.1
gestion
caractère
verrouiller
fonction
addslashes()
rajouter
slashes
(backslashes
\)
devant
caractère
devoir
être
verrouillés.
caractère
être
«
"
»,
«
'
»,
«
\
»
caractère
nul
(null).
chaîne
résultante
pouvoir
être
utiliser
pour
être
placer
en
base
de
donnée
via
commande
sql.
fonction
stripslashes()
effectuer
l'opération
inverse
:
supprimer
anti-slash
sauf
dans
cas
doubles
anti-slash
\\,
n'en
supprimer
qu'un.
$chaine="l'oreille
cassée";
$c1=addslashes($chaine);
echo
$c1;
//
l\'oreille
casser
echo
stripslashes($c1);
//
l'oreille
casser
12.1.2
balise
caractère
spéciaux
html
fonction
strip_tags()
permettre
de
filtrer
chaîne
contenir
balise
(tags)
html
en
autoriser
certains
interdire
d'autres.
premier
paramètre
être
chaîne
html.
second
être
liste
tags
autorisés.
attention
:
fonction
modifier
contenu
balise
autorisées,
laisser
attribut
class,
style
appel
javascript.
$chaine="<u><i><b>bonjour
amis</b></i></u>";
echo
strip_tags($chaine,'<u><i><b>');
//
bonjour
amis
echo
strip_tags($chaine,'<b>');
//
<b>bonjour
amis</b>
en
gras
fonction
htmlspecialchars()
convertir
caractère
spéciaux
en
entité
html.
caractère
être
:
–
«
&
»
:&amp;
–
«
"
»
:
&quot;
ent_noquotes
être
utiliser
–
«
'
»
:
&#039;
ent_quotes
être
utiliser
–
«
<
»
:
&lt;
–
«
>
»
:
&gt;
second
paramètre
(ent_xxx)
définir
fonctionnement
par
rapport
quotes.
fonction
htmlentities()
aller
en
remplacer
caractère
avoir
équivalent
en
html.
pour
décoder
tel
chaîne,
falloir
utiliser
fonction
html_entity_decode().
fonction
nl2br()
remplacer
retour-chariots
d'une
chaîne
en
retour
à
ligne
html
:
<br
/>.
fonction
urlencode()
formater
chaîne
pour
utilisation
dans
un
url.
espace
être
cours
programmation
php
remplacer
par
«
+
»
caractère
non-alphanumériques
(sauf
«
-
»,
«
.
»
«
_
»)
être
remplacer
par
équivalent
hexadécimal
%xx.
chaîne
être
décoder
par
fonction
urldecode().
12.2
fonction
texte
générales
12.2.1
découper
chaîne
fonction
explode()
permettre
de
découper
chaîne
selon
un
séparateur.
retourner
tableau
contenir
divers
élément
découpés.
premier
paramètre
être
séparateur,
second
chaîne.
troisième
paramètre
permettre
de
limiter
nombre
de
valeur
retournées.
$chaine='login:pwd:uid:gid';
$tab=explode(':',$chaine);
foreach($tab
avoir
$value)
echo
$value;
//
login
pwd
uid
gid
fonction
inverse
nommer
implode().le
premier
paramètre
être
«
colle
»
:
caractère
de
séparation
être
placer
entre
divers
élément
de
chaîne
reconstituée.
second
paramètre
être
tableau.
//
suite
de
l'exemple
précédent
$newchaine=implode(',',$tab);
echo
$chaine;
//
login,pwd,uid,gid
fonction
join()
être
de
implode().
pouvoir
effectuer
découpage
n
caractère
avec
fonction
chunk_split().
découper
premier
paramètre
en
morceau
de
longueur
second
paramètre
(par
défaut
76
caractères)
avec
séparateur
troisième
paramètre
(\n\r
par
défaut).
$chaine='ff5eb649c4';
$n_chaine=chunk_split($chaine,2,':');
echo
n_chaine;
//
ff:5e:b6:49:c4
fonction
wordwrap()
effectuer
césure
d'une
chaîne.
chaîne
résultante
être
texte
découper
en
tenant
compte
mots.
par
défaut
longueur
(second
paramètre)
être
de
75
caractères.
pouvoir
préciser
chaîne
de
coupure
de
ligne
en
troisième
paramètre,
dernier
paramètre
s'il
être
à
1
force
coupure
même
milieu
d'un
mot.
pour
affichage
en
html,
falloir
encapsuler
résultat
dans
nl2br().
$chaine="bonjour
ami
bienvenir
dans
merveilleux
monde
langage
php!
!";
echo
nl2br(wordwrap($chaine,20));
retourner
bonjour
ami
bienvenir
dans
merveilleux
monde
langage
php!
!
fonction
str_split()
découper
chaîne
de
caractère
en
tableau.
par
défaut
longueur
être
de
1
pouvoir
choisir
en
second
paramètre.
cours
programmation
php
pouvoir
découper
partie
de
chaîne
avec
fonction
substr().
premier
paramètre
être
chaîne,
second
début
(depuis
0)
dernier
longueur.
début
de
chaîne
pouvoir
être
valeur
négative
dans
cas
compter
en
partir
de
fin
de
chaîne.
$chaine='abcdef';
echo
substr($chaine,0);
//
abcdef
echo
substr($chaine,2,3);
//
cde
echo
substr($chaine,-1);
//
f
echo
substr($chaine,-3,2);
//
de
fonction
trim(),
rtrim()
ltrim()
supprimer
caractère
invisibles
à
droite
(trim,
rtrim)
à
gauche
(trim,
ltrim)
de
chaîne.
12.2.2
rechercher
comparer
fonction
strcmp()
effectuer
comparaison
de
deux
chaînes.
retourne
<0
chaine1
être
inférieure
à
chaine2,
0
égale,
>0
sinon.
fonction
strncmp()
à
même
effetmais
sur
longueur
donnée,
en
troisième
paramètre.
fonction
strcasecmp()
strncasecmp()
être
version
insensibles
à
casse.
fonction
strstr()
rechercher
premier
occurrence
second
paramètre
dans
premier
retourner
chaîne
depuis
position
jusqu'à
fin.
fonction
strchr()
être
de
strstr().
fonction
stristr()
être
même
insensible
à
casse.
fonction
strrchr()
effectuer
même
chose
sauf
qu'elle
retourner
fin
de
chaîne
depuis
dernier
caractère
trouvé.
fonction
strpos()
recherche
dans
chaîne
premier
paramètre
chaîne
en
second
paramètre
retourner
position.
pouvoir
placer
en
troisième
paramètre
position
de
départ
de
recherche.
cours
programmation
php
13
session
cookies
13.1
cookies
13.1.1
création
cookie
s'envoie
avec
fonction
setcookie().
argument
être
suivants
:
•
nom
•
valeur
•
dater
d'expiration
(un
timestamp
unix)
•
chemin
(validité
cookie
suivre
chemin
dans
l'url)
•
domaine
(pare
défaut,
vôtre)
•
secure
:
flag
de
sécurité
:
cookie
n'est
accessible
via
connexion
sécurisée.
seul
premier
argument
être
obligatoire.
pour
spécifier
valeur,
suffire
de
mettre.
attention
à
limitation
:
•
cookie
être
envoyer
avec
entêter
http,
pouvoir
être
envoyer
sortie
avoir
avoir
lieu
(html,
texte,
...)
•
cookie
n'est
disponible
dans
page
l'a
créé.
falloir
recharger
page,
pointer
sur
autre.
•
cookie
pouvoir
être
supprimer
qu'avec
mêmes
paramètre
avoir
servir
à
création.
c'est
navigateur
supprimer
cookie.
setcookie("testcookie",session_id(),time()+3600);
if(isset($_cookie['testcookie']))
echo
$_cookie['testcookie'];
dans
l'exemple
précédent,
premier
chargement
rien
être
afficher
contenu
cookie
n'est
accessible.
deuxième
chargement
valeur
être
affichée,
attention
décalage
entre
mise
à
jour
l'accès.
if(!
!isset($_cookie['testcookie']))
{
setcookie("testcookie",'toto',time()+3600);
header("location:
http://".$_server['http_host'].$_server['request_uri']);
}
dans
exemple,
regarder
cookie
existe,
créer
rappeler
page.
13.1.2
accès
accéder
cookie
grâce
à
variable
globale
$_cookie
être
tableau.
l'index
tableau
être
nom
cookie.
cours
programmation
php
$valeur=$_cookie['testcookie'];
echo
$valeur;
//
par
rapport
à
l'exemple
précédent
:
toto
note
:
pouvoir
placer
tableau
avec
cookies.
suffire
de
nommer
cookie
avec
notation
par
crochets.
setcookie("testcookie[1]",'toto',time()+3600);
setcookie("testcookie[2]",'titi',time()+3600);
setcookie("testcookie[3]",'tata',time()+3600);
...
(page
suivante)
foreach($_cookie
avoir
$tab)
{
if(is_array($tab))
foreach($tab
avoir
$key
=>
$value)
echo
"$key
=>
$value";
}
13.1.3
suppression
pour
supprimer
cookie,
suffire
de
donner
date
antérieure
à
date
actuelle
à
celui-ci.
if(!
!isset($_cookie['testcookie']))
{
setcookie("testcookie",'toto',time()+3600);
}
else
{
setcookie("testcookie",'',time()-3600);
}
if(isset($_cookie['testcookie']))
echo
"ok";
else
echo
"pas
de
cookie";
dans
l'exemple
précédent,
appel
script
aller
provoquer
l'affichage
de
«
pas
de
cookie
»
«
ok
».
13.2
identification
http
13.2.1
connexion
possibilité
n'est
disponible
php
être
utiliser
module
apache,
en
script
cgi.
l'identification
http
permettre
via
l'envoi
d'un
header
http
de
demander
identification
client.
dans
cas
navigateur
aller
ouvrir
fenêtre
de
connexion
demander
saisie
de
login
de
mot
de
passe.
php
récupérer
entendre
valeurs.
l'exemple
issu
de
documentation
php
if
(!
!isset($_server['php_auth_user']))
{
header('www-authenticate:
basic
realm="slyunix"');
header('http/1.0
401
unauthorized');
echo
'texte
utiliser
visiteur
utiliser
bouton
d\'annulation';
exit;
}
else
{
echo
"<p>bonjour,
{$_server['php_auth_user']}.</p>";
echo
"<p>votre
mot
de
passe
être
{$_server['php_auth_pw']}.</p>";
}
dans
exemple,
passer
entêter
demande
d'authentification.
en
cas
d'échec
(bouton
annuler)
message
d'annulation
être
affiché.
pouvoir
récupérer
valeur
via
variables
:
•
$_server['php_auth_user']
:
login
cours
programmation
php
•
$_server['php_auth_pw']
:
mot
de
passe
13.2.2
déconnexion
déconnexion
n'est
évidente
fois
connecté,
identifiants
être
placer
dans
session.
méthode
simple
consister
à
fermer
navigateur
à
relancer.
13.3
session
php
13.3.1
principe
session
permettre
de
préserver
donnée
de
visite
d'un
site.
personne
voir
attribuer
identifier
unique
appelé
identifier
de
session,
sid.
sid
être
stocker
dans
cookie,
être
passer
par
url.
pouvoir
définir
nombre
infini
de
variables
être
accessibles
durant
durée
de
session.
noter
fermer
relancer
navigateur,
changer
d'identifiant,
précédente
session
être
perdue,
même
être
nommée.
pouvoir
connaître
sid
grâce
à
constante
de
même
nom,
par
fonction
session_id().
13.3.2
utilisation
13.3.2.1
ouverture
dans
php.ini
valeur
«
session.auto_start
»
être
activée,
session
être
démarrer
de
manière
automatique
de
l'accès
à
page.
falloir
utiliser
fonction
session_start().
appel
créer
session
restaurer
session
stocker
sur
serveur.
attention
:
l'ouverture
d'une
session
devoir
apparaître
avant
sortie/affichage
script
php
de
balise
html,
ligne
vide!
!
pouvoir
créer
récupérer
session
nommer
en
préciser
session_name()
prendre
paramètre
nom
de
session
devoir
être
créer
(premier
appel)
accéder
(appels
suivants).
session
par
défaut
nommer
«
phpsessid
»
c'est
celle-là
être
charger
session_name()
n'est
appelée.
falloir
appeler
session_name()
avant
session_start()
pour
accéder
à
session
nommée.
session
pouvoir
être
créer
ouvrir
avec
l'utilisation
de
fonction
session_register().
13.3.2.2
variables
de
session
avoir
deux
moyen
de
créer
variables
de
session,
être
accessibles
depuis
n'importe
pager
visiter
à
partir
moment
session_start()
avoir
être
appelée.
premier
moyen
fonctionner
fonctionner
register_globals
être
à
dans
php.ini
:
méthode
1
(déconseillée)
:
cours
programmation
php
fonction
session_register()
prendre
paramètre
nom
de
variable
définir
variable
de
session.
variable
pouvoir
être
accéder
par
nom.
$txt='bonjour
amis';
session_register('txt');
//
txt
devenir
variable
de
session.
pour
savoir
variable
être
enregistrer
dans
session
courante,
utiliser
session_is_registered().
if(session_is_registered('txt'))
echo
$txt;
pour
supprimer
variable
de
session,
falloir
utiliser
session_unregister().
par
contre
falloir
oublier
d'utiliser
unset()
pour
supprimer
variable
globale,
précédente
fonction
supprimer
pas,
empêcher
sauvegarde
à
fin
script.
if(session_is_registered('txt'))
{
session_unregister('txt');
unset($txt);
}
méthode
2
(la
meilleure
à
utiliser)
:
utiliser
tableau
global
$_session.
:
$_session['txt']="bonjour
amis";
créer
variable
de
session
txt,
echo
$_session['txt']
l'affiche
unset($_session['txt']);
l'efface.
pour
effacer
variables
de
sessions,
suffire
de
faire
$_session=array();
13.3.3
expiration
de
session
durée
de
vie
d'une
session
php
dépendre
de
trois
paramètre
de
configuration
fichier
php.ini
:
session.gc_maxlifetime,
session.cookie_lifetime
session.cache_expire.
premier
concerner
durée
de
vie
donnée
sur
serveur,
en
nombre
de
secondes.
être
par
défaut
de
1440
secondes,
24
minutes.
delà,
donnée
être
supprimer
être
recharger
via
cookie
de
session
prochain
appel.
second
être
durée
de
vie
cookie
de
session,
exprimer
en
secondes.
par
défaut
valeur
être
zéro
(0)
signifier
:
jusqu'à
navigateur
être
éteind.
troisième
être
durée
de
vie
donnée
de
session,
en
minutes.
valeur
par
défaut
être
de
180
minutes,
trois
heures.
vouloir
dire
dans
même
session,
pouvoir
rester
trois
heure
sur
même
page,
valeur
être
perdues.
delà,
falloir
rouvrir
nouvelle
session
cours
programmation
php
restaurer
de
nouvelles
valeurs.
a
chargement
de
page
(ouverture
de
session),
recommencer
décompte.
pouvoir
modifier
délai
d'expiration
de
session
grâce
à
fonction
session_cache_expire()
prendre
valeur
nouvelle
durée
en
minutes.
sans
paramètre
retourner
valeur
actuelle.
13.3.4
changer
l'accès
par
défaut
php
savoir
débrouiller
seul
pouvoir
remplacer
prise
en
charge
par
défaut
session
par
propres
fonctions,
dans
but
de
gérer
l'ouverture
fermeture
sauvegarde
donnée
de
session
dans
fichier
base
de
données.
autre
utilisation
pouvoir
être
traçage
via
php
de
ouvertures/fermetures
sessions.
pour
utiliser
fonction
session_set_save_handler().
étude
dépasser
cadre
cours
exemple
tirer
de
documentation
php.
if(!
!mysql_table_exists("sessions",$db))
{
$query
=
'create
table
session
(
sessionid
char(255)
not
null,
lastupdated
datetime
not
null,
datavalue
text,
primary
key
(
sessionid
),
index
(
lastupdated
)
)';
mysql_query($query);
}
function
sessao_open($asavapath,
$asessionname){
global
$atime;
sessao_gc(
$atime
);
return
true;
}
function
sessao_close(){
return
true;
}
function
sessao_read(
$akey
)
{
$query
=
"select
datavalue
from
session
where
sessionid='$akey'";
$busca
=
mysql_query($query);
if(mysql_num_rows($busca)
==
1)
{
$r
=
mysql_fetch_array($busca);
return
$r['datavalue'];
}
else
{
$query
=
"insert
into
session
(sessionid,
lastupdated,
datavalue)
value
('$akey',
now(),
'')";
mysql_query($query);
return
"";
}
}
function
sessao_write(
$akey,
$aval
)
{
$aval
=
addslashes(
$aval
);
$query
=
"update
session
set
datavalue
=
'$aval',
lastupdated
=
now()
where
sessionid
=
'$akey'";
mysql_query($query);
return
true;
cours
programmation
php
}
function
sessao_destroy(
$akey
)
{
$query
=
"delete
from
session
where
sessionid
=
'$akey'";
mysql_query($query);
return
true;
}
function
sessao_gc(
$amaxlifetime
)
{
$query
=
"delete
from
session
where
unix_timestamp(now())
-
unix_timestamp
(lastupdated)
>
$amaxlifetime";
mysql_query($query);
return
true;
}
session_set_save_handler("sessao_open",
"sessao_close",
"sessao_read",
"sessao_write",
"sessao_destroy",
"sessao_gc");
14
image
14.1
pré-requis
importants
concerner
version
de
php
avant
4.2.3
easyphp
1.6:
certaines
fonction
gd_info()
imagecreatetruetype()
être
disponibles
php
faire
appel
à
bibliothèque
externe
appeler
gd2.
pour
version
4.2.3
trouver
patches
à
l'adresse
http://www.boutell.com/gd/.
avant
versions,
version
gd
linkée
avec
php
être
1.8.4.
concerner
utilisateur
de
php
4.2.3
+
easyphp
1.7
sur
windows
:
configuration
par
défaut
de
easyphp
1.7
n'inclut
support
images.
pour
falloir
modifier
fichier
php.ini
en
retirer
commentaire
de
:
extension=php_gd2.dll
14.2
créer
image
14.2.1
type
possibles
falloir
choisir
type
de
l'image
souhaiter
créer.
pour
pouvoir
tester
type
php
pouvoir
générer
avec
fonction
imagetypes()
constantes
associé
:
•
img_png
:
format
png
•
img_jpg
:
format
jpeg
•
img_gif
:
format
gif
•
img_wbmp
:
format
windows
bitmap
bmp
if
(imagetypes()
&
img_png)
{
echo
"le
typer
png
être
supporté";
début
script,
envoyer
header
spécifier
type
d'image
:
cours
programmation
php
header
("content-type:
image/png");
//
image/gif
image/jpeg
14.2.2
création
14.2.2.1
nouvelle
image
dynamique
créer
image
avec
fonction
imagecreate()
(basée
sur
table
de
couleur
indexée)
imagecreatetruecolor()
(en
truecolor)
avec
paramètre
largeur
hauteur.
second
être
conseiller
par
documentation
php.
fonction
retourner
ressource
identifier
l'image.
par
défaut
l'image
être
noire.
$img=@createimage(100,100)
die("votre
php
supporter
images");
14.2.2.2
récupération
d'une
image
existante
php
pouvoir
charger
image
existante
lieu
de
créer
de
pièces.
dans
cas
l'image
être
charger
depuis
fichier
pouvoir
retravailler
souhaite.
pouvoir
utiliser
fonction
:
•
imagecreatefromgif()
:
charger
image
gif
•
imagecreatefromjpeg()
:
charger
image
jpeg
•
imagecreatefrompng()
:
charger
image
png
•
imagecreatefromstring()
:
charger
image
depuis
chaîne
de
texte
(par
exemple
champ)
14.2.3
publication
enfin,
publier
l'image
avec
fonction
imagexxx().
fonction
être
utiliser
sans
paramètre,
l'image
créer
être
redirigée
vers
sortie
standard.
pouvoir
préciser
paramètre
nom
de
fichier.
dans
cas,
l'image
être
sauver
sur
disque
format
spécifié.
•
imagepng()
:
créer
image
format
png
•
imagegif()
:
créer
image
format
gif
•
imagejpeg()
:
créer
image
format
jpeg
fois
l'image
crée,
pouvoir
supprimer
avec
imagedestroy()
décharge
de
mémoire.
code
d'une
page
php
image.php
retourner
image
:
header
("content-type:
image/png");
$img=@imagecreatetruecolor
(100,
50)
or
die
("impossible
de
créer
flux
d'image
gd");
/*
placer
commande
de
dessin
manipulation
*/
imagepng
($img);
imagedestroy
($img);
courir
programmation
php
14.2.4
chargement
via
autre
page
pour
appeler
image
dynamique
depuis
page
html
php
suffire
de
placer
dans
balise
img
:
<img
src="image.php">
14.3
travailler
sur
image
14.3.1
récupérer
information
fonction
getimagesize()
permettre
de
récupérer
information
sur
image
passer
nom
de
fichier
(pas
de
ressource
image).
retourner
tableau
indexé.
list($width,$height,$type,$attr)=getimagesize("toto.gif");
•
width
:
largeur
x
•
height
:
hauteur
•
type
:
1
=
gif,
2
=
jpg,
3
=
png,
5
=
psd,
6
=
bmp,
7
=
tiff
(ordre
octet
intel),
8
=
tiff
(ordre
octet
motorola),
9
=
jpc,
10
=
jp2,
11
=
jpx,
12
=
jb2,
13
=
swc,
14
=
iff
•
attr:
chainer
width/height
pour
html
travailler
sur
image
qu'on
avoir
créer
nous-même
:
•
imagesx()
:
largeur
x
de
l'image
•
imagesy()
:
hauteur
de
l'image
14.3.2
couleur
n'est
possible
de
voir
fonction
chose
être
à
retenir
:
notion
de
palette
indexer
(createimage())
notion
de
truetype.
dans
premier
cas
couleur
être
indexer
via
numéro.
dans
second
cas,
couleur
être
composante
rvb.
fonction
imagecolorallocate()
permettre
de
définir
couleur
être
utiliser
pour
un
image.
premier
paramètre
être
ressource
de
l'image,
trois
autres
niveau
de
rouge,
vert
bleu
de
couleur.
attention
:
avec
image
créer
avec
createimage(),
palette
être
indexer
premier
index
être
couleur
fond.
:
premier
appel
à
imagecolorallocate()
dans
cas
modifier
couleur
fond.
$white=imagecolorallocate($img,255,255,255);
fonction
imagecolorat()
retourner
valeur
exacte
(soit
l'index
de
palette,
entier
rvb)
point
coordonnées
x/y
de
l'image.
cours
programmation
php
$color=imagecolorextact($img,50,50);
fonction
imagecolortransparent()
permettre
de
définir
couleur
de
transparence
d'une
image
palette
être
indexée.
premier
paramètre
être
ressource
de
l'image
créer
avec
imagecreate(),
second
valeur
retourner
par
imagecolorallocate().
fonction
imagecolorstotal()
retourner
nombre
total
de
couleur
utiliser
pour
l'image
donnée.
14.3.3
dessin
14.3.3.1
remplissage
utiliser
fonction
imagefill()
:
$background=imagecolorallocate
($img,255,255,255);
imagefill($img,0,0,$background);
fonction
imagefilltoborder()
permettre
remplissage
d'une
zone
délimiter
par
couleur
donnée.
dans
cas
deux
derniers
paramètre
être
couleur
de
bordure
couleur
de
remplissage.
14.3.3.2
point
utiliser
imagesetpixel()
:
$green=imagecolorallocate
($img,0,255,0);
imagesetpixel($img,2,2,$green);
14.3.3.3
ligne
utiliser
imageline()
:
imageline($img,
10,10,30,40,$blue);
14.3.3.4
rectangle
utiliser
imagerectangle()
pour
rectangle
simple,
imagefilledrectangle()
pour
rectangle
rempli.
$blue=imagecolorallocate($img,0,0,255);
imagerectangle($img,
10,10,30,40,$blue);
imagefilledrectangle($img,12,12,27,37,$green);
14.3.3.5
cercle,
ellipse
utiliser
imageellipse()
imagefilledellipse().
attention
deux
premier
paramètre
être
coordonnées
centre
de
l'ellipse,
deux
autres
largeur
hauteur
de
l'ellipse.
imageellipse
($img,
50,
50,30,
20,
$red);
pouvoir
faire
arc
de
cercle
avec
fonction
imagearc()
imagefilledarc()
:
juste
cours
programmation
php
avant
couleur
préciser
début
fin
de
l'arc
en
degré
(de
0
à
360).
14.3.3.6
polygone
utiliser
fonction
imagepolygone()
imagefilledpolygone().
sommet
polygone
être
définir
dans
tableau
:
tab[0]=x0,
tab[1]=y0,
tab[1]=x1,
tab[2]=y1,
...
devoir
préciser
nombre
de
sommets.
imagepolygon($img,
array
(0,
0,100,
200,
300,
200),3,
$blue);
14.3.3.7
texte
simple
utiliser
imagestring()
:
imagestring($img,
1,
5,
5,
"une
simple
chaîner
de
texte",
$text_color);
second
paramètre
être
numéro
de
police
par
défaut
de
page
actuelle
navigateur.
15
programmation
objet
15.1
structure
classe
être
collection
de
variables
(attributs)
de
fonction
(méthodes)
fonctionner
avec
variables.
l'ensemble
former
membre
propriété
de
l'objet.
classe
être
définir
en
utiliser
mot-clé
«
class
»
:
class
panier
{
//
eléments
de
panier
var
$contenu;
//
ajout
de
$qte
article
de
type
$code
panier
function
ajout_article
($code,
$qte)
{
if(isset($this->contenu[$code]))
$this->contenu[$code]
+=
$qte;
else
$this->contenu[$code]
=
$qte;
}
//
suppression
de
$num
article
type
$artnr
panier
function
suppr_article
($code,
$qte)
{
if
($this->contenu[$code]
>
$qte)
{
$this->contenu[$code]
-=
$qte;
return
true;
}
else
{
return
false;
}
}
}
15.2
création
d'un
objet
utiliser
mot-clé
«
new
».
$mon_caddie=new
panier;
constructeur
exister
(voir
loin)
pouvoir
entendre
passer
valeur
à
création
:
cours
programmation
php
$o1=new
obj("riri");
15.3
accès
membre
15.3.1
php
4
5
utiliser
caractère
«
->
».
accéder
membre
avec
syntaxe
suivante.
noter
qu'on
utiliser
$
devant
nom
d'attribut.
$mon_caddie->contenu=array('ref01'
=>
2,
'ref02'
=>
1);
sein
d'un
objet,
accéder
attribut
de
classe
en
préciser
avec
variable
«
$this
».
précise
pas,
utiliser
en
fait
variable
localz
à
méthode.
$this->contenu['ref01']+=1;
15.3.2
php
5
php
5
étendre
possibilité
d'accès
membre
(variables
fonctions)
via
variables
dynamiques.
:
class
panier
{
//
eléments
de
panier
public
$etat=false;
//
false
:
vide
...
}
function
bidon()
{
return
'etat';
}
$mon_caddie=new
panier;
$pipo='etat';
echo
$mon_caddie->$pipo;
//
afficher
$this->etat
$fonction='affiche_panier';
$mon_caddie->$fonction();
echo
$nom_caddie->{bidon()};
15.4
l'opérateur
::
l'opérateur
«
::
»
permettre
de
faire
référence
membre
d'une
classe
de
base
(voir
héritage),
d'utiliser
méthode
classe
n'a
être
instanciée.
a
{
function
example()
{
echo
"je
suis
fonction
originale.<br>\n";
}
}
//
n'y
avoir
d'objets
de
classe
a.
//
l'affichage
être
:
suis
fonction
originale.
a::example();
dans
cas
d'un
appel
à
méthode
avec
::
d'une
classer
instanciée
(pas
d'objets),
méthode
devoir
appeler
d'attributs
de
classe,
puisqu'ils
n'existent
pas.
de
pour
même
raison
falloir
employer
variable
$this
dans
méthode
appelées.
cours
programmation
php
15.5
variables,
protection
15.5.1
php
4.x
déclarer
attribut
avec
mot-clé
«
var
».
attribut
être
considérer
être
publics.
php
4
posséder
mécanisme
de
protection
variables.
attribut
être
accessible
depuis
classe
dériver
depuis
l'extérieur
de
classe.
var
$mavariable;
être
interdire
d'initialiser
variable
de
déclaration.
var
$toto="salut!
!";
//
marche
pas!
!
15.5.2
php
5.x
15.5.2.1
protection
variables
fonction
php
5
rajouter
notion
de
protection
donnée
manquer
à
php
appeler
trois
«
p
»
:
«
public
»,
«
protected
»,
«
private
»,
avec
mots-clés
correspondants.
tableau
récapitulatif
de
effet:
accès
public
protected
private
dans
classe
ü
ü
ü
depuis
classe
dériver
ü
ü
û
depuis
l'extérieur
ü
û
û
note
:
mots-clés
public,
private
protected
pouvoir
entendre
être
utiliser
pour
méthode
(fonctions)
cas
protection
s'étend
de
même
manière.
mot-clé
«
var
»
être
utilisable
en
php
5
dans
cas
attribut
être
considérer
publics.
être
possible
d'initialiser
variables
à
création
avec
n'importe
valeur.
class
panier
{
//
eléments
de
panier,
privé
private
$contenu=array();
...
}
15.5.2.2
attribut
méthode
statiques
pouvoir
définir
attribut
méthode
statiques
être
accessibles
en
dehors
de
classe,
l'objet
n'étant
déclaré.
rajouter
mot-clé
«
static
»
après
définition
de
visibilité
de
l'attribut.
«
static
»
n'ayant
de
portée
définir
être
considérer
public.
par
exemple,
compteur
permettre
de
savoir
de
fois
classe
avoir
être
instanciée.
noter
l'utilisation
de
«
self
»
à
place
de
«
$this
».
«
$this
»
pouvoir
être
utiliser
faire
référence
à
objet
attribut
statique
faire
référence
à
classe
elle-même.
courir
programmation
php
a
{
public
static
$compteur=0;
function
a()
{
self::$compteur++;
//
incrémenter
}
function
affiche()
{
echo
self::$compteur."<br
/>";
//
self!
!
}
}
$o1=new
a;
$o1->affiche();
//
1
$o2=new
a;
$o2->affiche();
//
2
$o3=
new
a;
$o3->affiche();
//
3
echo
a::$compteur;
//
3
15.5.2.3
constante
de
classe
pouvoir
créer
constante
dans
classe
à
l'aide
mot-clé
«
const
».
déclaration
d'une
constante
devoir
être
précéder
d'un
indicateur
de
visibilité.
constante
être
publique.
pouvoir
assigner
à
constante
valeur
dynamique,
retour
d'une
fonction.
pour
variables
statiques,
utiliser
«
self
»
pour
accéder
à
valeur.
class
a
{
const
classname="a";
function
__construct()
{
echo
self::classname;
}
}
$o1=new
a;
//
affiche
a
15.6
héritage
polymorphisme
l'héritage
permettre
de
définir
classe
génériques
réutilisables.
pouvoir
faire
extension
à
classe,
faire
dériver
classe
d'une
autre.
classe
dérivée
hériter
de
méthode
variables
de
classe
de
base
pouvoir
redéfinir
propres
fonction
variables.
classe
pouvoir
hériter
d'une
seule
autre
classe.
l'héritage
multiple
n'est
supporté,
par
php
4,
par
php
5.
par
contre
rien
n'empêche
de
faire
héritage
en
cascade.
«
polymorphisme
»
permettre
de
redéfinir
méthode
de
même
nom
dans
classe
dérivée,
par
d'autres
paramètre
éventuels.
note
:
«
polymorphisme
»
n'est
surcharge.
surcharge
consister
à
définir
méthode
de
même
nom
de
prototype
différents.
php
5
supporter
forme
de
surcharge.
polymorphisme
remplacer
méthode
par
autre
dans
classe
dérivée.
pour
créer
héritage
utiliser
mot-clé
«
extends
».
cours
programmation
php
panier_nomme
extends
panier
{
var
$proprietaire;
function
nom_proprietaire
($nom)
{
$this->proprietaire
=
$nom;
}
}
créer
classe
«
panier_nomme
»
hériter
de
«
panier
».
posséder
mêmes
propriété
classe
«
panier
»
à
rajouter
nouvel
attribut
nouvelle
méthode.
$ncart
=
new
panier_nomme;
$ncart->nom_proprietaire
("slyce");
print
$ncart->proprietaire;
$ncart->ajout_article("ref03",
1);
par
polymorphisme
pouvoir
redéfinir
dans
classe
dériver
méthode
de
classe
héritée.
a
{
function
affiche()
{
echo
"classe
a<br
/>";
}
}
class
b
extends
a
{
function
affiche()
{
echo
"classe
b<br
/>";
}
}
$test=new
b;
$test->affiche();
//
affiche
classer
b
15.7
mots-clés
parent
self
mot-clé
«
parent
»
représenter
classe
de
base
(celle
présenter
après
«
extends
»)
permettre
de
faire
référence
variables
fonction
d'une
classe
de
base.
a
{
function
example()
{
echo
"je
suis
a::example(),
fonctionnalité
de
base.<br>\n";
}
}
class
b
extends
a
{
function
example()
{
echo
"je
suis
b::example(),
fonctionnalité
supplémentaire.<br>\n";
parent::example();
}
}
$b
=
new
b;
//
appeler
b::example(),
qui,
à
être
tour,
appeler
a::example().
$b->example();
mot-clé
«
self
»
représenter
classe
pouvoir
être
utiliser
pour
préciser
l'accès
à
membre
précis,
attribut
statique.
cours
programmation
php
15.8
constructeur
15.8.1
php
4
5
constructeur
être
méthode
être
appeler
de
création
d'un
objet
par
«
new
».
méthode
devenir
constructeur
porter
même
nom
classe
dans
être
définie.
class
auto_panier
extends
panier_nomme
{
function
auto_panier()
{
$this->proprietaire=session_id();
}
}
classe
hériter
de
panier_nomme.
constructeur
initialiser
nom
propriétaire
être
l'identifiant
de
session.
constructeur
pouvoir
prendre
n'importe
méthode
paramètre
optionnels.
class
auto_panier
extends
panier_nomme
{
function
auto_panier($nom="anonyme")
{
$this->proprietaire=$nom;
}
}
$panier=new
auto_panier;
//
constructeur
être
appeler
avec
valeur
par
défaut
$panier2=new
auto_panier(session_id());
//
valeur
passer
15.8.2
php
5
outre
nom
de
classe
elle-même,
php
5
proposer
méthode
générique
appeler
«
__construct
»
(avec
deux
underscores
«
_
»
début)
en
lieu
place
de
premier
méthode
voir
ci-dessus.
:
function
__construct()
{
$this->proprietaire=session_id();
}
revenir
même.
15.9
constructeur
classe
dériver
15.9.1
php
4
5
classe
a
b
suivantes
:
a
{
function
a
()
{
echo
"je
suis
classe
a<br
/>";
}
}
class
b
extends
a
{
function
b
()
{
echo
"je
suis
classe
b<br
/>";
}
}
cours
programmation
php
création
d'un
nouvel
objet
de
type
b
:
$b=new
b;
afficher
suis
classe
b
classe
n'a
de
constructeur,
c'est
constructeur
de
classe
de
base
être
appeler
:
a
{
function
a
()
{
echo
"je
suis
classe
a<br
/>";
}
}
class
b
extends
a
{
var
$var;
}
$b=new
b;
//
suis
classe
a
remarque
constructeur
être
appeler
en
cascade.
dans
cas
classe
b,
constructeur
de
classe
a
n'est
appelé,
être
logique
php
pouvoir
savoir
par
défaut
appeler
constructeur
(quels
paramètres).
devoir
l'appeler
à
l'aide
mot-clé
«
parent
»:
class
a
{
function
a
()
{
echo
"je
suis
classe
a<br
/>";
}
}
class
b
extends
a
{
var
$var;
function
b()
{
echo
"je
suis
classe
b<br
/>";
parent::a();
}
}
$b=new
b;
//
affiche
:
suis
classe
b,
suis
classe
a
15.9.2
php
5
php
5
réagir
de
manière
identique
php
4,
sauf
qu'il
être
possible
d'appeler
constructeur
en
cascade,
avec
mot-clé
«
parent
»,
sans
connaître
nom
constructeur
de
classe
de
base,
utiliser
«
__construct
»
:
a
{
function
a
()
{
echo
"je
suis
classe
a<br
/>";
}
}
class
b
extends
a
{
var
$var;
function
__construct()
courir
programmation
php
{
echo
"je
suis
classe
b<br
/>";
parent::__construct();
//
appeler
constructeur
de
a
:
a()
}
}
$b=new
b;
//
affiche
:
suis
classe
b,
suis
classe
a
15.10
destructeur
15.10.1
php
4
n'y
avoir
de
destructeur
en
php
faire
confiance
dans
cas
à
gestion
de
mémoire
(ramasse-miettes)
de
php,
appeler
méthode
particulière
de
classe
à
fin
script,
charger
de
faire
ménage,
pouvoir
être
important
par
exemple
lorsqu'on
avoir
allouer
ressource
pour
image
dynamique.
pour
détruire
objet,
suffire
de
réaffecter
variable,
de
détruire
avec
«
unset
».
l'objet
être
détruire
de
façon
à
fin
de
l'exécution
script.
15.10.2
php
5
destructeur
être
présent
en
php
5.
nommer
«
__destruct
»
être
appeler
de
destruction
de
l'objet.
constructeur,
n'est
appeler
en
cascade
devoir
être
appeler
d'un
héritage.
a
{
function
__destruct()
{
echo
"au
revoir
classe
a<br
/>";
}
}
class
b
extends
a
{
function
__destruct()
{
echo
"au
revoir
classe
b<br
/>";
parent::__destruct();
}
}
$b=new
b;
unset($b);
//
destruction
de
l'objet,
affiche
revoir
classe
b
a
...
15.11
affectation
d'objets
15.11.1
code
commun
fonctionnement
affectation
objet
en
php
4
php
5
n'est
même.
en,
effet
sur
php
4,
l'affectation
faire
par
copie,
par
référence
en
php
5
pouvoir
induire
de
grandes
différence
de
fonctionnement
code
objet
en
php
4
être
utiliser
en
php
aller
voir
exemple
à
l'aide
d'une
classe
simple.
a
{
var
$a;
function
a()
{
$this->a="salut";
cours
programmation
php
}
function
affiche()
{
echo
"$this->a<br
/>";
}
}
function
modif($objet)
{
$objet->a='coucou';
}
15.11.2
php
4
en
php
4,
objet
être
affecter
par
copie,
nouvel
objet
être
créer
reprendre
propriété
premier,
être
indépendant.
résultat
code
suivre
:
$obj1=new
a;
$obj2=$obj1;
//
affectation
par
copie
$obj1->affiche();
//
affiche
salut
$obj2->affiche();
//
affiche
salut
$obj1->a="bonjour";
$obj1->affiche();
//
afficher
bonjour
$obj2->affiche();
//
affiche
salut
modif($obj1);
//
par
copie!
!
$obj1->affiche();
//
affiche
bonjour
$obj2->affiche();
//
affiche
salut
de
créer
fonction
devoir
modifier
objet,
être
passer
par
défaut
en
copie,
modifier
en
fait
copie
locale
de
l'objet.
dans
cas
passer
par
référence.
function
modif(&$objet)
{
$objet->a='coucou';
}
$obj2=&$obj1;
//
par
référence
modif($obj1);
//
par
référence
$obj1->affiche();
//
affiche
coucou
avoir
modifier
par
référence
$obj2->affiche();
//
affiche
coucou
donc,
souhaiter
créer
code
objet
en
php
4
(un
peu)
compatible
avec
objet
de
php5,
devoir
effectuer
copie
par
référence,
passer
objet
fonction
par
référence.
code
modifier
marche
dans
deux
cas.
15.11.3
php
5
en
php
5,
objet
être
affecter
par
référence
par
défaut
de
manière
implicite.
avoir
$obj1=new
a;
$obj2=$obj1;
//
affectation
par
référence
$obj1->affiche();
//
affiche
salut
$obj2->affiche();
//
affiche
salut
$obj1->a="bonjour";
$obj1->affiche();
//
afficher
bonjour
cours
programmation
php
$obj2->affiche();
//
afficher
bonjour
modif($obj1);
//
par
référence
$obj1->affiche();
//
affiche
coucou
$obj2->affiche();
//
affiche
coucou
simplifier
tâche
développeurs.
cependant,
pouvoir
demander
copie
d'un
objet
à
l'aide
d'une
méthode
spéciale
«
__clone
»
de
l'instruction
«
cloner
».
clonage
consister
à
recopier
attribut
d'une
classe
dans
un
autre.
clonage
pouvoir
être
implicite
(copie
directe
par
mécanisme
interne
de
php)
explicite
(via
méthode
__clone).
$obj3=clone
$obj1;
//
copier
$obj1
dans
$obj3
$obj1->a='bonjour';
$obj3->a='au
revoir';
$obj1->affiche();
//
afficher
bonjour
$obj3->affiche();
//
affiche
revoir
méthode
fonctionner
qu'on
n'utilise
information
complexes
ressource
descripteur
de
fichiers.
par
exemple
dans
$obj1
avoir
ouvrir
connexion
sur
base
de
données,
avoir
copier
ressource
base
de
données,
être
inutilisable,
ouverte.
falloir
rouvrir
avec
«
__clone
»
:
class
base
{
private
$db;
function
__construct()
{
$this->db=mysql_connect('localhost');
}
function
__clone()
{
$this->db=mysql_connect('localhost');
}
}
$obj1=new
base;
$obj2=clone
$obj1;
//
copie
:
__clone
rouvre
connexion
pour
copie
noter
:
méthode
«
__clone
»
être
appeler
mot-clé
«
clone
»
être
utilisé.
pouvoir
appeler
méthode.
15.12
comparaison
d'objets
15.12.1
php
4
pouvoir
effectuer
comparaison
d'objets
en
php4.
deux
instance
d'objets
être
égales
:
•
provenir
de
classe,
•
être
mêmes
attributs,
•
attribut
être
de
même
valeur.
pouvoir
employer
comparaison
avec
«
==
»
«
===
».
function
bool2str($bool)
{
if
($bool
===
false)
{
return
'false';
}
else
{
cours
programmation
php
return
'true';
}
}
function
compareobjects(&$o1,
&$o2)
{
echo
'o1
==
o2
:
'.bool2str($o1
==
$o2)."\n";
echo
'o1!
!=
o2
:
'.bool2str($o1!
!=
$o2)."\n";
echo
'o1
===
o2
:
'.bool2str($o1
===
$o2)."\n";
echo
'o1!
!==
o2
:
'.bool2str($o1!
!==
$o2)."\n";
}
flag
{
var
$flag;
function
flag($flag=true)
{
$this->flag
=
$flag;
}
}
class
switchableflag
extends
flag
{
function
turnon()
{
$this->flag
=
true;
}
function
turnoff()
{
$this->flag
=
false;
}
}
$o
=
new
flag();
$p
=
new
flag(false);
$q
=
new
flag();
$r
=
new
switchableflag();
echo
"compare
instance
créer
avec
mêmes
paramètres\n";
compareobjects($o,
$q);
echo
"\ncompare
instance
créer
avec
différents
paramètres\n";
compareobjects($o,
$p);
echo
"\ncompare
instance
d'un
parent
avec
d'une
sous-classe\n";
compareobjects($o,
$r);
exemple
aller
afficher
:
comparer
instance
créer
avec
mêmes
paramètre
o1
==
o2
:
true
o1!
!=
o2
:
false
o1
===
o2
:
true
o1!
!==
o2
:
false
comparer
instance
créer
avec
différents
paramètre
o1
==
o2
:
false
o1!
!=
o2
:
true
o1
===
o2
:
false
o1!
!==
o2
:
true
comparer
instance
d'un
parent
avec
d'une
sous-classe
o1
==
o2
:
false
o1!
!=
o2
:
true
o1
===
o2
:
false
o1!
!==
o2
:
true
cours
programmation
php
15.12.2
php
5
php
5
fait
différence
entre
comparaison
simple
«
==
»
complète
«
===
».
avec
«
==
»,
php
retourner
vrai
deux
objet
avoir
mêmes
attribut
valeurs,
s'ils
être
instance
de
même
classe,
pour
php
4.
avec
«
===
»,
php
retourner
vrai
deux
objet
faire
référence
même
objet
de
classe.
$o1=new
a;
$o2=$o1;
//
référencer
$o3=
new
a;
if($o1==$o2)
echo
"o1==o2<br
/>";
else
echo
"o1!
!==o2<br
/>";
if($o1===$o2)
echo
"o1===o2<br
/>";
else
echo
"o1!
!===o2<br
/>";
if($o1==$o3)
echo
"o1==o3<br
/>";
else
echo
"o1!
!==o3<br
/>";
if($o1===$o3)
echo
"o1===o3<br
/>";
else
echo
"o1!
!===o3<br
/>";
aller
afficher
o1==o2
//
o1
o2
être
identiques
(même
classe,
mêmes
attribut
props.)
o1===o2
//
o1
o2
être
référence
même
objet
o1==o3
//
o1
o3
être
identiques
(même
classe,
mêmes
attribut
props.)
o1!
!===o3
//
o1
o3
être
référence
sur
objet)
cours
programmation
php
16
nouveauté
en
php
5
16.1
objet
16.1.1
fonction
__autoload
fonction
«
__autoload
»
indique
à
php
réagir
tenter
de
créer
objet
depuis
classe
n'a
être
définie.
c'est
facilité
offerte
substituer
require
include.
pouvoir
être
utile
par
exemple
pour
éviter
d'inclure
l'ensemble
classe
utiliser
dans
un
projet.
préférer
inclure
définition
de
classe
moment
de
création
de
instance.
fonction
«
__autoload
»
prendre
qu'un
paramètre,
nom
de
classe.
a
de
programmer
pour
inclure
code
nécessaire.
function
__autoload($class)
{
require_once("/inc/{$class]}.php");
}
16.1.2
classe
abstraire
classe
abstraites
être
nouveauté
de
php
5.
classe
abstraite
être
classe
sans
implémentation
(qui
pouvoir
être
instanciée),
représenter
par
fonction
abstraite
(virtuelle
pure,
sans
code),
l'implémentation
être
effectuer
dans
classe
dérivées.
classe
abstraites
servir
à
définir
classe
de
base
normaliser
structure
pouvoir
être
reprendre
pour
développement
d'autres
classe
effectives.
classe
contenir
méthode
abstraite
devoir
être
définir
abstraite.
classe
dérivée
redéfinir
méthode
abstraire
de
classe
parente
(de
base),
devoir
être
déclarer
abstraire
à
tour
pouvoir
être
instanciée.
classe
implémente
méthode
abstraite
devoir
être
définir
avec
même
visibilité
faible.
méthode
abstraite
être
définir
en
protégée,
fonction
l'implémentant
devoir
être
définir
en
protéger
publique.
l'instruction
pour
définir
classe
méthode
être
«
abstract
».
//
classe
abstraire
:
contenir
méthode
abstraite
abstract
class
abstractclass
{
//
méthode
abstraite
devoir
être
redéfinir
dans
classe
dérivée
abstract
protected
function
getvalue();
public
function
prt()
{
print
$this->getvalue();
}
}
concreteclass1
extends
abstractclass
{
//
redéfinition
de
méthode
abstraire
de
classe
de
base
protected
function
getvalue()
{
return
"concreteclass1";
}
}
cours
programmation
php
concreteclass2
extends
abstractclass
{
//
redéfinition
de
méthode
abstraire
de
classe
de
base
protected
function
getvalue()
{
return
"concreteclass2";
}
}
$class1
=
new
concreteclass1;
$class1->prt();
//
affiche
concreteclass1
$class2
=
new
concreteclass2;
$class2->prt();
//
affiche
concreteclass2
16.1.3
classes,
méthode
variables
finale
php
inclure
nouveau
mécanisme
de
protection
interdire
classe
dériver
de
réimplémenter
méthode
variable,
à
classe
d'être
dérivée.
avec
mot-clé
«
final
»,
indiquer
classe,
méthode
variable
être
définitives
qu'elles
pouvoir
être
implémentées.
cas
d'erreur
:
a
{
protected
$val;
function
__construct()
{
$this->val=1;
}
final
function
affiche()
{
print
$this->val;
}
}
b
extends
a
{
function
__construct()
{
parent::_construct();
}
function
affiche()
{
//
erreur!
!on
pouvoir
redefinir!
!
print
$this->val;
}
}
$o1=new
b;
$o1->affiche();
dans
classe
b
avoir
tenter
de
récrire
méthode
afficher
déclarer
en
«
final
»,
php
retourner
un
erreur.
16.1.4
interface
objet
interface
permettre
de
créer
code
spécifier
méthode
attribut
classe
pouvoir
implémenter
sans
avoir
à
définir
être
gérées.
méthode
spécifier
dans
l'interface
devoir
être
implémentées
dans
classe
définit.
l'interface
être
moyen
de
définir
pré-requis
obligatoires
à
construction
d'un
modèle
de
classe
en
donner
liste
prototypes.
créer
interface
avec
mot-clé
«
interface
».
dans
exemple,
aller
définir
classe
implémentent
interface
devoir
définir
fonction
afficher
incrémente.
cours
programmation
php
interface
template
{
public
function
affiche();
public
function
incremente($cpt);
}
attention
:
déclaration
méthode
(notamment
paramètres)
devoir
être
identique
dans
classe
à
de
l'interface.
indiquer
qu'une
classe
implémente
interface
avec
mot-clé
«
implements
».
a
implements
template
{
protected
$val;
function
__construct()
{
$this->val=1;
}
function
affiche()
{
print
$this->val;
}
function
incremente($cpt)
{
$this->val+=$cpt;
}
}
$o1=new
a;
$o1->incremente(2);
$o1->affiche();
classe
pouvoir
implémenter
interface
en
même
temps.
dans
cas
liste
interface
devoir
être
préciser
après
mot-clé
«
implements
»,
interface
séparer
par
virgules.
interface
template
{
public
function
affiche();
public
function
incremente($cpt);
}
interface
template2
{
public
function
decremente($cpt);
}
class
a
implements
template,
template2
{
protected
$val;
function
__construct()
{
$this->val=1;
}
function
affiche()
{
print
$this->val;
}
function
incremente($cpt)
{
$this->val+=$cpt;
}
function
decremente($cpt)
{
$this->val-=$cpt;
}
}
courir
programmation
php
16.1.5
gestion
dynamique
méthode
attribut
pouvoir
surcharger
méthodes,
attribut
opérateur
en
php
5
en
c++.
de
nouvelles
fonction
permettre
d'intercepter
appel
à
méthode
attribut
prévus.
note
:
méthode
pouvoir
être
déclencher
objet,
hériter
non,
contenir
l'attribut
méthode
tenter
d'accéder.
dans
cas
contraire,
méthode
l'attribut
être
utilisés.
pour
méthode,
utiliser
méthode
«
__call
»
prendre
deux
paramètres.
premier
être
nom
de
méthode,
second
être
tableau
paramètre
passer
à
méthode.
imaginer
souhaiter
appeler
méthode
«
test
»
de
objet,
n'avions
prévoir
cas.
suffire
de
gérer
cas
dans
méthode
«
__call
»
:
a
{
function
__call($m,
$a)
{
//
gérer
appel
méthode
définies
if($m=="test")
{
echo
"fonction
test
appeler
avec
valeur
$a";
return
$a;
}
}
}
$o1
=
new
a();
$a
=
$o1->test(1,
"2",
3.4,
true);
//
test
n'existe
pourtant...
print_r($a);
//
marche
retourner
paramètre
de
test.
pour
attribut,
utiliser
méthode
«
__get
»
«
__set
».
méthode
«
__get
»
être
appeler
tenter
d'accéder
à
valeur
d'une
variable
n'est
définir
dans
classe.
prendre
unique
paramètre
nom
de
l'attribut
tenter
d'accéder.
méthode
«
__set
»
être
appeler
tenter
d'affecter
valeur
à
attribut
n'est
défini,
prendre
deux
paramètre
:
nom
de
variable
valeur
affectée.
a
{
private
$tab=array();
function
__get($v)
{
if(!
!isset($this->tab[$v]))
return
false;
else
return
$this->tab[$v];
}
function
__set($v,$c)
{
$this->tab[$v]=$c;
}
}
$o1
=
new
a();
$o1->var=1;
//
membre
var
n'existe
...
echo
$o1->var;
//
marche
affiche
1!
!
16.1.6
itération
d'objets
php
5
indexer
attribut
de
objets.
être
possible
d'accéder
à
liste
attribut
(si
visibilité
permet)
à
l'aide
simple
boucle
itérative
«
foreach
».
cours
programmation
php
a
{
public
$v1="salut";
public
$v2="les";
public
$v3="amis!
!";
private
$v4="privé";
}
$o1
=
new
a();
foreach($o1
avoir
$cle
=>
$valeur)
{
echo
"$cle
=
$valeur
<br
/>\n";
}
code
afficher
v1
=
salut
v2
=
v3
=
amis!
!
attribut
être
visibles
être
affichés.
exister
interface
prédéfinies
permettre
de
créer
propre
classe
d'itération.
classe
«
iterator
»
implémente
cinq
méthode
suivantes
:
•
current
•
next
•
key
•
valid
•
rewind
pouvoir
créer
classe
implémentant
interface
pour,
par
exemple,
naviguer
dans
résultat
d'une
requête
de
base
de
données,
dans
un
tableau.
16.1.7
type
hinting
php
5
permettre
de
contrôler
type
de
valeur
passer
en
paramètre
à
fonction.
prendre
code
suivant
retourner
infos
d'un
utilisateur
de
classe
«
utilisateur
»
:
function
detail($user)
{
return
$user->infos();
}
fonction
attendre
objet
particulier
de
classe
utilisateur.
fonctionner
à
merveille
code
être
blindé.
passer
entier,
marcher
pas,
c'est
«
return
$user->infos()
»
php
générer
erreur.
«
type
hinting
»
indiquer
à
php
qu'attend
fonction.
function
detail(utilisateur
$user)
{
return
$user->infos();
}
fois
php
5
retourner
erreur
dès
l'appel
à
fonction
recevoir
objet
de
classe
utilisateur.
cours
programmation
php
16.2
exception
16.2.1
try
...
catch
php
5
inclure
support
exception
avec
bloc
«
try
...
catch
».
pouvoir
placer
code
«
à
risque
»
code
«
exceptionnel
»
pouvoir
produire
erreur
dans
bloc
«
try
»,
gérer
l'erreur,
selon
type,
dans
bloc
«
catch
».
pouvoir
utiliser
bloc
«
catch
»
suivre
type
d'erreur
généré.
attention,
c'est
possible
gérer
erreur
avec
code
normal.
try
{
...
//
code
à
risque
d'erreur
}
catch
(exception
$e)
{
...
//
code
régler
situation
exceptionnelle
}
sein
bloc
«
try
»,
l'exécution
d'une
instruction
erronée
aller
déclencher
l'émission
d'un
signal
:
exception.
signal
interrompre
l'exécution
reste
de
bloc.
en
fonction
signal,
php
exécuter
bloc
«
catch
»
approprié.
remarquer
dans
bloc
«
catch
»,
php
gérer
exception
à
l'aide
d'une
classe
spéciale
appeler
«
exception
».
exception
être
en
fait
définir
par
objet
de
classe
d'une
classe
dérivée.
pouvoir
créer
propres
gestionnaire
d'exceptions.
pouvoir
écrire
bloc
«
catch
»
pour
gérer
exception
suivre
type
d'objet.
16.2.2
déclenchement
avec
throw
pouvoir
déclencher
exception
à
l'aide
de
l'instruction
«
throw
».
code
provoquer
exception
:
try
{
$erreur="message
d'erreur";
throw
new
exception($erreur);
echo
'jamais
exécuté';
}
catch
(exception
$e)
{
echo
'exception:
'.$e->getmessage().'
à
ligne
'.$e->getline()."\n";
}
a
l'aide
de
l'instruction
«
throw
»
avoir
provoquer
l'émission
d'une
exception
être
gérer
par
classe
«
exception
».
dans
cas,
php
aller
rechercher
bloc
«
catch
»
correspondre
type
d'objet
créer
pour
gérer
l'exception,
«catch(exception
$e)
».
16.2.3
classe
exception
classe
personnaliser
classe
«
exception
»
être
imposer
par
php
classe
de
base
parente
de
classe
utilisable
avec
«
catch
».
classe
de
base
dispose
méthode
suivantes:
•
__construct($erreur,$code)
:
constructeur
avec
message
d'erreur
code
•
getmessage()
:
retourner
message
d'erreur
générer
cours
programmation
php
•
getcode()
:
coder
erreur
de
l'exception
•
getline()
:
numéro
de
ligne
script
avoir
provoquer
l'exception
•
getfile()
:
nom
script
php
avoir
provoquer
l'exception
•
gettrace()
gettraceastring()
:
gestion
de
pile
d'appels,
java.
•
__tostring()
:
chaîne
formater
à
afficher.
méthode
«
getxxxx()
»
être
finales.
pouvoir
étendre.
constructeur
méthode
«
__tostring
»
pouvoir
être
étendus.
pouvoir
créer
propre
classe
dérivée.
monexception
extends
exception
{
public
function
__construct($message="erreur
par
défaut",
$code
=
0)
{
parent::__construct($message,
$code);
}
}
$a=1;
try
{
switch($a)
{
caser
1:
throw
new
monexception("ouille!
!",$a);
break;
caser
2:
throw
new
exception("aie!
!",$a);
break;
}
}
catch(monexception
$e)
{
echo
$e->getmessage();
}
catch
(exception
$e)
{
echo
'exception:
'.$e->getmessage().'
ligner
'.$e->getline()."\n";
}
$a
valoir
1,
«
monexception
»
être
envoyé,
$a
valoir
2,
être
«
exception
».
16.2.4
php
:
erreur
exception
?
pouvoir
dans
cas,
php
déclencher
exception
suivant
l'exécution
d'une
fonction.
dans
cas,
être
indiquer
dans
documentation
php
(voir
site
php)
en
ligne.
dans
plupart
cas,
c'est
l'ancien
système
de
gestion
erreur
être
utilisé.
code
suivant
try
{
$a=fopen('toto','r');
}
catch(exception
$e)
{
echo
'exception:
'.$e->getmessage();
}
donner
résultat
escompté.
l'exécution
de
«
fopen
»
provoquer
l'émission
d'une
exception
erreur
php
de
type
warning
:
warning:
fopen(toto)
[function.fopen]:
failed
to
open
stream:
no
such
file
cours
programmation
php
directory
in
c:\apachefriends\xampp\htdocs\objet\panier.php
line
21
php
gérer
niveau
d'erreurs
:
warning,
notice,
etc.
par
exemple,
problème
d'ouverture
de
fichier
émettre
erreur
de
type
warning,
erreur
de
syntaxe
parse,
l'utilisation
d'une
variable
déclarer
un
notice.
pouvoir
régler
modifier
niveau
d'erreurs
dans
php.ini,
via
fonctions.
parmi
fonctions,
deux
pouvoir
intéresser.
«
set_error_handler
»
permettre
de
modifier
comportement
par
défaut
de
php
lorsqu'il
rencontrer
erreur
dans
script.
lieu
d'exécuter
propre
gestionnaire,
exécuter
votre.
attention,
gestionnaire
pouvoir
gérer
type
d'erreurs
(syntaxe,
etc,
voir
http://www.php.net/manual/en/function.set-error-
handler.php),
dans
cas
d'un
simple
warning
notice
n'y
avoir
de
problème.
passer
en
paramètre
nom
de
propre
fonction
devoir
gérer
l'erreur.
paramètre
être
parlants.
dans
fonction,
aller
déclencher
exception
à
réception
de
n'importe
erreur.
function
gest_erreur($errno,
$errstr,
$errfile,
$errline)
{
throw
new
exception("$errstr
line
$errline",$errno);
}
set_error_handler("gest_erreur");
a
l'exécution
de
bloc
«
try...catch
»,
avoir
fois
exception:
fopen(toto)
[function.fopen]:
failed
to
open
stream:
no
such
filer
or
directory
line
21
vouloir
:
avoir
déclencher
un
exception.
16.2.5
exception
par
défaut
instruction
php
générer
exception
instruction
être
sein
d'un
bloc
«
try...catch
»,
php
générer
exception
par
défaut
avec
propre
gestionnaire
d'exceptions.
pouvoir
modifier
état
avec
fonction
«
set_exception_handler
».
function
exception_handler($exception)
{
echo
"exception
imprévue
:
"
,
$exception->getmessage(),
"\n";
}
set_exception_handler('exception_handler');
cours
programmation
php
17
sauvegarder
objet
17.1
cas
d'une
session
information
indiquées
fonctionner
en
php
4
qu'en
php
falloir
distinguer
cas
session
falloir
passer
objet
d'une
page
à
l'autre
cas
d'une
sauvegarde
d'un
objet
sur
disque.
dans
premier
cas,
session
être
utiliser
objet
pouvoir
être
passer
d'une
page
à
autre
en
respecter
règles
:
•
session
devoir
être
ouvrir
sur
page
par
fonction
«
session_start()
»
avant
l'utilisation
de
l'objet
•
classe
devoir
être
définir
avant
l'ouverture
de
session
par
session_start()
l'appel
à
l'objet,
impliquer
de
répéter
déclaration
dans
page,
de
placer
dans
fichier
à
inclure
avec
«
require()
»
«
require_once()
»
en
début
de
script.
•
l'objet
devoir
être
variable
de
session
stocker
par
fonction
«
session_register()
»,
à
l'aide
tableau
global
«
$_session[]
».
exemple
:
objet.inc
:
<?
class
panier
{
//
eléments
de
panier
var
$contenu;
//
ajout
de
$qte
article
de
type
$code
panier
function
ajout_article
($code,
$qte)
{
if(isset($this->contenu[$code]))
$this->contenu[$code]
+=
$qte;
else
$this->contenu[$code]
=
$qte;
}
//
suppression
de
$num
article
type
$artnr
panier
function
suppr_article
($code,
$qte)
{
if
($this->contenu[$code]
>
$qte)
{
$this->contenu[$code]
-=
$qte;
return
true;
}
else
{
return
false;
}
}
function
liste_article()
{
foreach($this->contenu
avoir
$ref
=>
$qte)
echo
"$ref=$qte
<br
/>";
}
}
panier_nomme
extends
panier
{
var
$proprietaire;
function
nom_proprietaire
($nom)
{
$this->proprietaire
=
$nom;
}
}
cours
programmation
php
?>
objet.php
:
<?php
require_once("objet.inc");
session_start();
?>
<html>
<head>
<title>page
1</title>
</head>
<body>
<?
$_session['objet']=new
panier_nomme;
$_session['objet']->nom_proprietaire("seb");
$_session['objet']->ajout_article("ref01",3);
$_session['objet']->suppr_article("ref01",1);
$_session['objet']->ajout_article("ref02",3);
echo
"{$_session['objet']->proprietaire}<br
/>";
?>
<a
href="objet2.php">page
2</a>
</body>
</html>
objet2.php
:
<?php
require_once("objet.inc");
session_start();
?>
<html>
<head>
<title>page
2</title>
</head>
<body>
<?
echo
$_session['objet']->proprietaire."<br
/>";
$_session['objet']->liste_article();
?>
</body>
</html>
17.2
autres
cas
n'empêche
de
conserver
objet
pour
récupérer
tard,
même
après
avoir
fermer
session.
pour
pouvoir
stocker
dans
fichier
en
base
de
données.
pour
récupérer
format
correct
de
donnée
pour
stockage,
falloir
utiliser
fonction
«
serialize()
»
«
unserialize()
».
premier
fonction
retourner
chaîne
de
texte
représenter
variable
(pas
objet)
passer
en
paramètre.
format
de
donnée
pouvoir
être
stocker
dans
manière
convient.
second
fonction
prendre
paramètre
chaîne
de
texte
issue
de
serialize
retourner
variable
type
originel,
dans
cas
objet.
classa.inc:
<?php
class
a
{
var
$one
=
1;
function
show_one()
{
echo
$this->one;
courir
programmation
php
}
}
?>
page1.php:
<?php
include("classa.inc");
$a
=
new
a;
$s
=
serialize($a);
//
enregistrer
$s
page2.php
pouvoir
trouver.
$fp
=
fopen("store",
"w");
fputs($fp,
$s);
fclose($fp);
?>
page2.php:
<?php
//
être
nécessaire
unserialize()
fonctionner
include("classa.inc");
$s
=
implode("",
@file("store"));
unserialize($s);
//
maintenant,
utiliser
méthode
show_one
de
l'objet
$a.
$a->show_one();
?>
cours
programmation
php
