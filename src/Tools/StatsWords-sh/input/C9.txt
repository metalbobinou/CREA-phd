base
de
donnée
2:
php
and
mysql
plan
cours
1
rappel
sql
2
introduction
web
php
3
variables
constante
4
opérateur
5
tableau
6
structure
de
contrôle
7
fonction
8
gestion
formulaire
9
programmation
orienter
objet
(poo)
10
accès
base
de
données(mysql)
11
cinq
mini
projet
à
réaliser
rappel
sql
•
travail
pratiques
:
révision
opération
:
create
table,
insert,
update,
alter
table,
add
constraints
dans
tp1.
introduction
web
qu’est
web?
ø
terme
créer
par
par
tim
berners-lee
(désigne
toile
d’araignée
(en
anglais)).
ø
enorme
réseau
d’ordinateurs
connecter
héberger
site
web.
rapport
entre
web
internet
?
ø
web
être
application
d’internet
juste
messagerie
instantanée!!
!!
introduction
web
qu’est
qu’un
site
web?
ø
ecrit
en
3
langages:
html
pour
marquer
contenu
site.
css
gérer
style
javascript
pour
rendre
interactif.
ø
accessible
depuis
dresser
unique
:
url(uniform
resource
locator)
protocole
http://
mot
de
passe
(facultatif)
user:password@
nom
serveur
www.ccm.net
port
(facultatif
80)
chemin
glossair/
glossair.php
introduction
php
php
:
php
hypertext
preprocessor.
–
langage
interpréter
pour
créer
site
dynamiques.
–
langage
de
script
côté
serveur.
–
langage
«
embedded
html
».
–
open
source
:
php
avoir
permettre
de
créer
grand
nombre
de
site
web
célèbres,
facebook,
wikipédia,
etc.
introduction
php
site
statique
vs
site
dynamique
-
site
statique
:
écrire
en
html(
javascript)
,
contenir
pour
utilisateurs.
-
site
dynamique
:
contenir
adapter
besoin
utilisateur
(
nécessiter
temps
de
traitement).
introduction
php
relation
client/serveur.
installation
configuration
de
php
suffire
de
télécharger
serveur
web
:
•
wamp
:
http://www.wampserver.com/
•
mamp
:
http://www.mamp.info/
•
xampp
:
https://www.apachefriends.org/fr/
editeur
de
texte
:
•
sublim
text
:
http://www.sublimetext.com/2
introduction
php
syntaxe
de
base
:
<!
!doctype
html
public
"-//w3c//
dtd
html
4.01//en"
"http://
www.w3.org/tr/html4/strict.dtd">
<!
!doctype
html>
<html>
<head>
<title>titre</title>
</head>
<body>
<?php
echo
"hello
world!
!";
?>
</body>
</html>
introduction
php
commentaire
:
ø
commentaire
hériter
langage
c
perl
//
être
commentaire
sur
seule
ligne
/*
être
commentaire
sur
ligne
*/
ø
commentaire
styler
shell
#
être
commentaire
sur
seule
ligne
type
de
donnée
php
supporter
type
de
donnée
suivants
:
•
nombre
entiers,
•
nombre
à
virgule
flottante,
•
chaîne
de
caractères,
•
tableaux,
•
objet
(développés
dans
section
programmation
orienter
objet
).
fonction
«
gettype
»
permettre
de
connaître
type
de
variable.
variable
n'est
définie,
renvoyer
"string".
:
$a=
12;
echo
gettype($a)
;
//
=>
"integer
»
type
de
donnée
nom
de
variables
être
précéder
d’un
$:
pour
spécifier
variable
de
type
entier
:
•
$toto
=
123
;
#
être
entier
en
base
10,
•
$toto
=
-123
;
#
être
entier
négatif.
pour
spécifier
variable
de
type
chaîne
de
caractère
:
•
$personne
=
’$toto
smith’
;
#
être
chaîne
de
caractère
pour
afficher
caractère
spéciaux.
•
$personne
=
"m.
smith"
;
#
être
chaîne
de
caractères.
•
$chaine=«
chaine1»
.
«chaine2»
;
//
affiche
chaine1chaine2
•
$chaine=«
chaine1
»
.
$toto
;
//
affiche
chaine1
123
type
de
données
opérateur
sur
chaîne
de
caractère
:
–
concaténation
:
chaine1
.
chaine2
opérateur
logiques
:
•
and
&&
(vrai
$a
$b
vrais)
•
or
||
(vrai
$a
$b
être
vrais)
opérateur
arithmétiques
:
•
addition
:
$a
$b,
•
soustraction
:
$a
-
$b,
•
multiplication
:
$a
*
$b,
•
division
:
$a
/
$b,
•
modulo
(reste
de
division
entière)
:
$a
%
$b.
type
de
données
opérateur
arithmétiques
:
•
attention
:
lorsqu’une
chaine
de
caractère
être
évaluer
un
valeur
numérique,
règles
suivantes
s’appliquent
:
•
$toto
=
1
"4.5"
;
#
$toto
valoir
5.5
•
$toto
=
1
"titi
149"
;
#
$toto
valoir
1
chaine
valoir
0
c’est
texte
ou,
•
$toto
=
1
"149
titi"
;
#
$toto
valoir
150
chaine
valoir
149
(commence
par
valeur
numérique).
type
de
données
opérateur
de
comparaison
:
•
égal
à
:
$a
==
$b,
•
différent
de
:
$a!
!=
$b,
•
supérieur
à
:
$a
>
$b,
•
inférieur
à
:
$a
<
$b,
•
supérieur
égal
à
:
$a
>=
$b,
•
inférieur
égal
à
:
$a
<=
$b.
exemple
:
echo
$toto
==
0
?
"
vrai"
:
"
faux"
;
type
de
donnée
dater
déclaration
:
•
datetime
$date
=
new
datetime('2000-01-05');
•
date_create
:
de
datetime::__construct()
$date2
=
date_create('2000-01-01');
extraction
mois,
année
,
……
:
ø
avec
style
procédural
en
utiliser
date_format
echo
date_format($date,
"m");
ø
avec
style
orienter
objet
(oo)
:
echo
$date->format('y');
type
de
donnée
dater
exemple
:
•
$date=date(
"d-m-y
");
echo
«
être
date
jour
»
.$date
;
•
$heure
=
date("h:i:s");
echo
"c'est
l’heure
jour
"
.$heure
;
constantes
•
constantes
être
variables
valeur
pouvoir
changer
durant
durée
de
vie
d’un
script.
•
constantes
être
utiliser
pour
définir
paramètre
application
web
tq
:
racine
site,
nom
de
base
de
données….
•
nom
de
constante
valide
commencer
par
lettre
souligner
(_),
suivre
d'un
nombre
quelconque
de
lettre,
chiffre
souligner
•
définir
constante
en
utiliser
fonction
define()
;
exemple
:
define("ma_constante",
"hello")
;
•
pour
afficher
constante
:
echo
ma_constante
echo
const("ma_constante");
exemple
:
php
définir
constante
php_os
indiquer
système
d’exploitation
utiliser
par
machine
faire
tourner
php
(ex
:
linux)
.
tableau
tableau
de
php
ressembler
tableau
associatifs(
hash-tables
).
•
l’
index
être
appeler
clé
•
valeur
associer
à
clé
être
appeler
valeur
.
déclarer
tableau
avec
deux
façon
:
•
utiliser
fonction
array()
pour
créer
tableau
;
•
affecter
valeur
tableau
;
tableau
fonction
sur
tableau
:
•
sizeof()
:
retourner
nombre
d’éléments
d’un
tableau,
•
count()
:
retourner
nombre
d’éléments
d’un
tableau
s’il
existe,
1
variable
n’est
tableau
0
variable
n’existe
pas.
tableau
exemple:
•
$suite
=
array(1,
2,
3,
4)
;
•
$tab[0]
=
1
;
•
$tab[1]
=
"toto"
;
#
pouvoir
mélanger
contenu
•
$tab["
chaine"]
=
"
valeur"
;
#
pouvoir
mélanger
clés.
•
$personne
=
array("type"
=>
"m.",
"nom"
=>
•
"smith")
;
tableau
parcourir
tableau
:
<?php
//
créer
array
$prenoms
$prenoms
=
array
('françois',
'michel',
'nicole',
'véronique',
'benoît');
//
faire
boucle
pour
afficher
:
for
($numero
=
0;
$numero
<
5;
$numero++)
{
echo
$prenoms[$numero]
.
'<br
/>';
}
?>
tableau
parcourir
tableau
associatif
:
<?php
$personne
=
array("type"
=>
"m.",
"nom"
=>
"smith")
;
foreach($personne
as
$cle
=>
$valeur)
{
echo
"cle="
.$cle
.“
valeur=
"
.
$valeur
;
}
condition
:
«
if
…
else
»
prototype
:
if
(condition1)
{
#
instruction
à
exécuter
condition1
être
vraie...
}
elseif
(condition2)
{
#
instruction
à
exécuter
condition2
être
vraie...
...
}
else
{
#
instruction
à
exécuter
condition
n’est
vraie...
}
ø
fonctionnalité
de
l’instruction
if
être
mêmes
en
php
qu’en
c;
condition
:
«
if
…
else
»
exemple
:
if
($type
==
"femme")
{
echo
"bonjour
madame"
;
}
elseif
($type
==
"homme")
{
echo
"bonjour
monsieur"
;
}
else
{
echo
"bonjour,
être
bizarre!
!"
;
}
condition
:
«
switch
»
prototype
:
switch
($var)
{
case
val1:
#
instruction
à
exécuter
val1…
break;
caser
val2:
#
instruction
à
exécuter
val2…
break;
default:
#
cas
être
utiliser
autres
cas
avoir
échoué.
break;
}
boucle
:
while
boucle
while
être
moyen
simple
d’implémenter
boucle
en
php;
ø
prototype
:
while
(condition)
{
#
instruction
à
exécuter
condition
être
vraie...
}
prototyper
simplifier
:
while
(condition)
:
#
instruction
à
exécuter
condition
être
vraie...
endwhile
;
boucle
:
while
exemple
:
$i
=
1
;
while
($i
<=
10)
{
echo
"$i
"
;
$i++
;
}
•
affiche
1
2
3
4
5
6
7
8
9
10.
boucle
:
for
boucle
«
for
»
fonctionner
boucle
for
langage
c;
prototyper
:
for
(expression1
;
condition
;
expression2)
{
#
instruction
à
exécuter
condition
être
vraie...
}
prototyper
simplifier
:
for
(expression1
;
condition
;
expression2)
:
#
instruction
à
exécuter
condition
être
vraie...
endfor;
boucle
:
for
exemple
:
for
($i
=
1
;
$i
<=
10
;
$i++)
{
echo
"$i
"
;
}
•
affiche
1
2
3
4
5
6
7
8
9
10.
exercice
1:
écrire
script
php
afficher
version
php
d’autres
information
sur
configuration.
exercice
1:
solution
1
:
<?php
phpinfo();
?>
solution
2
:
<?php
echo
"<pre>";
print_r($globals);
//affiche
nom
super
globales.
echo
"</pre>";
?>
exercice
2:
$var
=
'php
tutorial'.
1-mettre
variable
var
dans
section
h3
tag
,
centrer
l’afficher
avec
couleur
rouge
dans
document
html
.
2-souligner
titre
3-
ajouter
paragraphe
suivre
:
“
être
paragraphe”.
exercice
2:
solution
:
<?php
$var
=
'php
tutorial';
?>
<!
!doctype
html>
<html>
<head>
<title><?php
echo
$var;
?>
</title></head>
<body>
<u><h3>
<font
color="red">
<?php
echo
$var;
?></h3></u>
</font>
<p>
être
paragraphe.</p>
</body>
</html>
exercice
3:
compter
de
10
jusqu’à
22
exercice
3:
solution
for
($i
=
10
;
$i
<=
22
;
$i++)
{
echo
"$i
"
;
}
fonction
fonction
pouvoir
être
définir
par
mot
clé
«
function
»
en
utiliser
syntaxe
suivante
:
function
nomd-delafonction
($arg_1,
$arg_2,
/*
...,
*/
$arg_n)
{
#
instructions...
return
$valeur_de_retour
;
//
optionnel
}
n'y
avoir
de
distinction
fonction
/
procédure
en
php.
fonction
fonction
n'ont
besoin
d'être
définir
avant
d'être
utilisées,
sauf
lorsqu'une
fonction
être
définir
à
l’intérieur
d’une
autre
fonction
:
@ord@
fonction
conditionnelle
:
//
imposible
d’appeler
foo()
fonction
n’existe
if
(condition)
{
function
foo()
{
echo
"je
n'existe
programme
n'est
passer
ici.\n";
}
}
fonction
2.
fonction
dans
autre
fonction
function
foo()
{
function
bar()
{
echo
"je
n'existe
foo()
n'est
appelé.\n";
}
}
/*
impossible
d'appeler
bar()
ici,
n'existe
pas.
*/
foo();
/*
maintenant,
pouvoir
appeler
bar(),
l'utilisation
de
foo()
l'a
rendre
accessible.
*/
bar();
fonction
php
supporter
passage
d'arguments
:
•
par
valeur
:
comportement
par
défaut
•
par
référence
:
fonction
pouvoir
changer
valeur
arguments.
:
$toto=2;
function
mafonctionref(&$titi)
{
$titi=$titi+1;
echo
$titi;}
mafonctionref($toto);
//
afficher
3
echo($toto)
;
//
affiche
3;
fonction
•
liste
variable
d'arguments
:
mot
clé
…
indique
fonction
accepter
nombre
variable
arguments.
:
function
sum(...$vars)
{
$somme
=
0;
foreach
($vars
avoir
$i)
{
$somme
=
$i;
}
return
$somme;
}
echo
sum(1,
2,
3,
4);
//
afficher
10
résultat.
echo
sum(1,2);
//
affcihe
3;s
fonction
•
valeur
par
défaut
arguments.
function
servir_cafe
($type
=
"cappuccino")
{
return
"servir
$type.\n";
}
echo
servir_cafe();
//
afficher
«
servir
cappuccino
àles
argument
sans
valeur
par
défaut
devoir
être
en
premiers,
erreur
function
melangedarguments
($type
=
"pardefault",
$varsansdefault)
{
return
"message
$type
$varsansdefault.\n";
}
echo
melangedarguments
(
"test");
//
afficher
erreur
fonction
•
a
partir
de
version
7.0,
php
supporter
définition
type
de
retour.
ex:
function
mafonction($var)
:
string
{
return
$var;
}
•
return
être
omis,
valeur
null
être
retournée.
•
pour
renvoyer
valeur
en
même
temps
,
suffire
de
retourner
tableau
;
:
function
couleurs()
{
return
array(
"res1",
"res2",
"res3")
;
}
}
list($var1,
$var2,
$var3)
=
couleurs();
fonction
•
pour
retourner
référence
d'une
fonction,
utiliser
l'opérateur
&
dans
déclaration
de
fonction
dans
l'assignation
de
valeur
de
retour.
:
?php>
function
&
mafonction(&$var){
$var=$var+2;
return
$var;
}
$toto=
&
mafonction($var2);
?>
à
propriété
de
l’objet
retourner
par
fonction
mafonction()
être
lier
à
$toto.
s’agit
d’une
copie
de
$var.
fonction
•
php
supporter
surcharge,
destruction
redéfinition
de
fonction
déclarées.
•
être
possible
d'appeler
fonction
récursives
en
php.
a
noter
qu'un
appel
récursif
infini
être
considérer
erreur
de
programmation.
fonction
utiles
en
php
•
gettype($var)
:
retourner
type
de
variable.
•
addslashes():
ajouter
antislash
devant
caractère
spéciaux.
:
$res
=
addslashes("l'a");
//
retourn
l\’a.
•
strstr(texte,
chaineachercher)
:
trouver
premier
occurrence
dans
un
chaîne.
:
$email
=
'name@example.com';
$domain
=
strstr($email,
'@');
echo
$domain;
//
affiche
:
@example.com
fonction
utiles
en
php
•
htmlspecialchars
(chaine,
flags)
:
convertir
caractère
spéciaux
en
entité
html.
remplacer
par
exemple
&
(et
commercial)
en
&amp;
example
de
flag
être
ent_quotes
convertir
guillemet
doubles
guillemet
simples.
:
$str
=
"this
is
some
<b>
bold
</b>
text.";
echo
htmlspecialchars($str);
//
affiche
:
this
is
some
&lt;b&gt;bold&lt;/
`
b&gt;
text.
•
strip_tags
(chaine,
allowabletags):
supprimer
balise
html
php
d'une
chaîne.
commentaire
html
php
être
supprimés.
comportement
pouvoir
être
modifier
avec
paramètre
allowabletags
.
:
$text
=
'<p>test
paragraph.</p><!
!--
-->
<a
href="#fragment">other
text</a>';
//
autoriser
<p>
<a>
echo
strip_tags($text,
'<p><a>');
//
affiche
:
<p>test
paragraph.</p>
<a
href="#fragment">other
text</a>
fonction
utiles
en
php
•
strlen()
:
retourner
longueur
de
chaîne
•
trim()
:
effacer
espace
blancs
début
à
fin
d’une
chaine.
•
strtolower()
:
passer
caractère
en
miniscules.
•
strtoupper()
:
passer
caractère
en
majuscules.
•
strpos(texte,chaine)
:
rechercher
position
de
premier
«
chaine
»
trouvée.
•
ereg(chaine,
texte)
:
recherche
dans
texte
,
séquence
caractère
«
chaine
»,
retourner
longueur
de
l'occurrence
trouver
occurrence
avoir
être
trouver
dans
chaîne
string
false
dans
cas
contraire
erreur
être
survenue.
:
if(ereg("bcd","abcdef"))
{echo
"oui";}
else
{echo
"non";}
fonction
utiles
en
php
•
isset($var1,$var2,…)
:
déterminer
variable
être
définir
être
différentes
de
null.
:
if
(isset($var))
{
echo
'cette
variable
existe,
pouvoir
l\'afficher.';
•
unset($var1,$var2,…)
:
détruire
variables.
•
empty
($var1)
:
déterminer
variable
être
vide.
•
array_key_exists
(key,
array)
:
vérifier
clé
exister
dans
tableau.
fonction
utiles
en
php
•
in_array(valeur,
array)
:
indique
valeur
appartenir
à
tableau.
•
array_keys(array,
valeur)
:
retourner
clé
ensemble
clé
contenir
«
valeur
»,
valeur
n’est
spécifier
retourne
clé
tableau.
•
array_values(array)
:
retourner
valeur
d'un
tableau.
exercice
1
•
ecrire
script
permettre
d’afficher
nombre
premier
parmi
0
@ord@
utiliser
2
méthode
différentes
(while,
for).
exercice
1
solution
<?php
$i=1;
while($i<=1000)
{
$z=0;
for($j=2;$j<$i;$j++)
{
if(($i%$j)==0
&&
($i!
!=$j))
$z++;
}
if($z==0)
echo
$i.'
';
$i++;
}
?>
exercice
2
•
ecrire
script
permettre
de
créer
tableau
contenir
coordonnées
d’une
d’afficher
éléments.
utiliser
tableau
numéroté́
tableau
associatif.
exercice
2
solution
•
<?php
$coordonnees=
array(‘camille',
’dupont',
21,
’paris');
for($i=0;$i<count($coordonnees);$i++)
echo
$coordonnees[$i].'
';
?>
•
tableau
associatif
:
<?php
$coordonnees=
array(
"prenom"
=>
"camille",
"nom"
=>
"dupont",
"age"
=>
21,
"ville"
=>
"paris");
foreach($coordonnees
avoir
$cle
=>$value
)
{
echo
$cle
.
"=
".
$value
.
"<br/>";
}
?>
exercice
3
•
ecrire
fonction
'
moisfr'
permettre
d’afficher
mois
en
lettre
en
français
en
utiliser
instruction
de
switch
caser
afficher
mois
4
en
faire
appel
à
fonction.
exercice
3
solution
<?php
function
moisfr($date)
{
switch($date)
{
caser
1
:
return
'janvier';
break;
caser
2
:
return
'fevrier';
break;
caser
3
:
return
'mars';
break;
caser
4
:
return
'avril';
break;
caser
5
:
return
'mai';
break;
caser
6
:
return
'juin';
break;
caser
7
:
return
'juillet';
break;
caser
8
:
return
'aout';
break;
caser
9
:
return
'septembre';
break;
caser
10
:
return
'octobre';
break;
caser
11
:
return
'novembre';
break;
caser
12
:
return
'décembre';
break;
default
:
return
'mois
valide';
}}
echo
moisfr(4);
?>
exercice
4
ecrire
un
script
php
permettre
d’afficher
résulat
suivre
:
astuce
:
utiliser
tableau
associatif
foncion
gettype();
test
sur
variables
variable
toto
être
de
type
entier,
valeur
être
@ord@
variable
titi
être
de
type
string
,
valeur
être
«
chaine».
exercice
4
solution
:
<html>
<body>
<center><h1>
test
sur
variables
</h1></center>
<?php
$variables=
array(
"toto"
=>
10,
"titi"
=>
"chaine");
foreach($variables
avoir
$cle
=>
$value
)
{
echo
"la
variable
"
.$cle
.
"
être
de
type
".
gettype($value).
",
valeur
être
"
.
$value
.
"<br/>";
}
?>
</body>
</html>
formulaire
définition
formulaire
faire
avec
balise
<form>
utiliser
deux
attribut
suivre
:
•
method
:
pour
définir
méthode
de
transfert
donnée
vers
serveur
;
deux
valeur
possible
«post»
«get»
(les
donner
formulaire
être
encoder
dans
l’url).
•
action
:
pour
préciser
l’action
à
exécuter
l’envoie
données.
exemple
d’utilisation
:
<form
method="post"
action=
"
cible.php"
>
….
</form>
formulaire
élément
d’un
formulaire:
i.
input
:
champ
de
saisie
de
texte
différents
type
de
boutons.
ii.
textarea:
zone
de
texte
multi-lignes.
iii.
select:
liste
déroulantes.
iv.
fieldset:
regrouper
élément
formulaire
formulaire
i.
input
:
champ
de
saisie
de
texte
différents
type
de
bouton
à
définir
avec
l’attribut
type
:
1.
text:
zone
de
texte
à
seule
ligne
<input
type="text"
id="toto"
name="titi"
{autofocus/
required}
/>
•
id
:
être
attribut
lire
par
navigateur
(en
html,
css
javascript)
;
•
name
:
servir
à
php
de
validation
d'un
formulaire.
coter
php
à
valeur
de
zone
texte
être
récupérer
en
php
par
variable
_$post[‘titi’],
par
contre
variable
utiliser
en
css
pour
donner
style
à
zone
être
#toto{…}.
•
valoir
:
permettre
de
pré-remplir
champ
avec
valeur
par
défaut.
•
placeholder
:
permettre
de
donner
indication
sur
contenu
champ.
indication
disparaître
dès
visiteur
avoir
cliquer
à
l'intérieur
champ.
formulaire
password:
zone
de
mot
de
passe
(caratères
saisis
s’affichent
à
l’écran)
<input
type="password"
name="pass"
id="pass"
/>
3.
checkbox
:
case
à
cocher
<input
type="checkbox"
name="choix"
id="choix"
value="
choix1
"
checked
/>
radio:
zone
d’options
<input
type=
"radio"
name="choix"
id="choix"
value="
choix1
"
/>
formulaire
5.
bouton
•
reset
:
remettre
à
zéro
formulaire
<input
type="reset"
value="effacer">
•
submit
:
validation
formulaire
<input
type="submit"
value="envoyer"
/>
formulaire
ii.
textarea
:
créer
zone
de
texte
multi-lignes.
<textarea
name="ameliorer"
id="ameliorer">
</textarea>
avoir
deux
façon
de
modifier
taille
de
zone
:
•
en
css
:
en
utiliser
propriété
css
«
width
»
«
height
».
•
avec
attribut
:
«
rows
»
«
col
»
de
balise
<textarea>.
premier
indiquer
nombre
de
ligne
de
texte
pouvoir
être
afficher
simultanément,
second
nombre
de
colonnes.
formulaire
iii.
select
:
faire
choix
parmi
possibilité
sous
forme
de
liste.
•
l’attribut
«
multiple
»
:
indique
qu'on
pouvoir
sélectionner
option
parmi
offerte
dans
contrôle.
par
défaut,
attribut
n'est
utilisé,
seule
option
pouvoir
être
sélectionnée.
•
a
l’intérieur
de
<select>
</select>
,
placer
balise
<option>
</option>
et/ou
grouper
option
avec
balise
<optgroup>
</
optgroup>
.
formulaire
•
exemple
avec
select
:
<select
id="gid"
multiple
>
<optgroup
label="groupe
1">
<option>option
1.1</option>
</optgroup>
<optgroup
label="groupe
2">
<option>option
2.1</option>
<option>option
2.2</option>
</optgroup>
<optgroup
label="groupe
3"
disabled>
<option>option
3.1</option>
<option>option
3.2</option>
<option>option
3.3</option>
</optgroup>
</select>
formulaire
iv.
fieldset
:
regrouper
élément
formulaire
avoir
rapport
entre
eux.
•
l’attribut
«
legend
»
permettre
de
donner
titre
à
groupement.
<fieldset>
<legend>vos
coordonnées</legend>
<label
for="nom">quel
être
nom
?</label>
<input
type="text"
name="nom"
id="nom"
/>
<label
for="prenom">quel
être
prénom
?</label>
<input
type="text"
name="prenom"
id="prenom"
/>
</fieldset>
traitement
formulaire
traitement
formulaire
selon
méthode
utiliser
dans
formulaire
(spécifiée
dans
l’attribut
«
method
»)
:
•
$_get
être
variable
super-globale
pour
récupérer
donnée
formulaire
avec
méthode
get.
•
$_post
être
variable
super-globale
pour
récupérer
donnée
formulaire
avec
méthode
post.
•
élément
d’un
formulaire
être
identifier
en
php
par
attribut
«
name
».
traitement
formulaire
1
:
<form
method="post"
action="cible.php">
<input
type="text"
id="toto"
name="titi"
/>
<input
type="submit"
value="envoyer"
/>
</form>
en
php,
pour
récupérer
valeur
saisir
dans
zone
texte
:
<p>je
savoir
t'appelles,
hé
hé.
t'appelles
<?php
echo
$_post[’titi'];
?>!
!</p>
traitement
formulaire
2
:
<form
method=‘get’
action=
"cible.php">
qu'est-ce
aimer
?<br
/>
<input
type="checkbox"
name="loisirs[]"
value="shopping"
/
>
faire
shopping<br
/>
<input
type="checkbox"
name="loisirs[]"
value="sport"
/>
faire
sport<br
/>
<input
type="submit"
value="ma
réponse"/>
</form>
en
php,
pour
récupérer
valeur
cocher
:
$loisirs
=
$_get["loisirs"];
echo
"<b>vous
aimer
</b><br
/>";
for
($i=0;
$i<count($loisirs);
$i++)
{
echo
$loisirs[$i]."<br
/>";
}
exercice
•
exercice
1
:
transmettre
valeur
saisir
variables
nom
,
prénom
age
d’un
formulaire
d’un
fichier
(source.php)
à
autre
page
(cible.php)
permettre
de
afficher.
exercice
exercice
1
:
solution
source.php
<form
method=“post”
action=”cible.php”>
prenom
:
<input
type=”text”
name=
“prenom”
><br/>
nom
:
<input
type=”text”
name=
“nom”
><br/>
age
:
<input
type=”text”
name=
“age”
>
<input
type=”submit”
value=
“envoyer”
>
cible.php
<?php
$prenom
=
$_post[“prenom”]
;
$nom
=
$_post[“nom”]
;
$age=$_post[“age”]
;
echo
“bonjour
<b>$prenom
$nom</b>,
age
être
:
$age
<br>”;
?>
exercice
exercice
2
:
transmettre
à
travers
lien,
valeur
variables
nom
age
d’un
fichier
(source.php)
à
autre
page
(cible.php)
permettre
de
afficher.
(sans
utiliser
formulaire
utiliser
lien
hypertexte
(
<a
href=
‘nomlien
’
></a>
)
exercice
exercice
2
:
solution
source.php
:
<html><body>
<?php
$nom="george"
;
$age=21;
?>
<a
href='pagecibletransvalssform.php?nom=<?php
echo
$nom
?>&age=<?php
echo
$age
?>'
>
lien
vers
cible
</a>
</body></html>
cible.php
:
<html><body>
<?php
nom=$_get['nom']
;
$age=$_get['age']
;
echo
'bonjour
'.
$nom
.',
age
être
:
'.
$age
.'<br>';
?>
</body>
</html>
exercice
exercice
3
:
ecrire
script
permettre
de
protéger
contenu
d’une
page
secrète
avec
login
mot
de
passe
en
utiliser
formulaire.
script
devoir
être
écrire
dans
page.
exercice
exercice
3
:
solution
<?php
$log="login";
$pass="motdepass";
if(isset($_post['login'])
and
isset($_post['passw']))
:
$login=$_post['login'];
$passw=$_post['passw']
;
endif;
if($login==$log
&&
$passw==$pass):
?>
<html><body>
***************************contenu
confidentiel************************<br/>
<b>
code
secret
:
xxxxxyyeyeyeye</b>
</body></html>
<?php
else
:
?>
<html><body>
<form
method="post">
login
:
<input
type="text"
name="login"
/><br>
mot
de
passe
:
<input
type="password"
name="passw"
><br/>
<input
type="submit"
value=
"envoyer"
/>
</body>
</html>
<?php
endif;
?>
visibilité
variables
•
en
php
exister
3
niveau
de
visibilité
d’une
variables
selon
contexte
:
•
variables
superglobales
:
être
disponibles
n'importe
dans
programme.
•
variables
globales
:
être
variables,
tableaux,
objet
constantes
créer
nous-même
dans
programme
principal.
être
visible
dans
programme
principal
•
variables
local
:
être
variables
d'une
fonction
(paramètres
compris).
visibilité
n'est
locale,
programme
principal
pouvoir
agir
sur
variables.
porter
variables
globales
•
en
php,
variable
globale
pouvoir
être
utiliser
à
l’intérieur
d’une
fonction
sans
passer
en
paramètre
de
celle-ci.
être
possible
en
utiliser
mot
clé
«
global
».
variable
devoir
être
déclarer
à
l'intérieur
de
fonction
de
pouvoir
être
utiliser
dans
celle-ci.
exemple
:
<?php
$a
=
1;
$b
=
2;
function
somme()
{
global
$a,
$b;
$b
=
$a
+
$b;
echo
$b
;
//
dans
exemple,
avoir
déclarer
$a
$b
avec
mot
clé
«
global
»
à
l’intérieur
de
somme
pour
qu’elles
être
manipuler
par
celle-ci.
}
•
deuxième
méthode
pour
accéder
variables
globales
être
d'utiliser
variable
superglobale
$globals
:
exemple
:
<?php
$a
=
1;
$b
=
2;
function
somme()
{
$globals['b']
=
$globals['a']
+
$globals['b'];
}
echo
$b;}
?>
variables
superglobales
•
variables
superglobales
être
générer
par
php
:
–
être
disponibles
contexte
script
même
à
l’intérieur
d’une
fonction
sans
être
passer
en
paramètre
de
celle-ci.
–
être
écrire
en
majuscules
commencent,
par
underscore
(_).
–
être
tableau
associatifs.
variables
superglobales
noter
:
•
$globals
:
rassembler
variables
globales.
•
$_env
:
être
variables
d'environnement
donner
par
serveur.
•
$_session
:
être
variables
de
session.
variables
rester
stocker
sur
serveur
temps
de
présence
d'un
visiteur.
•
$_cookie
:
contenir
valeur
cookies
enregistrer
sur
l'ordinateur
visiteur.
•
$_get
:
contenir
donnée
envoyer
en
paramètre
dans
l'url.
•
$_post
:
contenir
information
venir
d'être
envoyer
par
un
formulaire.
variables
superglobales
exemple
1
:
<html>
<head>
<title>la
variable
$_server</title>
</head>
<body>
<?php
echo
'nom
fichier
en
cours
d’exécution
à
partir
de
racine:'.$_server['php_self'];
echo
'<br/>'
;
echo
'nom
de
racine
script:'
.$_server['document_root']
;
echo
'<br/>';
echo
'nom
client
html:'.
$_server['http_user_agent'].'<br>';
echo
'nom
serveur
exécuter
script:'.
$_server['server_name']
;
echo
'<br/><br/>';
echo
‘votre
adresse
ip
être
:
‘.
$_server['remote_addr']
;
?>
</body>
</html>
inclusion
fichier
l’inclusion
fichier
php
servir
à
réutiliser
partie
de
code
identique
dans
endroit
dans
même
page
dans
page
différentes.
l’inclusion
fichier
faire
avec
include()
require()
:
include()
:
fonction
renvoyer
erreur
de
type
warning,
de
fait
n’arrive
à
ouvrir
fichier,
code
suivre
être
exécuté.
require()
fonction
être
identique
à
include
sauf
lorsqu'une
erreur
survient,
erreur
de
type
fatal
stopper
l’exécution
script.
inclusion
fichier
lorsqu’un
fichier
être
importé,
code
trouver
à
l’intérieur
être
exécuté.
ainsi,
variables,
constante
fichier
importer
pouvoir
être
réutiliser
dans
suite
programme.
exemple
:
fichier1
.php
:
<?php
//
définition
variables
$a
=
2;
$b
=
4;
//
affichage
d'un
texte
echo
'un
de
mathématiques...';
?>
fichier2
réutiliser
code
fichier1
:
?php
//
importation
exécution
fichier1
require(’fichier1.php');
//
calcul
produit
$produit
=
$a
*
$b;
//
affichage
de
somme
echo
’produit
de
$a
$b
=
',
$produit;
//
afficher
8
?>
redirection
vers
page
•
en
php,
fonction
header()
charger
d'envoyer
serveur
entêter
passer
en
paramètre.
•
pour
créer
redirection
avec
php,
utiliser
fonction
pour
envoyer
entêter
de
type
location
(adresse).
•
règle
importante
:
l'appel
de
‘header()’
devoir
faire
avant
envoi
navigateur
redirection
vers
page
script
de
redirection
:
<?php
header('location:
http://
www.votresite.com/pageprotegee.php');
?>
variables
de
session
•
variables
de
session
servir
à
stocker
information
sur
l’utilisateur
dans
serveur.
•
être
présentes
dans
page
de
site
pendant
présence
d’un
visiteur.
•
être
accessible
via
superglobale
$_session
variables
de
session
gestion
session
•
visiteur
arriver
sur
un
site.
session
être
créer
pour
lui.
php
générer
identifier
unique
pour
lui,
appeler
‘session
id’.
•
fois
session
être
démarrer
avec
session_start(),
infinité
de
variables
de
session
pouvoir
être
créer
selon
besoin.
•
session
être
fermer
par
session_destroy()
visiteur
charger
de
page
dans
site
pendant
minute
visiteur
souhaiter
déconnecter.
variables
de
session
variables
de
session
être
accessibles
dans
page
d’un
site
web,
falloir
appeler
session_start()
sur
de
page
avant
décrire
moindre
code
html
(avant
<!
!
doctype>.
variables
de
session
•
exemple
:
<?php
//
démarer
session
session_start();
echo
'bienvenue
à
page
numéro
1’;
//
s'amuse
à
créer
variables
de
session
dans
$_session
$_session['prenom']
=
'jean';
$_session['motpass']
=
'motdepasse’;
?>
<html>
<head><title>les
session
</title></head>
<body>
<?php
if(isset($_session['prenom']))
{
echo
"<p>
salut
savoir
es-tu,
t'appelles
".
$_session['prenom']
.
"</p>";
echo
"<p>
<a
href=\"fichierutilisantvariablessession.php\">cliquer
svp
</a></p>
»;
}
else
{
echo
"les
variables
de
session
être
déclarées<br/>"
;
}
?>
</body>
</html>
cookies
•
cookie
être
mécanisme
pour
stocker
information
sur
visiteur
de
l’identifier
.
•
variables
de
session,
cookies
être
petits
fichier
stocker
sur
l’ordinateur
de
l’utilisateur
pour
durée
de
vie
pouvoir
définir.
•
cookies
être
accessibles
via
superglobale
$_cookie.
cookies
•
fonction
setcookie()
permettre
de
définir
cookie
être
envoyer
avec
reste
en-tête
http.
àles
cookies
faire
partir
en-tête
http,
imposer
setcookie()
être
appeler
avant
affichage
de
texte
avant
<!
!doctype
>.
fonction
setcookie()
pouvoir
prendre
jusqu'à
7
paramètres.
seul
premier
être
obligatoire
définir
nom
cookie,
deuxième
définir
valeur
cookie
troisième
définir
durée
de
vie
cookie
en
seconde.
exemple
:
setcookie(’nom',
‘nomutilisateur’,
time()+3600*24);
echo
$_cookie[‘nom’]
;
//
affichage
cookie.
•
fonction
setrawcookie()
être
même
setcookie()
excepté
valeur
cookie
être
encoder
url
de
l'envoi
navigateur.
•
pour
détruire
cookie
:
appeler
setcookie()
avec
date
d’expiration
dans
passé
:
•
ex:
setcookie(
"nomcookie",
"valeurcookie",
time()-3600);
cookies
•
exemple
de
cookie
sous
forme
de
tableau
:
<?php
setcookie("cookie[three]",
"cookiethree
»,
time()+3600*1);
setcookie("cookie[two]",
"cookietwo
»,
time()+3600*1);
setcookie("cookie[one]",
"cookieone
»,
time()+3600*1);
//
l’affichage
de
cookies
:
<?php
if
(isset($_cookie['cookie']))
{
//
exemple
d'appel
cookie
:
echo
'le
cokie
two
être
:'.
$_cookie['cookie']['two'].
'
pouvoir
parcourir
avec
foreach
suivre
:
<br/>';
foreach
($_cookie['cookie']
avoir
$name
=>
$value)
{
$name
=
htmlspecialchars($name);
$value
=
htmlspecialchars($value);
echo
"$name
:
$value
<br
/>";
}
}
?>
exercice
ecrire
script
permettre
de
protéger
contenu
d’une
page
secrète
avec
login
mot
de
passe
en
utiliser
formulaire.
note
:
1-écrire
page
authentification.php
contenir
formulaire
login/mot
de
passe.
lien
hypertexte
permettre
d’afficher
page
secrète
variable
de
session
‘login’
avoir
être
créée.
manipuler
sur
même
page
donnée
formulaire
suivre
:
2-diriger
l’utilisateur
vers
pagesecret1.php
contenir
code
secret
:
zzzzzzzzzz
login==‘login1’
pass==‘pass1’.
début
falloir
vérifier
login==login1
afficher
«
bonjour
m/mme
valeurdelogin»
afficher
code
secret
créer
par
suite
lien
vers
page
précédente
lien
de
déconnexion
permettre
de
rester
sur
même
page
en
créer
variable
deconnecter=«
yes
».
3-diriger
l’utilisateur
vers
pagesecret2.php
contenir
code
secret
:
zzzzzzzzzz
login==‘login2’
pass==‘pass2’.
début
falloir
vérifier
login==login2
afficher
«
bonjour
m/mme
valeurdelogin»
afficher
code
secret
créer
par
suite
lien
vers
page
précédente
lien
de
déconnexion
permettre
de
rester
sur
même
page
en
créer
variable
deconnecter=«
yes
».
4-sinon
afficher
sur
même
page
message
«
veuillez
entrer
login
mot
de
passe
valide
»
en
laisser
formulaire
visible
de
permettre
à
l’utilisateur
de
s’authentifier.
programmation
orienter
objet
(poo)
«
classe
objet
»
•
classe
permettre
définition
d’un
nouveau
type
de
variable
rassembler
attributs.
•
permettre
définition
de
fonction
manipuler
attributs,
en
poo,
fonction
s’appellent
‘méthodes’.
•
objet
être
instance
d’une
classe.
objet
être
assimiler
à
variable
classe
type
de
objet.
programmation
orienter
objet
(poo)
«
concept
de
base
»
poo
avoir
deux
but
:
•
faciliter
réutilisation
code
avoir
écrire
grâce
à
l'héritage.
–
l’héritage
permet,
à
partir
d'une
classer
existante,
d'en
créer
nouvelle
reprendre
caractéristique
de
adapter
besoin
sans
modifier
classe
de
base.
–
être
possible
de
redéfinir
méthode
dans
classe
hériter
d'une
classe
de
base
sauf
méthode
avoir
être
définir
final.
l’appel
de
méthode
d'un
objet
être
possible
sans
soucier
de
type
intrinsèque
:
s'agit
polymorphisme.
ø
polymorphisme
traire
de
capacité
de
l'objet
à
posséder
formes.
•
l'encapsulation
donnée
traitement
correspondants.
–
l’encapsulation
permettre
de
regrouper
ensemble
d’attribut
avec
ensemble
de
méthode
en
classe
permettre
de
manipuler.
poo
en
php
«
syntaxe
de
base
»
définition
de
classe
commencer
par
mot-clé
«
class
»,
suivre
nom
de
classe.
a
création
(
instanciation
)
de
l’objet,
méthode
porter
même
nom
classe
être
appeler
:
c’est
constructeur.
dernier
être
définir
par
mot
clé
«
__construct
».
de
définition
méthode
de
classes,
attribut
statiques
être
appeler
par
l’operateur
d’objet
$this->
nomdepropriété.
exemple
:
{
//
déclaration
attribut
public
$nom,
$age
;
//
déclaration
constructeur
public
function
__construct
($nom,
$age){
$this->nom=$nom;
//
$this
représenter
l’objet
sommes
entrain
de
définir.
$this->age=$age;
}
//
déclaration
méthode
public
function
afficher
()
{
echo
$this->nom;
echo
$this->age;
}
}
poo
en
php
«
visibilité
d'un
attribut
d'une
méthode
»
•
«
public
»
:
attribut
méthode
être
public,
pouvoir
avoir
accès
depuis
n'importe
où.
•
«
private
»:
imposer
restrictions.
l’accès
attribut
méthode
être
possible
depuis
l'intérieur
de
classe.
ø
mettre
constructeur
avec
type
de
visibilité
private
sinon,
pouvoir
être
appelé,
pouvoir
instancier
classe
•
«
protected
»
avoir
même
effet
private,
à
l’exception
classe
fille
avoir
accès
attribut
protégés.
poo
en
php
«mot
clé
static
»
mot
clé
«
static
»
être
utiliser
après
type
de
visibilité
pour
déclarer
méthode
attribut
statique.
attribut
méthode
statiques
pouvoir
être
utiliser
sans
avoir
besoin
d'instancier
classe,
pouvoir
accéder
en
utiliser
nom
de
classe.
attribut
statiques
être
dire
‘attributs
de
classe’.
ainsi,
objet
avoir
accès
à
attribut
avoir
mêmes
valeur
pour
objets.
méthode
statiques
d’une
classe
servir
à
manipuler
attribut
statiques.
ainsi,
méthode
statiques
pouvoir
manipuler
attribut
statiques
de
classe.
poo
en
php
«
l’opérateur
::
»
l'opérateur
de
résolution
de
portée
«
::
»
(double
deux
point)
fournir
moyen
d'accéder
membre
statiques
constantes,
qu'aux
attribut
méthode
surcharger
d'une
classe.
àle
mot
clé«
self
::
»
être
utiliser
pour
accéder
méthode
attribut
statiques
depuis
classe.
àle
mot
clé
«
parent::
»
être
utiliser
pour
accéder
propriété
méthode
surchargés
constantes
d’une
classe
depuis
classe
fille.
àpour
référencer
élément
en
dehors
de
classe,
utiliser
nom
de
classe
«
nomclasse
::
»
.
poo
en
php
«
héritage
»
classe
pouvoir
hériter
d'une
autre
classer
en
utiliser
mot-clé
«
extends
»
dans
déclaration.
pour
accéder
méthode
propriété
statiques
de
classe
mère,
l'opérateur
«parent::»
être
utilisé.
exemple
:
extendclass
extends
simpleclass
{
//
redéfinition
de
méthode
parente
et/ou
l’ajout
attribut
function
afficher()
{
echo
"classe
étendue";
parent::afficher();
}
}
$extended
=
new
extendclass;
//
instanciation
$extended->afficher();
//
polymorphisme.
poo
en
php
«
abstraction
»
classe
abstraite
:
être
classe
qu’on
pouvoir
instancier
directement.
ø
être
définir
par
mot
clé
«
abstract
»
dans
déclaration.
ø
pour
exploiter
classe
abstraite,
falloir
créer
classe
hériter
de
classe
abstraite.
classe
abstraite
permettre
de
définir
comportement
(méthodes)
l'implémentation
(le
code
dans
méthode)
faire
dans
classe
fille
:
ø
rendre
méthode
abstraire
en
utiliser
mot
clé
«
abstract
»
avant
visibilité
de
méthode,
classe
fille
être
forcer
à
écrire
méthode.
poo
en
php
«
abstraction
»
exemple
:
classer
abstraire
abstract
class
nomabstractclass
{
//
force
classe
fille
à
définir
deux
méthode
suivants
abstract
protected
function
getvalue();
abstract
protected
function
prefixvalue($prefix);
//
méthode
commune
public
function
printout()
{
print
$this->getvalue()
.
"\n";
}
}
poo
en
php
«
constante
de
classe
»
être
possible
de
définir
valeur
constantes
à
l’intérieur
d’une
classe,
être
modifiables.
visibilité
par
défaut
constante
de
classe
être
public.
exemple
:
myclass
{
const
constant
=
'valeur
constante';
function
showconstant()
{
echo
self::constant
.
"\n";
//
self::constant=‘nouvelle
valeur’
entrainer
erreur
}
}
echo
myclasse:constant;
poo
en
php
«constante
de
classe
»
attention
à
confondre
attribut
statiques
constantes
de
classe
:
àun
attribut
statique
pouvoir
à
fait
changer
de
valeur
cours
temps,
à
différence
d’une
constante
valeur
être
fixée.
poo
en
php
«
constante
de
classe
»
cependant,
être
possible
de
déclarer
constante
dans
classe
de
base,
de
changer
valeur
dans
classe
fille
en
utiliser
méthode
«
get_called_class
»
retourner
nom
de
de
classe
depuis
constante
être
appelée.
à
ainsi,
nouvelle
valeur
de
constante
être
propre
à
classe
fille
classe
mère
garder
valeur
initiale
de
constante.
poo
en
php
«
constante
de
classe
»
exemple
:
<?php
{
//
déclaration
de
constante
const
nomclasse="personne";
public
function
__construct
(){
echo
‘
être
constructeur’
;
/*
pouvoir
changer
valeur
de
constante
par
:
self::nomclasse=‘test’
*/}
public
function
afficher
()
{
$c=get_called_class();
echo
’la
valeur
de
constante
nomclasse
être
:
'.
$c::nomclasse.
'<br/>'
;
}
}
class
hpersonne
extends
{
const
nomclasse="hpersonne"
;
public
function
__construct
(){
parent::__construct(
);
//parent::nomclasse=‘test2’’
retourner
erreur
}}
$p=new
personne();
$p->affiche();
$hp=new
hpersonne();
$hp->affiche();
?>
poo
en
php
«
mot
clé
final
»
mot-clé
«
final
»
indiquer
qu'un
élément
pouvoir
être
changer
dans
suite
programme.
ø
s'appliquer
méthode
d'une
classe
classe
elle-même.
ø
attribut
pouvoir
être
déclarer
final.
méthode
indiquée
final
pouvoir
être
redéfinir
dans
classe
dérivée.
ø
pouvoir
s'en
servir
pour
forcer
comportement
d'une
méthode
dans
sous-classes.
•
classe
final
pouvoir
être
dériver
(non
possibilité
d’héritage).
poo
en
php
«
mot
clé
final
»
exemple
:
classe
final
final
baseclass
{
public
function
test()
{
echo
"baseclass::test()
appelée";
}
//
méthode
suivante
être
finale
final
public
function
moretesting()
{
echo
"baseclass::moretesting()
appelée";
}
}
class
childclass
extends
baseclass
{
}
//
résultat
:
fatal
error:
childclass
may
not
inherit
from
final
(baseclass)
sgbs
avec
php
•
qu’est
qu’un
sgbd
??
à
«
être
logiciel
système
destiner
à
stocker
à
partager
information
dans
base
de
données,
en
garantir
qualité,
pérennité
confidentialité
informations,
en
cacher
complexité
opérations.»
wikipedia
à
parmi
logiciel
connus,
trouver
:
mysql,
postgresql,
sqlite,
oracle
mariadb.
pour
liste
détailler
sgbd,
consulter
lien
http://fadace.developpez.com/sgbdcmp/#li
sgbs
avec
php
système
pouvoir
être
catégoriser
suivre
:
sgdb
relationnel
système
baser
sur
modèle
relationnel
:
donnée
stocker
dans
table
structurer
(en
colonnes,
lignes)
relation
lier
table
entre
elles.
–
système
libre
:
mysql,
postgresql,
mariadb,
firebird,
ingres,
hsqldb,
derby.
–
système
propriétaire
:
oracle
database,
microsoft
sql
server,
db2,
maxdb,
4d,
dbase,
informix,
sybase.
sgbd
orienter
objet
:
zodb,
db4o
embarquer
:
sqlite,
berkeley
db.
sgbd
nosql
:
cassandra,
redis,
mongodb,
simpledb,
bigtable,
couchdb,
hbase,
leveldb,
rethinkdb,
memcached.
sgbs
avec
php
manipulation
base
de
donnée
mysql
faire
via
interface
graphique
‘phpmyadmin’
en
exécuter
script
php.
1.
phpmyadmin
•
programme
permettre
d'avoir
vue
rapide
de
l’ensemble
données.
•
c’est
un
outil
connus
permettre
de
manipuler
base
de
donnée
mysql.
•
phpmyadmin
être
livrer
avec
wamp,
hébergeur
permettre
d'utiliser
phpmyadmin.
(chemin
d’accès:
http://localhost:8888/phpmyadmin)
sgbs
avec
php
utilisation
d’un
sgbd
via
script
php
manipulation
d’une
base
de
donnée
s'effectue
en
5
temps
:
§
connexion
serveur
de
donnée
§
sélection
de
base
de
donnée
§
requêter
§
exploitation
requête
§
fermeture
de
connexion
mysql
avec
php
exemple
d’un
sgbd
mysql:
php
offrir
3
api
pour
connecter
à
mysql
:
1.mysqli
//
connexion
à
base
de
données
$link
=
mysqli_connect("localhost",
"root",
"passwords",
"dbname");
if
(mysqli_connect_errno())
{/*
vérification
de
connexion
*/
printf("échec
de
connexion
:
%s\n",
mysqli_connect_error());
exit();}
$query
=
"select
name
from
tablename
order
by
id
desc";
if
($result
=
mysqli_query($link,
$query))
{
/*
exécution
de
requête
*/
while
($row
=
mysqli_fetch_assoc($result))
{/*
récupérer
tableau
associatif
*/
printf
("%s
<br/>",
$row['name’]);
}
mysqli_free_result($result);
/*
libérer
jeu
de
résultat
*/
}
/
mysqli_close($link);
/*
fermeture
de
connexion
*
?>
mysql
avec
php
mysql
(obsolète
supprimer
depuis
version
php.7
)
$c
=
mysql_connect("example.com",
"user",
"password");
mysql_select_db("database");
$result
=
mysql_query("select
nom
from
tablename");
$row
=
mysql_fetch_assoc($result);
echo
htmlentities($row[’nom']);
?>
mysql
avec
php
pdo
(oo)
$pdo
=
new
pdo('mysql:host=example.com;dbname=database',
'user',
'password’)
$statement
=
$pdo->
query("select
nom
from
tablename");
$row
=
$statement->
fetch(pdo::fetch_assoc);
echo
htmlentities($row[‘nom']);
rq
:
php
offrir
possibilité
d’exploiter
l’api
mysqli
façon
orienter
objet
(oo)
:
$mysqli
=
new
mysqli("localhost",
"root",
"password",
"world");
$result
=
$mysqli->query("select
name
from
tablename");
while($row
=
$result->fetch_assoc()){
echo
htmlentities($row['name']).
"<br/>";}
mysql
avec
php
poo
manipulation
résultat
d’une
requête
sous
forme
d’objets
:
exemple
1
:
<?php
$mysqli
=
new
mysqli("localhost",
«
root",
«
root",
"world");
/*
vérification
de
connexion
*/
if
(mysqli_connect_errno())
{
printf("échec
de
connexion
:
%s\n",
mysqli_connect_error());
exit();
}
$query
=
"select
id,
name,
countrycode
from
citoyen
order
by
id
desc
limit
50,5";
if
($result
=
$mysqli->query($query))
{
/*
récupérer
tableau
d'objets
*/
while
($obj
=
$result->fetch_object())
{
printf
("%s
(%s)\n",
$obj->name,
$obj->countrycode);
}
/*
free
result
set
*/
$result->close();
}
/*
fermeture
de
connexion
*/
$mysqli->close();
?>
noter
fetch_object(
)
affecter
attribut
de
l'objet
avant
d'en
appeler
constructeur.
falloir
vérifier
valeur
être
assigner
attribut
avant
de
affecter
nouvelles
valeur
dans
déclaration
constructeur.
mysql
avec
php
poo
manipulation
résultat
d’une
requête
sous
forme
d’objets
:
avec
déclaration
de
class
exemple
2
:
//
définition
de
classe
:
{
//
déclaration
attribut
private
$id,
$nom,
$age
;
//
déclaration
constructeur
public
function
__construct
($id=0){
if(!
!$this->id)
$this->id=$id;
}
public
function
__tostring
()
{
return
‘nom:
’.
$this->nom.
‘
age
:
‘.
$this->age.
‘<br/>;
}
}
//
connexion
à
base
de
donnée
….
//
affichage
résultat
:
while
($obj
=
$result->fetch_object(‘personne’))
{
echo
$obj
;}
traquer
erreur
avec
pdo
try-catch(pdoexception)
pour
identifier
source
erreur
de
l’exécution
script
php,
ajouter
6ème
paramètre
dans
pdo
suivre
:
<?php
$bdd
=
new
pdo
('mysql:host=localhost;dbname=world;charset=utf8',
'root',
'',
array(pdo::attr_errmode
=>
pdo::errmode_exception));
?>
àdésormais,
requête
sql
comporter
erreur
aller
avoir
message
clair.
exercice
php/mysql
exercice
1
:
ecrire
script
php
afficher
ligne
de
table
citoyen
en
afficher
date
format
jj-mm-yyyy.
exercice
2:
refaire
l’exercice
code
secret
en
utiliser
base
de
données.
-login1/pass1
aller
devoir
lire
page
secret1.php
-login2./pass2
aller
devoir
lire
page
secret2.php.
transaction
:
modèle
acid
transaction
être
ensemble
de
traitement
(requêtes)
exécuter
en
rien.
acid
=
atomicité,
cohérence,
isolation
durabilité.
@ord@
atomicité
assurer
qu'une
transaction
faire
complet
tout.
àcette
règle
devoir
être
respecter
dans
situations,
d’une
panner
d'électricité,
défaillance
de
l'ordinateur
début
de
transaction
:
start
transaction
requête
:
select,
update
..
validation
de
transaction
:
commettre
annulation
de
transaction
en
cas
d’erreur
:
rollback.
rq
:
s’il
avoir
erreur
d’intégrité
de
donnée
,
roolback
faire
transaction
:
modèle
acid
@ord@
cohérence
assurer
transaction
amener
système
d'un
état
valide
(t)
à
autre
état
valide
t+1
(t
:
avant
l’exécution
t+1
après
l’exécution).
transaction
:
modèle
acid
@ord@
isolation
:
dépendance
entre
transactions.
exemple
:
utilisation
de
notion
de
‘verrou’
pour
bloquer
en
lecture
/ou
en
écriture
l’accès
à
base
de
données.
@ord@
durabilité
:
assurer
lorsqu'une
transaction
avoir
être
confirmée,
demeurer
enregistrer
à
suite
d'une
panne
d'électricité,
d'une
panne
de
l'ordinateur
d'un
autre
problème
...
transaction
avec
mysql
mysql
avoir
particularité
de
gérer
moteur
de
stockage
dans
même
bd,
appeler
moteur
de
table.
•
moteur
de
stockage
être
ensemble
d’algorithmes
permettre
de
stocker
d’accéder
donnée
dans
sgbd.
en
principe
,
seul
moteur
être
utiliser
par
sgbd.
•
pour
lister
moteur
,
utiliser
requête
:
show
engines;
transaction
avec
mysql
•
principaux
moteurs
de
stockage
mysql
:
myisam
:
populaire
ü
simple
d’utilisation.
ü
performant
sur
table
ouvrir
(
rapide
pour
opération
count()
en
lecture)
ü
offrir
index
full-text
permettre
de
faire
recherche
précise
sur
textes.
×
supporter
clé
étrangères,
transaction
×
gérer
verrouillage
niveau
de
table
(
bloquer
table
entière
opération
d’insertions,
suppression
maj).
transaction
avec
mysql
•
principaux
moteurs
de
stockage
mysql
:
memory
:
stocker
donnée
de
table
en
mémoire
(ram).
ü
rapidité
d’accès
×
en
cas
de
panne,
donnée
stocker
être
supprimées.
innodb
:
utiliser
dans
secteur
sensibles.
ü
gestion
clé
étrangères
support
transaction
(
requête
être
considérer
transaction).
ü
gérer
verrouillage
niveau
de
ligne.
×
proposer
d’index
full-text,
lent
dans
opérations.
transaction
avec
mysql
•
exemple
de
gestion
de
transaction
avec
mysql
(
achat
en
ligne)
1.
pour
supporter
transaction,
falloir
spécifier
moteur
innodb
de
création
de
table
create
tabler
compte
(
id
int
,
solde
int
not
null
)
engine=innodb
;
set
autocommit=0;
//
désactiver
validation
automatique
requêtes.
start
transaction;
update
compter
set
solde=solde+100
where
id=idvendeur;
update
compter
set
solde=solde-100
where
id=idacheteur;
commit;
transaction
avec
pdo
exemple
:
•
début
de
transaction
:
$bdd->begintransaction();
•
specification
de
transaction
:
$bdd->query();
$bdd->query();
..
validation
/
annulation
de
transaction
:
$bdd->commit();
$bdd->rollback();
exercice
écrire
script
php
aller
compter
nombre
de
visiteur
sur
site.
remarquer
:
@ord@
avant
d’écrire
script,
penser
à
choisir
moteur
de
stockage
adéquat.
2.
utiliser
driver
pdo.
référence
manuel
php
:
•
http://php.net
cours
en
ligne
:
•
https://openclassrooms.com/courses/
programmez-en-oriente-objet-en-php
•
http://caron.ws/data/livre/php_v1.pdf
